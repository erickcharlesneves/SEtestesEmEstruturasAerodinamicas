
19 - versao 6.0-principal-servoMotor-buzzer-potenciometro-mpu6051-BMP281-displayOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a634  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c10  0800a808  0800a808  0000b808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b418  0800b418  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b418  0800b418  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b420  0800b420  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b420  0800b420  0000c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b424  0800b424  0000c424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b428  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001d8  0800b600  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800b600  0000db24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ec9  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acb  00000000  00000000  000210d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00023ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e82  00000000  00000000  00024e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025390  00000000  00000000  00025c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ceb  00000000  00000000  0004b02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3362  00000000  00000000  00062d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000623c  00000000  00000000  001460bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ad  00000000  00000000  0014c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a7ec 	.word	0x0800a7ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a7ec 	.word	0x0800a7ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params)
 {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	715a      	strb	r2, [r3, #5]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value)
 {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	8af9      	ldrh	r1, [r7, #22]
 8000fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f003 fb33 	bl	800464c <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10b      	bne.n	8001004 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fec:	7d7b      	ldrb	r3, [r7, #21]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7d3b      	ldrb	r3, [r7, #20]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
		return true;
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <read_register16+0x56>
	} else
		return false;
 8001004:	2300      	movs	r3, #0

}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) 
		{
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08b      	sub	sp, #44	@ 0x2c
 8001012:	af04      	add	r7, sp, #16
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
 800101e:	4613      	mov	r3, r2
 8001020:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	b29a      	uxth	r2, r3
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	b29b      	uxth	r3, r3
 8001036:	8af9      	ldrh	r1, [r7, #22]
 8001038:	f241 3488 	movw	r4, #5000	@ 0x1388
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f003 fb01 	bl	800464c <HAL_I2C_Mem_Read>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <read_data+0x46>
		return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <read_data+0x48>
	else
		return 1;
 8001054:	2301      	movs	r3, #1

}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) 
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	461a      	mov	r2, r3
 800106a:	2188      	movs	r1, #136	@ 0x88
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff9f 	bl	8000fb0 <read_register16>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d06f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	218a      	movs	r1, #138	@ 0x8a
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff95 	bl	8000fb0 <read_register16>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d065      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3304      	adds	r3, #4
 8001090:	461a      	mov	r2, r3
 8001092:	218c      	movs	r1, #140	@ 0x8c
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff8b 	bl	8000fb0 <read_register16>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, (uint16_t *)&dev->dig_P1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3306      	adds	r3, #6
 80010a4:	461a      	mov	r2, r3
 80010a6:	218e      	movs	r1, #142	@ 0x8e
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff81 	bl	8000fb0 <read_register16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	2190      	movs	r1, #144	@ 0x90
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff77 	bl	8000fb0 <read_register16>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d047      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	330a      	adds	r3, #10
 80010cc:	461a      	mov	r2, r3
 80010ce:	2192      	movs	r1, #146	@ 0x92
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff6d 	bl	8000fb0 <read_register16>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d03d      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	330c      	adds	r3, #12
 80010e0:	461a      	mov	r2, r3
 80010e2:	2194      	movs	r1, #148	@ 0x94
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff63 	bl	8000fb0 <read_register16>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d033      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	330e      	adds	r3, #14
 80010f4:	461a      	mov	r2, r3
 80010f6:	2196      	movs	r1, #150	@ 0x96
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff59 	bl	8000fb0 <read_register16>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3310      	adds	r3, #16
 8001108:	461a      	mov	r2, r3
 800110a:	2198      	movs	r1, #152	@ 0x98
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff4f 	bl	8000fb0 <read_register16>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01f      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3312      	adds	r3, #18
 800111c:	461a      	mov	r2, r3
 800111e:	219a      	movs	r1, #154	@ 0x9a
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff45 	bl	8000fb0 <read_register16>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d015      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	219c      	movs	r1, #156	@ 0x9c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff3b 	bl	8000fb0 <read_register16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9)) 
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3316      	adds	r3, #22
 8001144:	461a      	mov	r2, r3
 8001146:	219e      	movs	r1, #158	@ 0x9e
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff31 	bl	8000fb0 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <read_calibration_data+0xfa>
	{

		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_calibration_data+0xfc>
	}

	return false;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) 
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f103 0218 	add.w	r2, r3, #24
 8001170:	2301      	movs	r3, #1
 8001172:	21a1      	movs	r1, #161	@ 0xa1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff4a 	bl	800100e <read_data>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14b      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331a      	adds	r3, #26
 8001184:	461a      	mov	r2, r3
 8001186:	21e1      	movs	r1, #225	@ 0xe1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff11 	bl	8000fb0 <read_register16>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d041      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 021c 	add.w	r2, r3, #28
 800119a:	2301      	movs	r3, #1
 800119c:	21e3      	movs	r1, #227	@ 0xe3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff35 	bl	800100e <read_data>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d136      	bne.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011aa:	f107 030e 	add.w	r3, r7, #14
 80011ae:	461a      	mov	r2, r3
 80011b0:	21e4      	movs	r1, #228	@ 0xe4
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fefc 	bl	8000fb0 <read_register16>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d02c      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	21e5      	movs	r1, #229	@ 0xe5
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fef2 	bl	8000fb0 <read_register16>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80011d8:	2301      	movs	r3, #1
 80011da:	21e7      	movs	r1, #231	@ 0xe7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff16 	bl	800100e <read_data>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d117      	bne.n	8001218 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	841a      	strh	r2, [r3, #32]

		return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af04      	add	r7, sp, #16
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	b29a      	uxth	r2, r3
 8001242:	89f9      	ldrh	r1, [r7, #14]
 8001244:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	f003 f900 	bl	8004458 <HAL_I2C_Mem_Write>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <write_register8+0x40>
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <write_register8+0x42>
	else
		return true;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800127a:	2b76      	cmp	r3, #118	@ 0x76
 800127c:	d005      	beq.n	800128a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001282:	2b77      	cmp	r3, #119	@ 0x77
 8001284:	d001      	beq.n	800128a <bmp280_init+0x1e>

		return false;
 8001286:	2300      	movs	r3, #0
 8001288:	e099      	b.n	80013be <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001290:	2301      	movs	r3, #1
 8001292:	21d0      	movs	r1, #208	@ 0xd0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff feba 	bl	800100e <read_data>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <bmp280_init+0x38>
		return false;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e08c      	b.n	80013be <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012aa:	2b58      	cmp	r3, #88	@ 0x58
 80012ac:	d006      	beq.n	80012bc <bmp280_init+0x50>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012b4:	2b60      	cmp	r3, #96	@ 0x60
 80012b6:	d001      	beq.n	80012bc <bmp280_init+0x50>

		return false;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e080      	b.n	80013be <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012bc:	22b6      	movs	r2, #182	@ 0xb6
 80012be:	21e0      	movs	r1, #224	@ 0xe0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffae 	bl	8001222 <write_register8>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <bmp280_init+0x64>
		return false;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e076      	b.n	80013be <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	2301      	movs	r3, #1
 80012d6:	21f3      	movs	r1, #243	@ 0xf3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fe98 	bl	800100e <read_data>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f5      	bne.n	80012d0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff feb5 	bl	800105e <read_calibration_data>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d100      	bne.n	8001302 <bmp280_init+0x96>
 8001300:	e001      	b.n	8001306 <bmp280_init+0x9a>
		return false;
 8001302:	2300      	movs	r3, #0
 8001304:	e05b      	b.n	80013be <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800130c:	2b60      	cmp	r3, #96	@ 0x60
 800130e:	d10a      	bne.n	8001326 <bmp280_init+0xba>
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff26 	bl	8001162 <read_hum_calibration_data>
 8001316:	4603      	mov	r3, r0
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <bmp280_init+0xba>
		return false;
 8001322:	2300      	movs	r3, #0
 8001324:	e04b      	b.n	80013be <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	015b      	lsls	r3, r3, #5
 800132c:	b25a      	sxtb	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b25b      	sxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	461a      	mov	r2, r3
 8001340:	21f5      	movs	r1, #245	@ 0xf5
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff6d 	bl	8001222 <write_register8>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <bmp280_init+0xe6>
		return false;
 800134e:	2300      	movs	r3, #0
 8001350:	e035      	b.n	80013be <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	78db      	ldrb	r3, [r3, #3]
 8001364:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001366:	b25a      	sxtb	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25a      	sxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800137e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001386:	2b60      	cmp	r3, #96	@ 0x60
 8001388:	d10d      	bne.n	80013a6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001390:	7b7b      	ldrb	r3, [r7, #13]
 8001392:	461a      	mov	r2, r3
 8001394:	21f2      	movs	r1, #242	@ 0xf2
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff43 	bl	8001222 <write_register8>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <bmp280_init+0x13a>
			return false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e00b      	b.n	80013be <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	461a      	mov	r2, r3
 80013aa:	21f4      	movs	r1, #244	@ 0xf4
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff38 	bl	8001222 <write_register8>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <bmp280_init+0x150>
		return false;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <bmp280_init+0x152>
	}

	return true;
 80013bc:	2301      	movs	r3, #1
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	10da      	asrs	r2, r3, #3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013e8:	12db      	asrs	r3, r3, #11
 80013ea:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	111b      	asrs	r3, r3, #4
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	8812      	ldrh	r2, [r2, #0]
 80013f4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	1112      	asrs	r2, r2, #4
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	8809      	ldrh	r1, [r1, #0]
 80013fe:	1a52      	subs	r2, r2, r1
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800140c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001410:	139b      	asrs	r3, r3, #14
 8001412:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	441a      	add	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3380      	adds	r3, #128	@ 0x80
 800142a:	121b      	asrs	r3, r3, #8
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b0cc      	sub	sp, #304	@ 0x130
 800143e:	af00      	add	r7, sp, #0
 8001440:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001444:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001448:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	 int64_t var1, var2, p;

	    // Calculate var1 and var2 based on fine_temp and device calibration parameters
	    var1 = (int64_t)fine_temp - 128000;
 800144c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001450:	17da      	asrs	r2, r3, #31
 8001452:	461c      	mov	r4, r3
 8001454:	4615      	mov	r5, r2
 8001456:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800145a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800145e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	    var2 = var1 * var1 * (int64_t)dev->dig_P6;
 8001462:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800146a:	fb03 f102 	mul.w	r1, r3, r2
 800146e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	18ca      	adds	r2, r1, r3
 800147c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001480:	fba3 8903 	umull	r8, r9, r3, r3
 8001484:	eb02 0309 	add.w	r3, r2, r9
 8001488:	4699      	mov	r9, r3
 800148a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800148e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001492:	b21b      	sxth	r3, r3
 8001494:	17da      	asrs	r2, r3, #31
 8001496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800149a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800149e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014a2:	4603      	mov	r3, r0
 80014a4:	fb03 f209 	mul.w	r2, r3, r9
 80014a8:	460b      	mov	r3, r1
 80014aa:	fb08 f303 	mul.w	r3, r8, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	4602      	mov	r2, r0
 80014b2:	fba8 1202 	umull	r1, r2, r8, r2
 80014b6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014ba:	460a      	mov	r2, r1
 80014bc:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014c4:	4413      	add	r3, r2
 80014c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014ca:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014ce:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80014d2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	    var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80014d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	17da      	asrs	r2, r3, #31
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014e6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80014ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ee:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80014f2:	462a      	mov	r2, r5
 80014f4:	fb02 f203 	mul.w	r2, r2, r3
 80014f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014fc:	4621      	mov	r1, r4
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	441a      	add	r2, r3
 8001504:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001508:	4621      	mov	r1, r4
 800150a:	fba3 1301 	umull	r1, r3, r3, r1
 800150e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001512:	460b      	mov	r3, r1
 8001514:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800151c:	18d3      	adds	r3, r2, r3
 800151e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800152e:	462b      	mov	r3, r5
 8001530:	0459      	lsls	r1, r3, #17
 8001532:	4623      	mov	r3, r4
 8001534:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001538:	4623      	mov	r3, r4
 800153a:	0458      	lsls	r0, r3, #17
 800153c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001540:	1814      	adds	r4, r2, r0
 8001542:	643c      	str	r4, [r7, #64]	@ 0x40
 8001544:	414b      	adcs	r3, r1
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
 8001548:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800154c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	    var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001554:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001558:	b21b      	sxth	r3, r3
 800155a:	17da      	asrs	r2, r3, #31
 800155c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001560:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001570:	00d9      	lsls	r1, r3, #3
 8001572:	2000      	movs	r0, #0
 8001574:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001578:	1814      	adds	r4, r2, r0
 800157a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800157c:	414b      	adcs	r3, r1
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001580:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001584:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	    var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) +
 8001588:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800158c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001590:	fb03 f102 	mul.w	r1, r3, r2
 8001594:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	18ca      	adds	r2, r1, r3
 80015a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015a6:	fba3 1303 	umull	r1, r3, r3, r3
 80015aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015ae:	460b      	mov	r3, r1
 80015b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015b8:	18d3      	adds	r3, r2, r3
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	17da      	asrs	r2, r3, #31
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015d2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015d6:	462b      	mov	r3, r5
 80015d8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015dc:	4642      	mov	r2, r8
 80015de:	fb02 f203 	mul.w	r2, r2, r3
 80015e2:	464b      	mov	r3, r9
 80015e4:	4621      	mov	r1, r4
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	4622      	mov	r2, r4
 80015ee:	4641      	mov	r1, r8
 80015f0:	fba2 1201 	umull	r1, r2, r2, r1
 80015f4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80015f8:	460a      	mov	r2, r1
 80015fa:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80015fe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001602:	4413      	add	r3, r2
 8001604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001608:	f04f 0000 	mov.w	r0, #0
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001614:	4623      	mov	r3, r4
 8001616:	0a18      	lsrs	r0, r3, #8
 8001618:	462b      	mov	r3, r5
 800161a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800161e:	462b      	mov	r3, r5
 8001620:	1219      	asrs	r1, r3, #8
	           ((var1 * (int64_t)dev->dig_P2) << 12);
 8001622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800162a:	b21b      	sxth	r3, r3
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001632:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800163a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800163e:	464a      	mov	r2, r9
 8001640:	fb02 f203 	mul.w	r2, r2, r3
 8001644:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001648:	4644      	mov	r4, r8
 800164a:	fb04 f303 	mul.w	r3, r4, r3
 800164e:	441a      	add	r2, r3
 8001650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001654:	4644      	mov	r4, r8
 8001656:	fba3 4304 	umull	r4, r3, r3, r4
 800165a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800165e:	4623      	mov	r3, r4
 8001660:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800167a:	464c      	mov	r4, r9
 800167c:	0323      	lsls	r3, r4, #12
 800167e:	4644      	mov	r4, r8
 8001680:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001684:	4644      	mov	r4, r8
 8001686:	0322      	lsls	r2, r4, #12
	    var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) +
 8001688:	1884      	adds	r4, r0, r2
 800168a:	633c      	str	r4, [r7, #48]	@ 0x30
 800168c:	eb41 0303 	adc.w	r3, r1, r3
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
 8001692:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001696:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	    var1 = (((int64_t)1 << 47) + var1) * ((int64_t)dev->dig_P1) >> 33;
 800169a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800169e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016a2:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016ae:	88db      	ldrh	r3, [r3, #6]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016bc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016c0:	462b      	mov	r3, r5
 80016c2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016c6:	4642      	mov	r2, r8
 80016c8:	fb02 f203 	mul.w	r2, r2, r3
 80016cc:	464b      	mov	r3, r9
 80016ce:	4621      	mov	r1, r4
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	4622      	mov	r2, r4
 80016d8:	4641      	mov	r1, r8
 80016da:	fba2 1201 	umull	r1, r2, r2, r1
 80016de:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80016e2:	460a      	mov	r2, r1
 80016e4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80016e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80016ec:	4413      	add	r3, r2
 80016ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80016fe:	4629      	mov	r1, r5
 8001700:	104a      	asrs	r2, r1, #1
 8001702:	4629      	mov	r1, r5
 8001704:	17cb      	asrs	r3, r1, #31
 8001706:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	    // Check for division by zero
	    if (var1 == 0) {
 800170a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800170e:	4313      	orrs	r3, r2
 8001710:	d101      	bne.n	8001716 <compensate_pressure+0x2de>
	        return 0.0f; // Avoid division by zero
 8001712:	2300      	movs	r3, #0
 8001714:	e148      	b.n	80019a8 <compensate_pressure+0x570>
	    }

	    // Calculate pressure
	    p = 1048576 - adc_press;
 8001716:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800171a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001724:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001728:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	    p = (((p << 31) - var2) * 3125) / var1;
 800172c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001730:	105b      	asrs	r3, r3, #1
 8001732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001736:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800173a:	07db      	lsls	r3, r3, #31
 800173c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001740:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001744:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001748:	4621      	mov	r1, r4
 800174a:	1a89      	subs	r1, r1, r2
 800174c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800174e:	4629      	mov	r1, r5
 8001750:	eb61 0303 	sbc.w	r3, r1, r3
 8001754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800175a:	4622      	mov	r2, r4
 800175c:	462b      	mov	r3, r5
 800175e:	1891      	adds	r1, r2, r2
 8001760:	6239      	str	r1, [r7, #32]
 8001762:	415b      	adcs	r3, r3
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
 8001766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800176a:	4621      	mov	r1, r4
 800176c:	1851      	adds	r1, r2, r1
 800176e:	61b9      	str	r1, [r7, #24]
 8001770:	4629      	mov	r1, r5
 8001772:	414b      	adcs	r3, r1
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001782:	4649      	mov	r1, r9
 8001784:	018b      	lsls	r3, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800178c:	4641      	mov	r1, r8
 800178e:	018a      	lsls	r2, r1, #6
 8001790:	4641      	mov	r1, r8
 8001792:	1889      	adds	r1, r1, r2
 8001794:	6139      	str	r1, [r7, #16]
 8001796:	4649      	mov	r1, r9
 8001798:	eb43 0101 	adc.w	r1, r3, r1
 800179c:	6179      	str	r1, [r7, #20]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017aa:	4649      	mov	r1, r9
 80017ac:	008b      	lsls	r3, r1, #2
 80017ae:	4641      	mov	r1, r8
 80017b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017b4:	4641      	mov	r1, r8
 80017b6:	008a      	lsls	r2, r1, #2
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	4622      	mov	r2, r4
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	460b      	mov	r3, r1
 80017c6:	462a      	mov	r2, r5
 80017c8:	eb42 0303 	adc.w	r3, r2, r3
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017da:	4649      	mov	r1, r9
 80017dc:	008b      	lsls	r3, r1, #2
 80017de:	4641      	mov	r1, r8
 80017e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017e4:	4641      	mov	r1, r8
 80017e6:	008a      	lsls	r2, r1, #2
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	4622      	mov	r2, r4
 80017f0:	189b      	adds	r3, r3, r2
 80017f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80017f4:	462b      	mov	r3, r5
 80017f6:	460a      	mov	r2, r1
 80017f8:	eb42 0303 	adc.w	r3, r2, r3
 80017fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80017fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001802:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001806:	f7ff f9ef 	bl	8000be8 <__aeabi_ldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	    // Further refine pressure using calibration parameters
	    var1 = ((int64_t)dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001816:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800181a:	b21b      	sxth	r3, r3
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001820:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001822:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0b50      	lsrs	r0, r2, #13
 8001830:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001834:	1359      	asrs	r1, r3, #13
 8001836:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800183a:	462b      	mov	r3, r5
 800183c:	fb00 f203 	mul.w	r2, r0, r3
 8001840:	4623      	mov	r3, r4
 8001842:	fb03 f301 	mul.w	r3, r3, r1
 8001846:	4413      	add	r3, r2
 8001848:	4622      	mov	r2, r4
 800184a:	fba2 1200 	umull	r1, r2, r2, r0
 800184e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001852:	460a      	mov	r2, r1
 8001854:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001858:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800185c:	4413      	add	r3, r2
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001862:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	0b50      	lsrs	r0, r2, #13
 8001870:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001874:	1359      	asrs	r1, r3, #13
 8001876:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800187a:	462b      	mov	r3, r5
 800187c:	fb00 f203 	mul.w	r2, r0, r3
 8001880:	4623      	mov	r3, r4
 8001882:	fb03 f301 	mul.w	r3, r3, r1
 8001886:	4413      	add	r3, r2
 8001888:	4622      	mov	r2, r4
 800188a:	fba2 1200 	umull	r1, r2, r2, r0
 800188e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001892:	460a      	mov	r2, r1
 8001894:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001898:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800189c:	4413      	add	r3, r2
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ae:	4621      	mov	r1, r4
 80018b0:	0e4a      	lsrs	r2, r1, #25
 80018b2:	4629      	mov	r1, r5
 80018b4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018b8:	4629      	mov	r1, r5
 80018ba:	164b      	asrs	r3, r1, #25
 80018bc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	    var2 = ((int64_t)dev->dig_P8 * p) >> 19;
 80018c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	17da      	asrs	r2, r3, #31
 80018cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80018ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80018d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80018d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018d8:	462a      	mov	r2, r5
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018e2:	4621      	mov	r1, r4
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018ee:	4621      	mov	r1, r4
 80018f0:	fba2 1201 	umull	r1, r2, r2, r1
 80018f4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018f8:	460a      	mov	r2, r1
 80018fa:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80018fe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001902:	4413      	add	r3, r2
 8001904:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001914:	4621      	mov	r1, r4
 8001916:	0cca      	lsrs	r2, r1, #19
 8001918:	4629      	mov	r1, r5
 800191a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800191e:	4629      	mov	r1, r5
 8001920:	14cb      	asrs	r3, r1, #19
 8001922:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	    p = ((p + var1 + var2) >> 8) + ((int64_t)dev->dig_P7 << 4);
 8001926:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800192a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800192e:	1884      	adds	r4, r0, r2
 8001930:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001932:	eb41 0303 	adc.w	r3, r1, r3
 8001936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001938:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800193c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001940:	4621      	mov	r1, r4
 8001942:	1889      	adds	r1, r1, r2
 8001944:	6539      	str	r1, [r7, #80]	@ 0x50
 8001946:	4629      	mov	r1, r5
 8001948:	eb43 0101 	adc.w	r1, r3, r1
 800194c:	6579      	str	r1, [r7, #84]	@ 0x54
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800195a:	4623      	mov	r3, r4
 800195c:	0a18      	lsrs	r0, r3, #8
 800195e:	462b      	mov	r3, r5
 8001960:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001964:	462b      	mov	r3, r5
 8001966:	1219      	asrs	r1, r3, #8
 8001968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800196c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001970:	b21b      	sxth	r3, r3
 8001972:	17da      	asrs	r2, r3, #31
 8001974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001976:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001984:	464c      	mov	r4, r9
 8001986:	0123      	lsls	r3, r4, #4
 8001988:	4644      	mov	r4, r8
 800198a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800198e:	4644      	mov	r4, r8
 8001990:	0122      	lsls	r2, r4, #4
 8001992:	1884      	adds	r4, r0, r2
 8001994:	603c      	str	r4, [r7, #0]
 8001996:	eb41 0303 	adc.w	r3, r1, r3
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

	return p;
 80019a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80019ae:	46bd      	mov	sp, r7
 80019b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019b4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80019c6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	039a      	lsls	r2, r3, #14
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d2:	051b      	lsls	r3, r3, #20
 80019d4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019dc:	4619      	mov	r1, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019ea:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 80019f2:	4611      	mov	r1, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	fb01 f202 	mul.w	r2, r1, r2
 80019fa:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	7f09      	ldrb	r1, [r1, #28]
 8001a00:	4608      	mov	r0, r1
 8001a02:	6979      	ldr	r1, [r7, #20]
 8001a04:	fb00 f101 	mul.w	r1, r0, r1
 8001a08:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a0a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a0e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a12:	1292      	asrs	r2, r2, #10
 8001a14:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a1e:	fb01 f202 	mul.w	r2, r1, r2
 8001a22:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a26:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	13db      	asrs	r3, r3, #15
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	13d2      	asrs	r2, r2, #15
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	7e12      	ldrb	r2, [r2, #24]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a52:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a5a:	bfa8      	it	ge
 8001a5c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001a60:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	131b      	asrs	r3, r3, #12
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b08c      	sub	sp, #48	@ 0x30
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001a86:	2b60      	cmp	r3, #96	@ 0x60
 8001a88:	d007      	beq.n	8001a9a <bmp280_read_fixed+0x28>
		if (humidity)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <bmp280_read_fixed+0x32>
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	e000      	b.n	8001aa6 <bmp280_read_fixed+0x34>
 8001aa4:	2306      	movs	r3, #6
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f107 0218 	add.w	r2, r7, #24
 8001ab0:	21f7      	movs	r1, #247	@ 0xf7
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff faab 	bl	800100e <read_data>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <bmp280_read_fixed+0x50>
		return false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e038      	b.n	8001b34 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ac2:	7e3b      	ldrb	r3, [r7, #24]
 8001ac4:	031a      	lsls	r2, r3, #12
 8001ac6:	7e7b      	ldrb	r3, [r7, #25]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4313      	orrs	r3, r2
 8001acc:	7eba      	ldrb	r2, [r7, #26]
 8001ace:	0912      	lsrs	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ad6:	7efb      	ldrb	r3, [r7, #27]
 8001ad8:	031a      	lsls	r2, r3, #12
 8001ada:	7f3b      	ldrb	r3, [r7, #28]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	0912      	lsrs	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	461a      	mov	r2, r3
 8001af0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fc67 	bl	80013c6 <compensate_temperature>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	461a      	mov	r2, r3
 8001b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff fc97 	bl	8001438 <compensate_pressure>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00d      	beq.n	8001b32 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b16:	7fbb      	ldrb	r3, [r7, #30]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	7ffa      	ldrb	r2, [r7, #31]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ff44 	bl	80019b4 <compensate_humidity>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity , float *altitude) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,&fixed_humidity)) {
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	f107 0218 	add.w	r2, r7, #24
 8001b52:	f107 011c 	add.w	r1, r7, #28
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff ff8b 	bl	8001a72 <bmp280_read_fixed>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d043      	beq.n	8001bea <bmp280_read_float+0xae>
		*temperature = (float) fixed_temperature / 100;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001bf4 <bmp280_read_float+0xb8>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	edc3 7a00 	vstr	s15, [r3]
        *pressure = (float) (fixed_pressure / 25600.0f) / 1013.25;  // Convertendo de hPa para atm
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001bf8 <bmp280_read_float+0xbc>
 8001b88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b8c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001bfc <bmp280_read_float+0xc0>
 8001b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	edc3 7a00 	vstr	s15, [r3]
		*humidity = (float) fixed_humidity;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	edc3 7a00 	vstr	s15, [r3]
	    *altitude = 44330.0f * (1.0f - powf((float) (fixed_pressure / 25600.0f) / 1013.25 , 1.0f / 5.255f));
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb4:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001bf8 <bmp280_read_float+0xbc>
 8001bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001bfc <bmp280_read_float+0xc0>
 8001bc0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bc4:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001c00 <bmp280_read_float+0xc4>
 8001bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bcc:	f008 fa44 	bl	800a058 <powf>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bdc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001c04 <bmp280_read_float+0xc8>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	edc3 7a00 	vstr	s15, [r3]

	}

	return true;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	42c80000 	.word	0x42c80000
 8001bf8:	46c80000 	.word	0x46c80000
 8001bfc:	447d5000 	.word	0x447d5000
 8001c00:	3e42dcae 	.word	0x3e42dcae
 8001c04:	472d2a00 	.word	0x472d2a00

08001c08 <funcao_printa_dados_do_mpu6050_na_usart>:
int16_t Gyro_X_RAW = 0;
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;


void funcao_printa_dados_do_mpu6050_na_usart(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08e      	sub	sp, #56	@ 0x38
 8001c0c:	af00      	add	r7, sp, #0

	  char buf[50];

	  // read the Accelerometer and Gyro values
	  MPU6050_Read_Accel(&hi2c1, &mpuData);
 8001c0e:	4906      	ldr	r1, [pc, #24]	@ (8001c28 <funcao_printa_dados_do_mpu6050_na_usart+0x20>)
 8001c10:	4806      	ldr	r0, [pc, #24]	@ (8001c2c <funcao_printa_dados_do_mpu6050_na_usart+0x24>)
 8001c12:	f000 fdfb 	bl	800280c <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&hi2c1, &mpuData);
 8001c16:	4904      	ldr	r1, [pc, #16]	@ (8001c28 <funcao_printa_dados_do_mpu6050_na_usart+0x20>)
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <funcao_printa_dados_do_mpu6050_na_usart+0x24>)
 8001c1a:	f000 fe4d 	bl	80028b8 <MPU6050_Read_Gyro>

	  // Formate e envie os valores do giro pela UART (na versão 6)
}
 8001c1e:	bf00      	nop
 8001c20:	3738      	adds	r7, #56	@ 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200005b0 	.word	0x200005b0
 8001c2c:	2000023c 	.word	0x2000023c

08001c30 <funcao_printa_os_dados_do_bmp280>:

void funcao_printa_os_dados_do_bmp280(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af02      	add	r7, sp, #8
	while (!bmp280_read_float(&bmp280, &temperatureBMP280, &pressureBMP280, &humidityBMP280 , &altitudeBMP280)) {
 8001c36:	e007      	b.n	8001c48 <funcao_printa_os_dados_do_bmp280+0x18>
	size = sprintf((char *)Data, "Temperature/pressure reading failed\n");
 8001c38:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <funcao_printa_os_dados_do_bmp280+0x3c>)
 8001c3a:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <funcao_printa_os_dados_do_bmp280+0x40>)
 8001c3c:	f006 f8de 	bl	8007dfc <siprintf>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <funcao_printa_os_dados_do_bmp280+0x44>)
 8001c46:	801a      	strh	r2, [r3, #0]
	while (!bmp280_read_float(&bmp280, &temperatureBMP280, &pressureBMP280, &humidityBMP280 , &altitudeBMP280)) {
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <funcao_printa_os_dados_do_bmp280+0x48>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <funcao_printa_os_dados_do_bmp280+0x4c>)
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <funcao_printa_os_dados_do_bmp280+0x50>)
 8001c50:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <funcao_printa_os_dados_do_bmp280+0x54>)
 8001c52:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <funcao_printa_os_dados_do_bmp280+0x58>)
 8001c54:	f7ff ff72 	bl	8001b3c <bmp280_read_float>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e9      	bne.n	8001c38 <funcao_printa_os_dados_do_bmp280+0x8>
	}

//	sprintf((char *)Data,"Pressure: %0.1f\n",pressureBMP280); (na versão 6)
//	HAL_UART_Transmit(&huart2, Data, strlen(Data), 10000);

}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	0800a808 	.word	0x0800a808
 8001c70:	20000554 	.word	0x20000554
 8001c74:	20000550 	.word	0x20000550
 8001c78:	20000540 	.word	0x20000540
 8001c7c:	2000054c 	.word	0x2000054c
 8001c80:	20000544 	.word	0x20000544
 8001c84:	20000548 	.word	0x20000548
 8001c88:	20000368 	.word	0x20000368

08001c8c <funcao_controla_servo_motor>:

void funcao_controla_servo_motor(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8001c96:	4838      	ldr	r0, [pc, #224]	@ (8001d78 <funcao_controla_servo_motor+0xec>)
 8001c98:	f001 fc3c 	bl	8003514 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	4835      	ldr	r0, [pc, #212]	@ (8001d78 <funcao_controla_servo_motor+0xec>)
 8001ca2:	f001 fd3c 	bl	800371e <HAL_ADC_PollForConversion>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <funcao_controla_servo_motor+0x28>
	    // Obtém o valor convertido (resolução de 10 bits: 0 - 1023)
		adc_value = HAL_ADC_GetValue(&hadc1);
 8001cac:	4832      	ldr	r0, [pc, #200]	@ (8001d78 <funcao_controla_servo_motor+0xec>)
 8001cae:	f001 fdc1 	bl	8003834 <HAL_ADC_GetValue>
 8001cb2:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 8001cb4:	4830      	ldr	r0, [pc, #192]	@ (8001d78 <funcao_controla_servo_motor+0xec>)
 8001cb6:	f001 fcff 	bl	80036b8 <HAL_ADC_Stop>

    // Atualização da fila circular para média móvel
    if (num_elements_in_queue < queue_size) {
 8001cba:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <funcao_controla_servo_motor+0xf0>)
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <funcao_controla_servo_motor+0xf4>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d213      	bcs.n	8001cee <funcao_controla_servo_motor+0x62>
        // Adiciona o valor à soma e incrementa o número de elementos
        sum_adc_values += adc_value;
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a2d      	ldr	r2, [pc, #180]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001cd0:	6013      	str	r3, [r2, #0]
        adc_buffer[queue_index] = adc_value;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <funcao_controla_servo_motor+0xfc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d8c <funcao_controla_servo_motor+0x100>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        num_elements_in_queue++;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <funcao_controla_servo_motor+0xf0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <funcao_controla_servo_motor+0xf0>)
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e017      	b.n	8001d1e <funcao_controla_servo_motor+0x92>
    } else {
        // Remove o valor mais antigo da soma, sobrescreve o valor e atualiza a soma
        sum_adc_values -= adc_buffer[queue_index];
 8001cee:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <funcao_controla_servo_motor+0xfc>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <funcao_controla_servo_motor+0x100>)
 8001cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a20      	ldr	r2, [pc, #128]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001d02:	6013      	str	r3, [r2, #0]
        adc_buffer[queue_index] = adc_value;
 8001d04:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <funcao_controla_servo_motor+0xfc>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4a20      	ldr	r2, [pc, #128]	@ (8001d8c <funcao_controla_servo_motor+0x100>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        sum_adc_values += adc_value;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001d1c:	6013      	str	r3, [r2, #0]
    }

    // Atualiza o índice circular
    queue_index = (queue_index + 1) % queue_size;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <funcao_controla_servo_motor+0xfc>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <funcao_controla_servo_motor+0xf4>)
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <funcao_controla_servo_motor+0xfc>)
 8001d36:	701a      	strb	r2, [r3, #0]

    // Calcula a média móvel
    uint32_t adc_average = sum_adc_values / num_elements_in_queue;
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <funcao_controla_servo_motor+0xf8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d7c <funcao_controla_servo_motor+0xf0>)
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d44:	603b      	str	r3, [r7, #0]

//    if (contador_conta_tempo_para_coletar_dados_dos_sensores > 40) (na versão 6)

	if (adc_average >= 40 && adc_average <= 231) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b27      	cmp	r3, #39	@ 0x27
 8001d4a:	d90a      	bls.n	8001d62 <funcao_controla_servo_motor+0xd6>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2be7      	cmp	r3, #231	@ 0xe7
 8001d50:	d807      	bhi.n	8001d62 <funcao_controla_servo_motor+0xd6>
	  TIM1->CCR1 = adc_average;
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <funcao_controla_servo_motor+0x104>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6353      	str	r3, [r2, #52]	@ 0x34

	  // Ajusta o duty cycle (por exemplo, 50%)
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <funcao_controla_servo_motor+0x108>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d60:	e005      	b.n	8001d6e <funcao_controla_servo_motor+0xe2>
	}
	else {
	  // Ajusta o duty cycle (por exemplo, 50%)
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 10000);
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <funcao_controla_servo_motor+0x108>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200001f4 	.word	0x200001f4
 8001d7c:	2000053c 	.word	0x2000053c
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000538 	.word	0x20000538
 8001d88:	20000534 	.word	0x20000534
 8001d8c:	200003a4 	.word	0x200003a4
 8001d90:	40010000 	.word	0x40010000
 8001d94:	200002d8 	.word	0x200002d8

08001d98 <funcao_enviador_todos_os_dados_uteis_para_a_usart2>:

void funcao_enviador_todos_os_dados_uteis_para_a_usart2(void) {
 8001d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d9c:	b0e6      	sub	sp, #408	@ 0x198
 8001d9e:	af10      	add	r7, sp, #64	@ 0x40

	char Data[300]; // Ajuste o tamanho conforme necessário

	// Cria uma única string com todas as informações
	sprintf((char *)Data,
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xec>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbef 	bl	8000588 <__aeabi_f2d>
 8001daa:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001dae:	4b36      	ldr	r3, [pc, #216]	@ (8001e88 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbe8 	bl	8000588 <__aeabi_f2d>
 8001db8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbe1 	bl	8000588 <__aeabi_f2d>
 8001dc6:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        "%0.1f,%0.1f,%0.1f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",
	        pressureBMP280,
	        altitudeBMP280,
	        temperatureBMP280,
			mpuData.Gx, mpuData.Gy, mpuData.Gz,
 8001dca:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf8>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
	sprintf((char *)Data,
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fbda 	bl	8000588 <__aeabi_f2d>
 8001dd4:	e9c7 0102 	strd	r0, r1, [r7, #8]
			mpuData.Gx, mpuData.Gy, mpuData.Gz,
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf8>)
 8001dda:	691b      	ldr	r3, [r3, #16]
	sprintf((char *)Data,
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbd3 	bl	8000588 <__aeabi_f2d>
 8001de2:	e9c7 0100 	strd	r0, r1, [r7]
			mpuData.Gx, mpuData.Gy, mpuData.Gz,
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf8>)
 8001de8:	695b      	ldr	r3, [r3, #20]
	sprintf((char *)Data,
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbcc 	bl	8000588 <__aeabi_f2d>
 8001df0:	4682      	mov	sl, r0
 8001df2:	468b      	mov	fp, r1
			mpuData.Ax, mpuData.Ay, mpuData.Az);
 8001df4:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)Data,
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbc5 	bl	8000588 <__aeabi_f2d>
 8001dfe:	4680      	mov	r8, r0
 8001e00:	4689      	mov	r9, r1
			mpuData.Ax, mpuData.Ay, mpuData.Az);
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)Data,
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbbe 	bl	8000588 <__aeabi_f2d>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
			mpuData.Ax, mpuData.Ay, mpuData.Az);
 8001e10:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xf8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)Data,
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbb7 	bl	8000588 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001e22:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001e26:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001e2a:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001e2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001e32:	ed97 7b00 	vldr	d7, [r7]
 8001e36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e3a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e42:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001e4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001e4e:	ed8d 7b00 	vstr	d7, [sp]
 8001e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e56:	490f      	ldr	r1, [pc, #60]	@ (8001e94 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0xfc>)
 8001e58:	f005 ffd0 	bl	8007dfc <siprintf>

	// Transmite a string em uma única chamada
	HAL_UART_Transmit(&huart2, (uint8_t *)Data, strlen(Data), 10000);
 8001e5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fa25 	bl	80002b0 <strlen>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001e6e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e72:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <funcao_enviador_todos_os_dados_uteis_para_a_usart2+0x100>)
 8001e74:	f004 feec 	bl	8006c50 <HAL_UART_Transmit>
}
 8001e78:	bf00      	nop
 8001e7a:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e84:	20000544 	.word	0x20000544
 8001e88:	20000540 	.word	0x20000540
 8001e8c:	20000548 	.word	0x20000548
 8001e90:	200005b0 	.word	0x200005b0
 8001e94:	0800a830 	.word	0x0800a830
 8001e98:	20000320 	.word	0x20000320

08001e9c <funcao_exibir_dados_de_temperatura>:

//--------------------------------------------------
// Funções de controle do display Oled

void funcao_exibir_dados_de_temperatura(void) {
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b0b5      	sub	sp, #212	@ 0xd4
 8001ea0:	af02      	add	r7, sp, #8

	char message[100] = "Temperatura:";
 8001ea2:	4a22      	ldr	r2, [pc, #136]	@ (8001f2c <funcao_exibir_dados_de_temperatura+0x90>)
 8001ea4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	6820      	ldr	r0, [r4, #0]
 8001eac:	6861      	ldr	r1, [r4, #4]
 8001eae:	68a2      	ldr	r2, [r4, #8]
 8001eb0:	c307      	stmia	r3!, {r0, r1, r2}
 8001eb2:	7b22      	ldrb	r2, [r4, #12]
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 8001eba:	2257      	movs	r2, #87	@ 0x57
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f006 f819 	bl	8007ef6 <memset>
	char message2[100] = "";
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2260      	movs	r2, #96	@ 0x60
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 f811 	bl	8007ef6 <memset>

	sprintf(message2, "%.1f C", temperatureBMP280);
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <funcao_exibir_dados_de_temperatura+0x94>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb55 	bl	8000588 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	4913      	ldr	r1, [pc, #76]	@ (8001f34 <funcao_exibir_dados_de_temperatura+0x98>)
 8001ee6:	f005 ff89 	bl	8007dfc <siprintf>

	ssd1306_Fill(SSD1306_COLOR_BLACK); // Limpe o display
 8001eea:	2000      	movs	r0, #0
 8001eec:	f001 f8a4 	bl	8003038 <ssd1306_Fill>

	ssd1306_SetCursor(25, 20); // Defina a posição inicial
 8001ef0:	2114      	movs	r1, #20
 8001ef2:	2019      	movs	r0, #25
 8001ef4:	f001 f9ea 	bl	80032cc <ssd1306_SetCursor>
	ssd1306_WriteString(message, Font_7x10, SSD1306_COLOR_WHITE); // Escreva a mensagem
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <funcao_exibir_dados_de_temperatura+0x9c>)
 8001efa:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001efe:	2201      	movs	r2, #1
 8001f00:	9200      	str	r2, [sp, #0]
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	f001 f9bc 	bl	8003280 <ssd1306_WriteString>

	ssd1306_SetCursor(30, 40); // Defina a posição inicial
 8001f08:	2128      	movs	r1, #40	@ 0x28
 8001f0a:	201e      	movs	r0, #30
 8001f0c:	f001 f9de 	bl	80032cc <ssd1306_SetCursor>
	ssd1306_WriteString(message2, Font_7x10, SSD1306_COLOR_WHITE); // Escreva a mensagem
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <funcao_exibir_dados_de_temperatura+0x9c>)
 8001f12:	4638      	mov	r0, r7
 8001f14:	2201      	movs	r2, #1
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1a:	f001 f9b1 	bl	8003280 <ssd1306_WriteString>

	ssd1306_UpdateScreen(); // Atualize o display
 8001f1e:	f001 f8a3 	bl	8003068 <ssd1306_UpdateScreen>
}
 8001f22:	bf00      	nop
 8001f24:	37cc      	adds	r7, #204	@ 0xcc
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0800a870 	.word	0x0800a870
 8001f30:	20000548 	.word	0x20000548
 8001f34:	0800a868 	.word	0x0800a868
 8001f38:	0800b084 	.word	0x0800b084

08001f3c <funcao_exibir_dados_de_pressao>:

void funcao_exibir_dados_de_pressao(void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0b4      	sub	sp, #208	@ 0xd0
 8001f40:	af02      	add	r7, sp, #8

	char message[100] = "Pressao:";
 8001f42:	4a21      	ldr	r2, [pc, #132]	@ (8001fc8 <funcao_exibir_dados_de_pressao+0x8c>)
 8001f44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f48:	6810      	ldr	r0, [r2, #0]
 8001f4a:	6851      	ldr	r1, [r2, #4]
 8001f4c:	c303      	stmia	r3!, {r0, r1}
 8001f4e:	7a12      	ldrb	r2, [r2, #8]
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 8001f56:	225b      	movs	r2, #91	@ 0x5b
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 ffcb 	bl	8007ef6 <memset>
	char message2[100] = "";
 8001f60:	2300      	movs	r3, #0
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2260      	movs	r2, #96	@ 0x60
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 ffc3 	bl	8007ef6 <memset>

	sprintf(message2, "%.1f Pa", pressureBMP280);
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <funcao_exibir_dados_de_pressao+0x90>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fb07 	bl	8000588 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4638      	mov	r0, r7
 8001f80:	4913      	ldr	r1, [pc, #76]	@ (8001fd0 <funcao_exibir_dados_de_pressao+0x94>)
 8001f82:	f005 ff3b 	bl	8007dfc <siprintf>

	ssd1306_Fill(SSD1306_COLOR_BLACK); // Limpe o display
 8001f86:	2000      	movs	r0, #0
 8001f88:	f001 f856 	bl	8003038 <ssd1306_Fill>

	ssd1306_SetCursor(25, 20); // Defina a posição inicial
 8001f8c:	2114      	movs	r1, #20
 8001f8e:	2019      	movs	r0, #25
 8001f90:	f001 f99c 	bl	80032cc <ssd1306_SetCursor>
	ssd1306_WriteString(message, Font_7x10, SSD1306_COLOR_WHITE); // Escreva a mensagem
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <funcao_exibir_dados_de_pressao+0x98>)
 8001f96:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa0:	f001 f96e 	bl	8003280 <ssd1306_WriteString>

	ssd1306_SetCursor(30, 40); // Defina a posição inicial
 8001fa4:	2128      	movs	r1, #40	@ 0x28
 8001fa6:	201e      	movs	r0, #30
 8001fa8:	f001 f990 	bl	80032cc <ssd1306_SetCursor>
	ssd1306_WriteString(message2, Font_7x10, SSD1306_COLOR_WHITE); // Escreva a mensagem
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <funcao_exibir_dados_de_pressao+0x98>)
 8001fae:	4638      	mov	r0, r7
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	9200      	str	r2, [sp, #0]
 8001fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb6:	f001 f963 	bl	8003280 <ssd1306_WriteString>

	ssd1306_UpdateScreen(); // Atualize o display
 8001fba:	f001 f855 	bl	8003068 <ssd1306_UpdateScreen>
}
 8001fbe:	bf00      	nop
 8001fc0:	37c8      	adds	r7, #200	@ 0xc8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800a888 	.word	0x0800a888
 8001fcc:	20000544 	.word	0x20000544
 8001fd0:	0800a880 	.word	0x0800a880
 8001fd4:	0800b084 	.word	0x0800b084

08001fd8 <funcao_exibir_dados_de_altitude>:

void funcao_exibir_dados_de_altitude(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0b4      	sub	sp, #208	@ 0xd0
 8001fdc:	af02      	add	r7, sp, #8

	char message[100] = "Altitude:";
 8001fde:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <funcao_exibir_dados_de_altitude+0x8c>)
 8001fe0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fe4:	6810      	ldr	r0, [r2, #0]
 8001fe6:	6851      	ldr	r1, [r2, #4]
 8001fe8:	c303      	stmia	r3!, {r0, r1}
 8001fea:	8912      	ldrh	r2, [r2, #8]
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8001ff2:	225a      	movs	r2, #90	@ 0x5a
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f005 ff7d 	bl	8007ef6 <memset>
	char message2[100] = "";
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2260      	movs	r2, #96	@ 0x60
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f005 ff75 	bl	8007ef6 <memset>

	sprintf(message2, "%.1f M", altitudeBMP280);
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <funcao_exibir_dados_de_altitude+0x90>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fab9 	bl	8000588 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4638      	mov	r0, r7
 800201c:	4913      	ldr	r1, [pc, #76]	@ (800206c <funcao_exibir_dados_de_altitude+0x94>)
 800201e:	f005 feed 	bl	8007dfc <siprintf>

	ssd1306_Fill(SSD1306_COLOR_BLACK); // Limpe o display
 8002022:	2000      	movs	r0, #0
 8002024:	f001 f808 	bl	8003038 <ssd1306_Fill>

	ssd1306_SetCursor(25, 20); // Defina a posição inicial
 8002028:	2114      	movs	r1, #20
 800202a:	2019      	movs	r0, #25
 800202c:	f001 f94e 	bl	80032cc <ssd1306_SetCursor>
	ssd1306_WriteString(message, Font_7x10, SSD1306_COLOR_WHITE); // Escreva a mensagem
 8002030:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <funcao_exibir_dados_de_altitude+0x98>)
 8002032:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002036:	2201      	movs	r2, #1
 8002038:	9200      	str	r2, [sp, #0]
 800203a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203c:	f001 f920 	bl	8003280 <ssd1306_WriteString>

	ssd1306_SetCursor(30, 40); // Defina a posição inicial
 8002040:	2128      	movs	r1, #40	@ 0x28
 8002042:	201e      	movs	r0, #30
 8002044:	f001 f942 	bl	80032cc <ssd1306_SetCursor>
	ssd1306_WriteString(message2, Font_7x10, SSD1306_COLOR_WHITE); // Escreva a mensagem
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <funcao_exibir_dados_de_altitude+0x98>)
 800204a:	4638      	mov	r0, r7
 800204c:	2201      	movs	r2, #1
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002052:	f001 f915 	bl	8003280 <ssd1306_WriteString>

	ssd1306_UpdateScreen(); // Atualize o display
 8002056:	f001 f807 	bl	8003068 <ssd1306_UpdateScreen>
}
 800205a:	bf00      	nop
 800205c:	37c8      	adds	r7, #200	@ 0xc8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800a89c 	.word	0x0800a89c
 8002068:	20000540 	.word	0x20000540
 800206c:	0800a894 	.word	0x0800a894
 8002070:	0800b084 	.word	0x0800b084

08002074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207a:	f001 f971 	bl	8003360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800207e:	f000 f909 	bl	8002294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002082:	f000 fb27 	bl	80026d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002086:	f000 f9e5 	bl	8002454 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800208a:	f000 faf9 	bl	8002680 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800208e:	f000 f961 	bl	8002354 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002092:	f000 fa7f 	bl	8002594 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002096:	f000 f9af 	bl	80023f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  MPU6050_Init();
  // Inicializa o MPU6050
  MPU6050_Init(&hi2c1);
 800209a:	486d      	ldr	r0, [pc, #436]	@ (8002250 <main+0x1dc>)
 800209c:	f000 fb5c 	bl	8002758 <MPU6050_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020a0:	2100      	movs	r1, #0
 80020a2:	486c      	ldr	r0, [pc, #432]	@ (8002254 <main+0x1e0>)
 80020a4:	f003 ff48 	bl	8005f38 <HAL_TIM_PWM_Start>

  // Inicia o PWM no canal 3 do TIM3 (PB0)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80020a8:	2108      	movs	r1, #8
 80020aa:	486b      	ldr	r0, [pc, #428]	@ (8002258 <main+0x1e4>)
 80020ac:	f003 ff44 	bl	8005f38 <HAL_TIM_PWM_Start>

  //-------------------------------------------------------------------
  //Código do display Oled

  /* Inicialize o display SSD1306 */
  ssd1306_Init();
 80020b0:	f000 ff58 	bl	8002f64 <ssd1306_Init>

  //-------------------------------------------
  // BMP280

	// SENSOR BMP280
	bmp280_init_default_params(&bmp280.params);
 80020b4:	4869      	ldr	r0, [pc, #420]	@ (800225c <main+0x1e8>)
 80020b6:	f7fe ff5f 	bl	8000f78 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80020ba:	4b69      	ldr	r3, [pc, #420]	@ (8002260 <main+0x1ec>)
 80020bc:	2276      	movs	r2, #118	@ 0x76
 80020be:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 80020c0:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <main+0x1ec>)
 80020c2:	4a63      	ldr	r2, [pc, #396]	@ (8002250 <main+0x1dc>)
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28

	sprintf((char *)Data,"INICIANDO - BMP280\n");
 80020c6:	4967      	ldr	r1, [pc, #412]	@ (8002264 <main+0x1f0>)
 80020c8:	4867      	ldr	r0, [pc, #412]	@ (8002268 <main+0x1f4>)
 80020ca:	f005 fe97 	bl	8007dfc <siprintf>
	HAL_UART_Transmit(&huart2, Data, strlen(Data), 10000);
 80020ce:	4866      	ldr	r0, [pc, #408]	@ (8002268 <main+0x1f4>)
 80020d0:	f7fe f8ee 	bl	80002b0 <strlen>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80020dc:	4962      	ldr	r1, [pc, #392]	@ (8002268 <main+0x1f4>)
 80020de:	4863      	ldr	r0, [pc, #396]	@ (800226c <main+0x1f8>)
 80020e0:	f004 fdb6 	bl	8006c50 <HAL_UART_Transmit>

	while (!(bmp280_init(&bmp280, &bmp280.params)))
 80020e4:	e016      	b.n	8002114 <main+0xa0>
		{
			size = sprintf((char *)Data, "BMP280 initialization failed\n");
 80020e6:	4962      	ldr	r1, [pc, #392]	@ (8002270 <main+0x1fc>)
 80020e8:	485f      	ldr	r0, [pc, #380]	@ (8002268 <main+0x1f4>)
 80020ea:	f005 fe87 	bl	8007dfc <siprintf>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b60      	ldr	r3, [pc, #384]	@ (8002274 <main+0x200>)
 80020f4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, Data, strlen(Data), 10000);
 80020f6:	485c      	ldr	r0, [pc, #368]	@ (8002268 <main+0x1f4>)
 80020f8:	f7fe f8da 	bl	80002b0 <strlen>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b29a      	uxth	r2, r3
 8002100:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002104:	4958      	ldr	r1, [pc, #352]	@ (8002268 <main+0x1f4>)
 8002106:	4859      	ldr	r0, [pc, #356]	@ (800226c <main+0x1f8>)
 8002108:	f004 fda2 	bl	8006c50 <HAL_UART_Transmit>
			HAL_Delay(2000);
 800210c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002110:	f001 f998 	bl	8003444 <HAL_Delay>
	while (!(bmp280_init(&bmp280, &bmp280.params)))
 8002114:	4951      	ldr	r1, [pc, #324]	@ (800225c <main+0x1e8>)
 8002116:	4852      	ldr	r0, [pc, #328]	@ (8002260 <main+0x1ec>)
 8002118:	f7ff f8a8 	bl	800126c <bmp280_init>
 800211c:	4603      	mov	r3, r0
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1de      	bne.n	80020e6 <main+0x72>
		}

	bool bme280p = bmp280.id == BMP280_CHIP_ID;
 8002128:	4b4d      	ldr	r3, [pc, #308]	@ (8002260 <main+0x1ec>)
 800212a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800212e:	2b58      	cmp	r3, #88	@ 0x58
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	71fb      	strb	r3, [r7, #7]
	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <main+0xce>
 800213e:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <main+0x204>)
 8002140:	e000      	b.n	8002144 <main+0xd0>
 8002142:	4b4e      	ldr	r3, [pc, #312]	@ (800227c <main+0x208>)
 8002144:	461a      	mov	r2, r3
 8002146:	494e      	ldr	r1, [pc, #312]	@ (8002280 <main+0x20c>)
 8002148:	4847      	ldr	r0, [pc, #284]	@ (8002268 <main+0x1f4>)
 800214a:	f005 fe57 	bl	8007dfc <siprintf>
 800214e:	4603      	mov	r3, r0
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b48      	ldr	r3, [pc, #288]	@ (8002274 <main+0x200>)
 8002154:	801a      	strh	r2, [r3, #0]
	//-------------------------------------------

  while (1) {

	  // Lê os dados do MPU6050
	  MPU6050_Read_Accel(&hi2c1, &mpuData);
 8002156:	494b      	ldr	r1, [pc, #300]	@ (8002284 <main+0x210>)
 8002158:	483d      	ldr	r0, [pc, #244]	@ (8002250 <main+0x1dc>)
 800215a:	f000 fb57 	bl	800280c <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&hi2c1, &mpuData);
 800215e:	4949      	ldr	r1, [pc, #292]	@ (8002284 <main+0x210>)
 8002160:	483b      	ldr	r0, [pc, #236]	@ (8002250 <main+0x1dc>)
 8002162:	f000 fba9 	bl	80028b8 <MPU6050_Read_Gyro>
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 1000);
//
//	  HAL_Delay(500);


	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8002166:	2102      	movs	r1, #2
 8002168:	4847      	ldr	r0, [pc, #284]	@ (8002288 <main+0x214>)
 800216a:	f002 f819 	bl	80041a0 <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d140      	bne.n	80021f6 <main+0x182>
		//Efeito do buzzer ao apertar o botão para trocar de interface do display oled
		//----------------------------------------------------------------------
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8002174:	e015      	b.n	80021a2 <main+0x12e>
		    for (int i = 64995; i <= 65000; i++) {
 8002176:	f64f 53e3 	movw	r3, #64995	@ 0xfde3
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e009      	b.n	8002192 <main+0x11e>
		        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, i);
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <main+0x1e4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c
		        HAL_Delay(1);
 8002186:	2001      	movs	r0, #1
 8002188:	f001 f95c 	bl	8003444 <HAL_Delay>
		    for (int i = 64995; i <= 65000; i++) {
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8002198:	4293      	cmp	r3, r2
 800219a:	ddf0      	ble.n	800217e <main+0x10a>
		    }
		    HAL_Delay(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f001 f951 	bl	8003444 <HAL_Delay>
		while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80021a2:	2102      	movs	r1, #2
 80021a4:	4838      	ldr	r0, [pc, #224]	@ (8002288 <main+0x214>)
 80021a6:	f001 fffb 	bl	80041a0 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0e2      	beq.n	8002176 <main+0x102>
		}
		for (int i = 65000; i >= 64995; i--) {
 80021b0:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	e009      	b.n	80021cc <main+0x158>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, i);
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <main+0x1e4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	63da      	str	r2, [r3, #60]	@ 0x3c
		    HAL_Delay(1);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f001 f93f 	bl	8003444 <HAL_Delay>
		for (int i = 65000; i >= 64995; i--) {
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f64f 52e2 	movw	r2, #64994	@ 0xfde2
 80021d2:	4293      	cmp	r3, r2
 80021d4:	dcf0      	bgt.n	80021b8 <main+0x144>
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <main+0x1e4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	63da      	str	r2, [r3, #60]	@ 0x3c
		//----------------------------------------------------------------------

		contador_interfaces_do_display_oled += 1;
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <main+0x218>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a29      	ldr	r2, [pc, #164]	@ (800228c <main+0x218>)
 80021e6:	6013      	str	r3, [r2, #0]

		if (contador_interfaces_do_display_oled > 2) {
 80021e8:	4b28      	ldr	r3, [pc, #160]	@ (800228c <main+0x218>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	dd02      	ble.n	80021f6 <main+0x182>
			contador_interfaces_do_display_oled = 0;
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <main+0x218>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
		}
	}


	contador_conta_tempo_para_coletar_dados_dos_sensores += 1;
 80021f6:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <main+0x21c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <main+0x21c>)
 80021fe:	6013      	str	r3, [r2, #0]

	funcao_controla_servo_motor();
 8002200:	f7ff fd44 	bl	8001c8c <funcao_controla_servo_motor>

	if (contador_conta_tempo_para_coletar_dados_dos_sensores > 20) {
 8002204:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <main+0x21c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b14      	cmp	r3, #20
 800220a:	dd1c      	ble.n	8002246 <main+0x1d2>

		if (contador_interfaces_do_display_oled == 0) {
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <main+0x218>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <main+0x1a6>
			funcao_exibir_dados_de_temperatura();
 8002214:	f7ff fe42 	bl	8001e9c <funcao_exibir_dados_de_temperatura>
 8002218:	e00c      	b.n	8002234 <main+0x1c0>
		}
		else if (contador_interfaces_do_display_oled == 1) {
 800221a:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <main+0x218>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <main+0x1b4>
			funcao_exibir_dados_de_pressao();
 8002222:	f7ff fe8b 	bl	8001f3c <funcao_exibir_dados_de_pressao>
 8002226:	e005      	b.n	8002234 <main+0x1c0>
		}
		else if (contador_interfaces_do_display_oled == 2) {
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <main+0x218>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d101      	bne.n	8002234 <main+0x1c0>
			funcao_exibir_dados_de_altitude();
 8002230:	f7ff fed2 	bl	8001fd8 <funcao_exibir_dados_de_altitude>
		}

		funcao_printa_dados_do_mpu6050_na_usart();
 8002234:	f7ff fce8 	bl	8001c08 <funcao_printa_dados_do_mpu6050_na_usart>
		funcao_printa_os_dados_do_bmp280();
 8002238:	f7ff fcfa 	bl	8001c30 <funcao_printa_os_dados_do_bmp280>
		funcao_enviador_todos_os_dados_uteis_para_a_usart2();
 800223c:	f7ff fdac 	bl	8001d98 <funcao_enviador_todos_os_dados_uteis_para_a_usart2>
		contador_conta_tempo_para_coletar_dados_dos_sensores = 0;
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <main+0x21c>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
	}
	HAL_Delay(50);
 8002246:	2032      	movs	r0, #50	@ 0x32
 8002248:	f001 f8fc 	bl	8003444 <HAL_Delay>
	  MPU6050_Read_Accel(&hi2c1, &mpuData);
 800224c:	e783      	b.n	8002156 <main+0xe2>
 800224e:	bf00      	nop
 8002250:	2000023c 	.word	0x2000023c
 8002254:	20000290 	.word	0x20000290
 8002258:	200002d8 	.word	0x200002d8
 800225c:	20000394 	.word	0x20000394
 8002260:	20000368 	.word	0x20000368
 8002264:	0800a8a8 	.word	0x0800a8a8
 8002268:	20000554 	.word	0x20000554
 800226c:	20000320 	.word	0x20000320
 8002270:	0800a8bc 	.word	0x0800a8bc
 8002274:	20000550 	.word	0x20000550
 8002278:	0800a8dc 	.word	0x0800a8dc
 800227c:	0800a8e4 	.word	0x0800a8e4
 8002280:	0800a8ec 	.word	0x0800a8ec
 8002284:	200005b0 	.word	0x200005b0
 8002288:	40020000 	.word	0x40020000
 800228c:	2000039c 	.word	0x2000039c
 8002290:	200003a0 	.word	0x200003a0

08002294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b094      	sub	sp, #80	@ 0x50
 8002298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	2234      	movs	r2, #52	@ 0x34
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 fe27 	bl	8007ef6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	4b23      	ldr	r3, [pc, #140]	@ (800234c <SystemClock_Config+0xb8>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	4a22      	ldr	r2, [pc, #136]	@ (800234c <SystemClock_Config+0xb8>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c8:	4b20      	ldr	r3, [pc, #128]	@ (800234c <SystemClock_Config+0xb8>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022d4:	2300      	movs	r3, #0
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <SystemClock_Config+0xbc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002350 <SystemClock_Config+0xbc>)
 80022e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <SystemClock_Config+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f4:	2302      	movs	r3, #2
 80022f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f8:	2301      	movs	r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fc:	2310      	movs	r3, #16
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4618      	mov	r0, r3
 800230a:	f003 facf 	bl	80058ac <HAL_RCC_OscConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002314:	f000 fa1a 	bl	800274c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002318:	230f      	movs	r3, #15
 800231a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002328:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f002 ff6f 	bl	8005218 <HAL_RCC_ClockConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002340:	f000 fa04 	bl	800274c <Error_Handler>
  }
}
 8002344:	bf00      	nop
 8002346:	3750      	adds	r7, #80	@ 0x50
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000

08002354 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800235a:	463b      	mov	r3, r7
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <MX_ADC1_Init+0x98>)
 8002368:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <MX_ADC1_Init+0x9c>)
 800236a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800236c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <MX_ADC1_Init+0x98>)
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <MX_ADC1_Init+0x98>)
 8002374:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002378:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800237a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <MX_ADC1_Init+0x98>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <MX_ADC1_Init+0x98>)
 8002382:	2200      	movs	r2, #0
 8002384:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002386:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <MX_ADC1_Init+0x98>)
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800238e:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <MX_ADC1_Init+0x98>)
 8002390:	2200      	movs	r2, #0
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002394:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <MX_ADC1_Init+0x98>)
 8002396:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <MX_ADC1_Init+0xa0>)
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <MX_ADC1_Init+0x98>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <MX_ADC1_Init+0x98>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <MX_ADC1_Init+0x98>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <MX_ADC1_Init+0x98>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023b4:	480d      	ldr	r0, [pc, #52]	@ (80023ec <MX_ADC1_Init+0x98>)
 80023b6:	f001 f869 	bl	800348c <HAL_ADC_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80023c0:	f000 f9c4 	bl	800274c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d0:	463b      	mov	r3, r7
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	@ (80023ec <MX_ADC1_Init+0x98>)
 80023d6:	f001 fa3b 	bl	8003850 <HAL_ADC_ConfigChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023e0:	f000 f9b4 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200001f4 	.word	0x200001f4
 80023f0:	40012000 	.word	0x40012000
 80023f4:	0f000001 	.word	0x0f000001

080023f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <MX_I2C1_Init+0x50>)
 80023fe:	4a13      	ldr	r2, [pc, #76]	@ (800244c <MX_I2C1_Init+0x54>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_I2C1_Init+0x50>)
 8002404:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <MX_I2C1_Init+0x58>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <MX_I2C1_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <MX_I2C1_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <MX_I2C1_Init+0x50>)
 8002416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800241a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800241c:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <MX_I2C1_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <MX_I2C1_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002428:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <MX_I2C1_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MX_I2C1_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002434:	4804      	ldr	r0, [pc, #16]	@ (8002448 <MX_I2C1_Init+0x50>)
 8002436:	f001 fecb 	bl	80041d0 <HAL_I2C_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002440:	f000 f984 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000023c 	.word	0x2000023c
 800244c:	40005400 	.word	0x40005400
 8002450:	000186a0 	.word	0x000186a0

08002454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b096      	sub	sp, #88	@ 0x58
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2220      	movs	r2, #32
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f005 fd32 	bl	8007ef6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002492:	4b3e      	ldr	r3, [pc, #248]	@ (800258c <MX_TIM1_Init+0x138>)
 8002494:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <MX_TIM1_Init+0x13c>)
 8002496:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8002498:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <MX_TIM1_Init+0x138>)
 800249a:	229f      	movs	r2, #159	@ 0x9f
 800249c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249e:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <MX_TIM1_Init+0x138>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80024a4:	4b39      	ldr	r3, [pc, #228]	@ (800258c <MX_TIM1_Init+0x138>)
 80024a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80024aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <MX_TIM1_Init+0x138>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b2:	4b36      	ldr	r3, [pc, #216]	@ (800258c <MX_TIM1_Init+0x138>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b34      	ldr	r3, [pc, #208]	@ (800258c <MX_TIM1_Init+0x138>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024be:	4833      	ldr	r0, [pc, #204]	@ (800258c <MX_TIM1_Init+0x138>)
 80024c0:	f003 fc92 	bl	8005de8 <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80024ca:	f000 f93f 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024d8:	4619      	mov	r1, r3
 80024da:	482c      	ldr	r0, [pc, #176]	@ (800258c <MX_TIM1_Init+0x138>)
 80024dc:	f003 feb6 	bl	800624c <HAL_TIM_ConfigClockSource>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024e6:	f000 f931 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024ea:	4828      	ldr	r0, [pc, #160]	@ (800258c <MX_TIM1_Init+0x138>)
 80024ec:	f003 fccb 	bl	8005e86 <HAL_TIM_PWM_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024f6:	f000 f929 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002502:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002506:	4619      	mov	r1, r3
 8002508:	4820      	ldr	r0, [pc, #128]	@ (800258c <MX_TIM1_Init+0x138>)
 800250a:	f004 fa83 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002514:	f000 f91a 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002518:	2360      	movs	r3, #96	@ 0x60
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	4813      	ldr	r0, [pc, #76]	@ (800258c <MX_TIM1_Init+0x138>)
 800253e:	f003 fdc3 	bl	80060c8 <HAL_TIM_PWM_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002548:	f000 f900 	bl	800274c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002564:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4807      	ldr	r0, [pc, #28]	@ (800258c <MX_TIM1_Init+0x138>)
 8002570:	f004 facc 	bl	8006b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800257a:	f000 f8e7 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800257e:	4803      	ldr	r0, [pc, #12]	@ (800258c <MX_TIM1_Init+0x138>)
 8002580:	f000 fadc 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8002584:	bf00      	nop
 8002586:	3758      	adds	r7, #88	@ 0x58
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000290 	.word	0x20000290
 8002590:	40010000 	.word	0x40010000

08002594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	@ 0x38
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025c6:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <MX_TIM3_Init+0xe8>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ea:	4823      	ldr	r0, [pc, #140]	@ (8002678 <MX_TIM3_Init+0xe4>)
 80025ec:	f003 fbfc 	bl	8005de8 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025f6:	f000 f8a9 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002604:	4619      	mov	r1, r3
 8002606:	481c      	ldr	r0, [pc, #112]	@ (8002678 <MX_TIM3_Init+0xe4>)
 8002608:	f003 fe20 	bl	800624c <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002612:	f000 f89b 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002616:	4818      	ldr	r0, [pc, #96]	@ (8002678 <MX_TIM3_Init+0xe4>)
 8002618:	f003 fc35 	bl	8005e86 <HAL_TIM_PWM_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002622:	f000 f893 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800262e:	f107 0320 	add.w	r3, r7, #32
 8002632:	4619      	mov	r1, r3
 8002634:	4810      	ldr	r0, [pc, #64]	@ (8002678 <MX_TIM3_Init+0xe4>)
 8002636:	f004 f9ed 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002640:	f000 f884 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002644:	2360      	movs	r3, #96	@ 0x60
 8002646:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2208      	movs	r2, #8
 8002658:	4619      	mov	r1, r3
 800265a:	4807      	ldr	r0, [pc, #28]	@ (8002678 <MX_TIM3_Init+0xe4>)
 800265c:	f003 fd34 	bl	80060c8 <HAL_TIM_PWM_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002666:	f000 f871 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800266a:	4803      	ldr	r0, [pc, #12]	@ (8002678 <MX_TIM3_Init+0xe4>)
 800266c:	f000 fa66 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8002670:	bf00      	nop
 8002672:	3738      	adds	r7, #56	@ 0x38
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200002d8 	.word	0x200002d8
 800267c:	40000400 	.word	0x40000400

08002680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <MX_USART2_UART_Init+0x50>)
 8002688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	@ (80026cc <MX_USART2_UART_Init+0x4c>)
 80026b8:	f004 fa7a 	bl	8006bb0 <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026c2:	f000 f843 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000320 	.word	0x20000320
 80026d0:	40004400 	.word	0x40004400

080026d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <MX_GPIO_Init+0x70>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <MX_GPIO_Init+0x70>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <MX_GPIO_Init+0x70>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <MX_GPIO_Init+0x70>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <MX_GPIO_Init+0x70>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <MX_GPIO_Init+0x70>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002722:	2302      	movs	r3, #2
 8002724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272a:	2301      	movs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4619      	mov	r1, r3
 8002734:	4804      	ldr	r0, [pc, #16]	@ (8002748 <MX_GPIO_Init+0x74>)
 8002736:	f001 fb9f 	bl	8003e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800273a:	bf00      	nop
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <Error_Handler+0x8>

08002758 <MPU6050_Init>:
//Implementação das funções (da biblioteca do mpu6050)

#include "mpu6050.h"

// Função para inicializar o MPU6050
void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af04      	add	r7, sp, #16
 800275e:	6078      	str	r0, [r7, #4]
    uint8_t check, Data;

    // Verifica(check) o ID do dispositivo ID WHO_AM_I
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8002760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	2301      	movs	r3, #1
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	f107 030f 	add.w	r3, r7, #15
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2301      	movs	r3, #1
 8002772:	2275      	movs	r2, #117	@ 0x75
 8002774:	21d0      	movs	r1, #208	@ 0xd0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 ff68 	bl	800464c <HAL_I2C_Mem_Read>
    if (check == 0x68) { // 0x68 will be returned by the sensor if everything goes well
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b68      	cmp	r3, #104	@ 0x68
 8002780:	d13f      	bne.n	8002802 <MPU6050_Init+0xaa>
        // Configuração inicial
    	// power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0; // Wake up
 8002782:	2300      	movs	r3, #0
 8002784:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8002786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2301      	movs	r3, #1
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	f107 030e 	add.w	r3, r7, #14
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	226b      	movs	r2, #107	@ 0x6b
 800279a:	21d0      	movs	r1, #208	@ 0xd0
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f001 fe5b 	bl	8004458 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07; // Sample rate 1 kHz
 80027a2:	2307      	movs	r3, #7
 80027a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80027a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	f107 030e 	add.w	r3, r7, #14
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	2219      	movs	r2, #25
 80027ba:	21d0      	movs	r1, #208	@ 0xd0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 fe4b 	bl	8004458 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        Data = 0x00; // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 dps
 80027c2:	2300      	movs	r3, #0
 80027c4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80027c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	f107 030e 	add.w	r3, r7, #14
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	221b      	movs	r2, #27
 80027da:	21d0      	movs	r1, #208	@ 0xd0
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f001 fe3b 	bl	8004458 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        Data = 0x00; // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Accel ± 2g
 80027e2:	2300      	movs	r3, #0
 80027e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80027e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	2301      	movs	r3, #1
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	f107 030e 	add.w	r3, r7, #14
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	221c      	movs	r2, #28
 80027fa:	21d0      	movs	r1, #208	@ 0xd0
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 fe2b 	bl	8004458 <HAL_I2C_Mem_Write>
    }
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <MPU6050_Read_Accel>:

// Função para ler a aceleração
void MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, MPU6050_Data *data) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af04      	add	r7, sp, #16
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
    int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2306      	movs	r3, #6
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	223b      	movs	r2, #59	@ 0x3b
 800282a:	21d0      	movs	r1, #208	@ 0xd0
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f001 ff0d 	bl	800464c <HAL_I2C_Mem_Read>

    Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002832:	7b3b      	ldrb	r3, [r7, #12]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	b21a      	sxth	r2, r3
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	b21b      	sxth	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	82fb      	strh	r3, [r7, #22]
    Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	b21a      	sxth	r2, r3
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	b21b      	sxth	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	82bb      	strh	r3, [r7, #20]
    Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800284e:	7c3b      	ldrb	r3, [r7, #16]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b21a      	sxth	r2, r3
 8002854:	7c7b      	ldrb	r3, [r7, #17]
 8002856:	b21b      	sxth	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	827b      	strh	r3, [r7, #18]
    /*** convert the RAW values into acceleration in 'g'
    	     we have to divide according to the Full scale value set in FS_SEL
    	     I have configured FS_SEL = 0. So I am dividing by 16384.0
    	     for more details check ACCEL_CONFIG Register              ****/

    data->Ax = (float)Accel_X_RAW / 16384.0;
 800285c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002868:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80028b4 <MPU6050_Read_Accel+0xa8>
 800286c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	edc3 7a00 	vstr	s15, [r3]
    data->Ay = (float)Accel_Y_RAW / 16384.0;
 8002876:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002882:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80028b4 <MPU6050_Read_Accel+0xa8>
 8002886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	edc3 7a01 	vstr	s15, [r3, #4]
    data->Az = (float)Accel_Z_RAW / 16384.0;
 8002890:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80028b4 <MPU6050_Read_Accel+0xa8>
 80028a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	46800000 	.word	0x46800000

080028b8 <MPU6050_Read_Gyro>:

// Função para ler os valores do giroscópio
void MPU6050_Read_Gyro(I2C_HandleTypeDef *hi2c, MPU6050_Data *data) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	@ 0x28
 80028bc:	af04      	add	r7, sp, #16
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
    int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;

    // Read 6 BYTES of data starting from GYRO_XOUT_H register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80028c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	2306      	movs	r3, #6
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2301      	movs	r3, #1
 80028d4:	2243      	movs	r2, #67	@ 0x43
 80028d6:	21d0      	movs	r1, #208	@ 0xd0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f001 feb7 	bl	800464c <HAL_I2C_Mem_Read>

    Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80028de:	7b3b      	ldrb	r3, [r7, #12]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	7b7b      	ldrb	r3, [r7, #13]
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	4313      	orrs	r3, r2
 80028ea:	82fb      	strh	r3, [r7, #22]
    Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	82bb      	strh	r3, [r7, #20]
    Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80028fa:	7c3b      	ldrb	r3, [r7, #16]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21a      	sxth	r2, r3
 8002900:	7c7b      	ldrb	r3, [r7, #17]
 8002902:	b21b      	sxth	r3, r3
 8002904:	4313      	orrs	r3, r2
 8002906:	827b      	strh	r3, [r7, #18]
    /*** convert the RAW values into dps (ｰ/s)
    	     we have to divide according to the Full scale value set in FS_SEL
    	     I have configured FS_SEL = 0. So I am dividing by 131.0
    	     for more details check GYRO_CONFIG Register              ****/

    data->Gx = (float)Gyro_X_RAW / 131.0;
 8002908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002914:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002960 <MPU6050_Read_Gyro+0xa8>
 8002918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	edc3 7a03 	vstr	s15, [r3, #12]
    data->Gy = (float)Gyro_Y_RAW / 131.0;
 8002922:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002960 <MPU6050_Read_Gyro+0xa8>
 8002932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	edc3 7a04 	vstr	s15, [r3, #16]
    data->Gz = (float)Gyro_Z_RAW / 131.0;
 800293c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002948:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002960 <MPU6050_Read_Gyro+0xa8>
 800294c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	43030000 	.word	0x43030000

08002964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_MspInit+0x4c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029a2:	2007      	movs	r0, #7
 80029a4:	f001 fa34 	bl	8003e10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	@ 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a17      	ldr	r2, [pc, #92]	@ (8002a30 <HAL_ADC_MspInit+0x7c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d127      	bne.n	8002a26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <HAL_ADC_MspInit+0x80>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a15      	ldr	r2, [pc, #84]	@ (8002a34 <HAL_ADC_MspInit+0x80>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_ADC_MspInit+0x80>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_ADC_MspInit+0x80>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002a34 <HAL_ADC_MspInit+0x80>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_ADC_MspInit+0x80>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a12:	2303      	movs	r3, #3
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <HAL_ADC_MspInit+0x84>)
 8002a22:	f001 fa29 	bl	8003e78 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	@ 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40012000 	.word	0x40012000
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	@ 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <HAL_I2C_MspInit+0x84>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d12c      	bne.n	8002ab8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <HAL_I2C_MspInit+0x88>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <HAL_I2C_MspInit+0x88>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_I2C_MspInit+0x88>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a80:	2312      	movs	r3, #18
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	480c      	ldr	r0, [pc, #48]	@ (8002ac8 <HAL_I2C_MspInit+0x8c>)
 8002a98:	f001 f9ee 	bl	8003e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <HAL_I2C_MspInit+0x88>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <HAL_I2C_MspInit+0x88>)
 8002aa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <HAL_I2C_MspInit+0x88>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ab8:	bf00      	nop
 8002aba:	3728      	adds	r7, #40	@ 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40005400 	.word	0x40005400
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020400 	.word	0x40020400

08002acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	@ (8002b30 <HAL_TIM_Base_MspInit+0x64>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	4a13      	ldr	r2, [pc, #76]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002afa:	e012      	b.n	8002b22 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10d      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b16:	4b07      	ldr	r3, [pc, #28]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40000400 	.word	0x40000400

08002b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a24      	ldr	r2, [pc, #144]	@ (8002bec <HAL_TIM_MspPostInit+0xb0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d11f      	bne.n	8002b9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a22      	ldr	r2, [pc, #136]	@ (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	4817      	ldr	r0, [pc, #92]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002b98:	f001 f96e 	bl	8003e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b9c:	e022      	b.n	8002be4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a15      	ldr	r2, [pc, #84]	@ (8002bf8 <HAL_TIM_MspPostInit+0xbc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d11d      	bne.n	8002be4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4807      	ldr	r0, [pc, #28]	@ (8002bfc <HAL_TIM_MspPostInit+0xc0>)
 8002be0:	f001 f94a 	bl	8003e78 <HAL_GPIO_Init>
}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40020400 	.word	0x40020400

08002c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_UART_MspInit+0x84>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d12b      	bne.n	8002c7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <HAL_UART_MspInit+0x88>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <HAL_UART_MspInit+0x88>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <HAL_UART_MspInit+0x88>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <HAL_UART_MspInit+0x88>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a10      	ldr	r2, [pc, #64]	@ (8002c88 <HAL_UART_MspInit+0x88>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <HAL_UART_MspInit+0x88>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	@ (8002c8c <HAL_UART_MspInit+0x8c>)
 8002c76:	f001 f8ff 	bl	8003e78 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3728      	adds	r7, #40	@ 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020000 	.word	0x40020000

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <NMI_Handler+0x4>

08002c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <HardFault_Handler+0x4>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <MemManage_Handler+0x4>

08002ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <BusFault_Handler+0x4>

08002cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <UsageFault_Handler+0x4>

08002cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce6:	f000 fb8d 	bl	8003404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  return 1;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <_kill>:

int _kill(int pid, int sig)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d08:	f005 f948 	bl	8007f9c <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2216      	movs	r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
  return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_exit>:

void _exit (int status)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d26:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffe7 	bl	8002cfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <_exit+0x12>

08002d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e00a      	b.n	8002d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d46:	f3af 8000 	nop.w
 8002d4a:	4601      	mov	r1, r0
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	60ba      	str	r2, [r7, #8]
 8002d52:	b2ca      	uxtb	r2, r1
 8002d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	dbf0      	blt.n	8002d46 <_read+0x12>
  }

  return len;
 8002d64:	687b      	ldr	r3, [r7, #4]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e009      	b.n	8002d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	60ba      	str	r2, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dbf1      	blt.n	8002d80 <_write+0x12>
  }
  return len;
 8002d9c:	687b      	ldr	r3, [r7, #4]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_close>:

int _close(int file)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dce:	605a      	str	r2, [r3, #4]
  return 0;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <_isatty>:

int _isatty(int file)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e18:	4a14      	ldr	r2, [pc, #80]	@ (8002e6c <_sbrk+0x5c>)
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <_sbrk+0x60>)
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <_sbrk+0x64>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <_sbrk+0x64>)
 8002e2e:	4a12      	ldr	r2, [pc, #72]	@ (8002e78 <_sbrk+0x68>)
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d207      	bcs.n	8002e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e40:	f005 f8ac 	bl	8007f9c <__errno>
 8002e44:	4603      	mov	r3, r0
 8002e46:	220c      	movs	r2, #12
 8002e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	e009      	b.n	8002e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e50:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <_sbrk+0x64>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <_sbrk+0x64>)
 8002e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20020000 	.word	0x20020000
 8002e70:	00000400 	.word	0x00000400
 8002e74:	200005c8 	.word	0x200005c8
 8002e78:	20000b28 	.word	0x20000b28

08002e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <SystemInit+0x20>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <SystemInit+0x20>)
 8002e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ea4:	f7ff ffea 	bl	8002e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea8:	480c      	ldr	r0, [pc, #48]	@ (8002edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eaa:	490d      	ldr	r1, [pc, #52]	@ (8002ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb0:	e002      	b.n	8002eb8 <LoopCopyDataInit>

08002eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb6:	3304      	adds	r3, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ebc:	d3f9      	bcc.n	8002eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8002eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec4:	e001      	b.n	8002eca <LoopFillZerobss>

08002ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec8:	3204      	adds	r2, #4

08002eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ecc:	d3fb      	bcc.n	8002ec6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ece:	f005 f86b 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed2:	f7ff f8cf 	bl	8002074 <main>
  bx  lr    
 8002ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002ee4:	0800b428 	.word	0x0800b428
  ldr r2, =_sbss
 8002ee8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002eec:	20000b24 	.word	0x20000b24

08002ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC_IRQHandler>

08002ef2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af04      	add	r7, sp, #16
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	2301      	movs	r3, #1
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2178      	movs	r1, #120	@ 0x78
 8002f1e:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <ssd1306_WriteCommand+0x2c>)
 8002f20:	f001 fa9a 	bl	8004458 <HAL_I2C_Mem_Write>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000023c 	.word	0x2000023c

08002f30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af04      	add	r7, sp, #16
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f42:	9202      	str	r2, [sp, #8]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	2240      	movs	r2, #64	@ 0x40
 8002f4e:	2178      	movs	r1, #120	@ 0x78
 8002f50:	4803      	ldr	r0, [pc, #12]	@ (8002f60 <ssd1306_WriteData+0x30>)
 8002f52:	f001 fa81 	bl	8004458 <HAL_I2C_Mem_Write>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000023c 	.word	0x2000023c

08002f64 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002f68:	f7ff ffc3 	bl	8002ef2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002f6c:	2064      	movs	r0, #100	@ 0x64
 8002f6e:	f000 fa69 	bl	8003444 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002f72:	2000      	movs	r0, #0
 8002f74:	f000 f9d6 	bl	8003324 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002f78:	2020      	movs	r0, #32
 8002f7a:	f7ff ffc1 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7ff ffbe 	bl	8002f00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f84:	20b0      	movs	r0, #176	@ 0xb0
 8002f86:	f7ff ffbb 	bl	8002f00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002f8a:	20c8      	movs	r0, #200	@ 0xc8
 8002f8c:	f7ff ffb8 	bl	8002f00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ffb5 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002f96:	2010      	movs	r0, #16
 8002f98:	f7ff ffb2 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002f9c:	2040      	movs	r0, #64	@ 0x40
 8002f9e:	f7ff ffaf 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002fa2:	20ff      	movs	r0, #255	@ 0xff
 8002fa4:	f000 f9aa 	bl	80032fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002fa8:	20a1      	movs	r0, #161	@ 0xa1
 8002faa:	f7ff ffa9 	bl	8002f00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002fae:	20a6      	movs	r0, #166	@ 0xa6
 8002fb0:	f7ff ffa6 	bl	8002f00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002fb4:	20a8      	movs	r0, #168	@ 0xa8
 8002fb6:	f7ff ffa3 	bl	8002f00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002fba:	203f      	movs	r0, #63	@ 0x3f
 8002fbc:	f7ff ffa0 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002fc0:	20a4      	movs	r0, #164	@ 0xa4
 8002fc2:	f7ff ff9d 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002fc6:	20d3      	movs	r0, #211	@ 0xd3
 8002fc8:	f7ff ff9a 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7ff ff97 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002fd2:	20d5      	movs	r0, #213	@ 0xd5
 8002fd4:	f7ff ff94 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002fd8:	20f0      	movs	r0, #240	@ 0xf0
 8002fda:	f7ff ff91 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002fde:	20d9      	movs	r0, #217	@ 0xd9
 8002fe0:	f7ff ff8e 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002fe4:	2022      	movs	r0, #34	@ 0x22
 8002fe6:	f7ff ff8b 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002fea:	20da      	movs	r0, #218	@ 0xda
 8002fec:	f7ff ff88 	bl	8002f00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002ff0:	2012      	movs	r0, #18
 8002ff2:	f7ff ff85 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002ff6:	20db      	movs	r0, #219	@ 0xdb
 8002ff8:	f7ff ff82 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002ffc:	2020      	movs	r0, #32
 8002ffe:	f7ff ff7f 	bl	8002f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003002:	208d      	movs	r0, #141	@ 0x8d
 8003004:	f7ff ff7c 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003008:	2014      	movs	r0, #20
 800300a:	f7ff ff79 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800300e:	2001      	movs	r0, #1
 8003010:	f000 f988 	bl	8003324 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003014:	2000      	movs	r0, #0
 8003016:	f000 f80f 	bl	8003038 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800301a:	f000 f825 	bl	8003068 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800301e:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <ssd1306_Init+0xd0>)
 8003020:	2200      	movs	r2, #0
 8003022:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <ssd1306_Init+0xd0>)
 8003026:	2200      	movs	r2, #0
 8003028:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800302a:	4b02      	ldr	r3, [pc, #8]	@ (8003034 <ssd1306_Init+0xd0>)
 800302c:	2201      	movs	r2, #1
 800302e:	711a      	strb	r2, [r3, #4]
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200009cc 	.word	0x200009cc

08003038 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <ssd1306_Fill+0x14>
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <ssd1306_Fill+0x16>
 800304c:	23ff      	movs	r3, #255	@ 0xff
 800304e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003052:	4619      	mov	r1, r3
 8003054:	4803      	ldr	r0, [pc, #12]	@ (8003064 <ssd1306_Fill+0x2c>)
 8003056:	f004 ff4e 	bl	8007ef6 <memset>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200005cc 	.word	0x200005cc

08003068 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800306e:	2300      	movs	r3, #0
 8003070:	71fb      	strb	r3, [r7, #7]
 8003072:	e016      	b.n	80030a2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	3b50      	subs	r3, #80	@ 0x50
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff40 	bl	8002f00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003080:	2000      	movs	r0, #0
 8003082:	f7ff ff3d 	bl	8002f00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003086:	2010      	movs	r0, #16
 8003088:	f7ff ff3a 	bl	8002f00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <ssd1306_UpdateScreen+0x4c>)
 8003092:	4413      	add	r3, r2
 8003094:	2180      	movs	r1, #128	@ 0x80
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff4a 	bl	8002f30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	3301      	adds	r3, #1
 80030a0:	71fb      	strb	r3, [r7, #7]
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d9e5      	bls.n	8003074 <ssd1306_UpdateScreen+0xc>
    }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200005cc 	.word	0x200005cc

080030b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	460b      	mov	r3, r1
 80030c4:	71bb      	strb	r3, [r7, #6]
 80030c6:	4613      	mov	r3, r2
 80030c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db3d      	blt.n	800314e <ssd1306_DrawPixel+0x96>
 80030d2:	79bb      	ldrb	r3, [r7, #6]
 80030d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80030d6:	d83a      	bhi.n	800314e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80030d8:	797b      	ldrb	r3, [r7, #5]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d11a      	bne.n	8003114 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	79bb      	ldrb	r3, [r7, #6]
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	b2d8      	uxtb	r0, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	01db      	lsls	r3, r3, #7
 80030ea:	4413      	add	r3, r2
 80030ec:	4a1b      	ldr	r2, [pc, #108]	@ (800315c <ssd1306_DrawPixel+0xa4>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	b25a      	sxtb	r2, r3
 80030f2:	79bb      	ldrb	r3, [r7, #6]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	4313      	orrs	r3, r2
 8003102:	b259      	sxtb	r1, r3
 8003104:	79fa      	ldrb	r2, [r7, #7]
 8003106:	4603      	mov	r3, r0
 8003108:	01db      	lsls	r3, r3, #7
 800310a:	4413      	add	r3, r2
 800310c:	b2c9      	uxtb	r1, r1
 800310e:	4a13      	ldr	r2, [pc, #76]	@ (800315c <ssd1306_DrawPixel+0xa4>)
 8003110:	54d1      	strb	r1, [r2, r3]
 8003112:	e01d      	b.n	8003150 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003114:	79fa      	ldrb	r2, [r7, #7]
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	b2d8      	uxtb	r0, r3
 800311c:	4603      	mov	r3, r0
 800311e:	01db      	lsls	r3, r3, #7
 8003120:	4413      	add	r3, r2
 8003122:	4a0e      	ldr	r2, [pc, #56]	@ (800315c <ssd1306_DrawPixel+0xa4>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	b25a      	sxtb	r2, r3
 8003128:	79bb      	ldrb	r3, [r7, #6]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	b25b      	sxtb	r3, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	b25b      	sxtb	r3, r3
 800313a:	4013      	ands	r3, r2
 800313c:	b259      	sxtb	r1, r3
 800313e:	79fa      	ldrb	r2, [r7, #7]
 8003140:	4603      	mov	r3, r0
 8003142:	01db      	lsls	r3, r3, #7
 8003144:	4413      	add	r3, r2
 8003146:	b2c9      	uxtb	r1, r1
 8003148:	4a04      	ldr	r2, [pc, #16]	@ (800315c <ssd1306_DrawPixel+0xa4>)
 800314a:	54d1      	strb	r1, [r2, r3]
 800314c:	e000      	b.n	8003150 <ssd1306_DrawPixel+0x98>
        return;
 800314e:	bf00      	nop
    }
}
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200005cc 	.word	0x200005cc

08003160 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	4604      	mov	r4, r0
 8003168:	4638      	mov	r0, r7
 800316a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800316e:	4623      	mov	r3, r4
 8003170:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b1f      	cmp	r3, #31
 8003176:	d902      	bls.n	800317e <ssd1306_WriteChar+0x1e>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b7e      	cmp	r3, #126	@ 0x7e
 800317c:	d901      	bls.n	8003182 <ssd1306_WriteChar+0x22>
        return 0;
 800317e:	2300      	movs	r3, #0
 8003180:	e077      	b.n	8003272 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <ssd1306_WriteChar+0x11c>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	783b      	ldrb	r3, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	2b80      	cmp	r3, #128	@ 0x80
 800318e:	dc06      	bgt.n	800319e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003190:	4b3a      	ldr	r3, [pc, #232]	@ (800327c <ssd1306_WriteChar+0x11c>)
 8003192:	885b      	ldrh	r3, [r3, #2]
 8003194:	461a      	mov	r2, r3
 8003196:	787b      	ldrb	r3, [r7, #1]
 8003198:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	dd01      	ble.n	80031a2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	e067      	b.n	8003272 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e04e      	b.n	8003246 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	3b20      	subs	r3, #32
 80031ae:	7879      	ldrb	r1, [r7, #1]
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	440b      	add	r3, r1
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	e036      	b.n	8003236 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80031d8:	4b28      	ldr	r3, [pc, #160]	@ (800327c <ssd1306_WriteChar+0x11c>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	b2d8      	uxtb	r0, r3
 80031e6:	4b25      	ldr	r3, [pc, #148]	@ (800327c <ssd1306_WriteChar+0x11c>)
 80031e8:	885b      	ldrh	r3, [r3, #2]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80031f8:	4619      	mov	r1, r3
 80031fa:	f7ff ff5d 	bl	80030b8 <ssd1306_DrawPixel>
 80031fe:	e017      	b.n	8003230 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003200:	4b1e      	ldr	r3, [pc, #120]	@ (800327c <ssd1306_WriteChar+0x11c>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4413      	add	r3, r2
 800320c:	b2d8      	uxtb	r0, r3
 800320e:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <ssd1306_WriteChar+0x11c>)
 8003210:	885b      	ldrh	r3, [r3, #2]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4413      	add	r3, r2
 800321a:	b2d9      	uxtb	r1, r3
 800321c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	f7ff ff44 	bl	80030b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	3301      	adds	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	783b      	ldrb	r3, [r7, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4293      	cmp	r3, r2
 800323e:	d3c3      	bcc.n	80031c8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	787b      	ldrb	r3, [r7, #1]
 8003248:	461a      	mov	r2, r3
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4293      	cmp	r3, r2
 800324e:	d3ab      	bcc.n	80031a8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <ssd1306_WriteChar+0x11c>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	2a00      	cmp	r2, #0
 8003258:	d005      	beq.n	8003266 <ssd1306_WriteChar+0x106>
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	3a20      	subs	r2, #32
 8003260:	440a      	add	r2, r1
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	e000      	b.n	8003268 <ssd1306_WriteChar+0x108>
 8003266:	783a      	ldrb	r2, [r7, #0]
 8003268:	4413      	add	r3, r2
 800326a:	b29a      	uxth	r2, r3
 800326c:	4b03      	ldr	r3, [pc, #12]	@ (800327c <ssd1306_WriteChar+0x11c>)
 800326e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	bf00      	nop
 800327c:	200009cc 	.word	0x200009cc

08003280 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4638      	mov	r0, r7
 800328a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800328e:	e013      	b.n	80032b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	7818      	ldrb	r0, [r3, #0]
 8003294:	7e3b      	ldrb	r3, [r7, #24]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	463b      	mov	r3, r7
 800329a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329c:	f7ff ff60 	bl	8003160 <ssd1306_WriteChar>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d002      	beq.n	80032b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	e008      	b.n	80032c4 <ssd1306_WriteString+0x44>
        }
        str++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e7      	bne.n	8003290 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	781b      	ldrb	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	460a      	mov	r2, r1
 80032d6:	71fb      	strb	r3, [r7, #7]
 80032d8:	4613      	mov	r3, r2
 80032da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <ssd1306_SetCursor+0x2c>)
 80032e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80032e4:	79bb      	ldrb	r3, [r7, #6]
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <ssd1306_SetCursor+0x2c>)
 80032ea:	805a      	strh	r2, [r3, #2]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	200009cc 	.word	0x200009cc

080032fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003306:	2381      	movs	r3, #129	@ 0x81
 8003308:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fdf7 	bl	8002f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fdf3 	bl	8002f00 <ssd1306_WriteCommand>
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003334:	23af      	movs	r3, #175	@ 0xaf
 8003336:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <ssd1306_SetDisplayOn+0x38>)
 800333a:	2201      	movs	r2, #1
 800333c:	715a      	strb	r2, [r3, #5]
 800333e:	e004      	b.n	800334a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003340:	23ae      	movs	r3, #174	@ 0xae
 8003342:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <ssd1306_SetDisplayOn+0x38>)
 8003346:	2200      	movs	r2, #0
 8003348:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fdd7 	bl	8002f00 <ssd1306_WriteCommand>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200009cc 	.word	0x200009cc

08003360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003364:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0d      	ldr	r2, [pc, #52]	@ (80033a0 <HAL_Init+0x40>)
 800336a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_Init+0x40>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <HAL_Init+0x40>)
 8003376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800337a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <HAL_Init+0x40>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a07      	ldr	r2, [pc, #28]	@ (80033a0 <HAL_Init+0x40>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003388:	2003      	movs	r0, #3
 800338a:	f000 fd41 	bl	8003e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800338e:	2000      	movs	r0, #0
 8003390:	f000 f808 	bl	80033a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003394:	f7ff fae6 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023c00 	.word	0x40023c00

080033a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_InitTick+0x54>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <HAL_InitTick+0x58>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd4b 	bl	8003e5e <HAL_SYSTICK_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00e      	b.n	80033f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d80a      	bhi.n	80033ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d8:	2200      	movs	r2, #0
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f000 fd21 	bl	8003e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e4:	4a06      	ldr	r2, [pc, #24]	@ (8003400 <HAL_InitTick+0x5c>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000004 	.word	0x20000004
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003408:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_IncTick+0x20>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_IncTick+0x24>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4413      	add	r3, r2
 8003414:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <HAL_IncTick+0x24>)
 8003416:	6013      	str	r3, [r2, #0]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c
 8003428:	200009d4 	.word	0x200009d4

0800342c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return uwTick;
 8003430:	4b03      	ldr	r3, [pc, #12]	@ (8003440 <HAL_GetTick+0x14>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	200009d4 	.word	0x200009d4

08003444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800344c:	f7ff ffee 	bl	800342c <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d005      	beq.n	800346a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800345e:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <HAL_Delay+0x44>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800346a:	bf00      	nop
 800346c:	f7ff ffde 	bl	800342c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	429a      	cmp	r2, r3
 800347a:	d8f7      	bhi.n	800346c <HAL_Delay+0x28>
  {
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000000c 	.word	0x2000000c

0800348c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e033      	b.n	800350a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fa82 	bl	80029b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d118      	bne.n	80034fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034d2:	f023 0302 	bic.w	r3, r3, #2
 80034d6:	f043 0202 	orr.w	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fae8 	bl	8003ab4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80034fa:	e001      	b.n	8003500 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_ADC_Start+0x1a>
 800352a:	2302      	movs	r3, #2
 800352c:	e0b2      	b.n	8003694 <HAL_ADC_Start+0x180>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d018      	beq.n	8003576 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003554:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <HAL_ADC_Start+0x18c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <HAL_ADC_Start+0x190>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0c9a      	lsrs	r2, r3, #18
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003568:	e002      	b.n	8003570 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d17a      	bne.n	800367a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c2:	d106      	bne.n	80035d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c8:	f023 0206 	bic.w	r2, r3, #6
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035e0:	4b31      	ldr	r3, [pc, #196]	@ (80036a8 <HAL_ADC_Start+0x194>)
 80035e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80035ec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12a      	bne.n	8003650 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2b      	ldr	r2, [pc, #172]	@ (80036ac <HAL_ADC_Start+0x198>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d015      	beq.n	8003630 <HAL_ADC_Start+0x11c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <HAL_ADC_Start+0x19c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d105      	bne.n	800361a <HAL_ADC_Start+0x106>
 800360e:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <HAL_ADC_Start+0x194>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a25      	ldr	r2, [pc, #148]	@ (80036b4 <HAL_ADC_Start+0x1a0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d136      	bne.n	8003692 <HAL_ADC_Start+0x17e>
 8003624:	4b20      	ldr	r3, [pc, #128]	@ (80036a8 <HAL_ADC_Start+0x194>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d130      	bne.n	8003692 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d129      	bne.n	8003692 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	e020      	b.n	8003692 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <HAL_ADC_Start+0x198>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d11b      	bne.n	8003692 <HAL_ADC_Start+0x17e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d114      	bne.n	8003692 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e00b      	b.n	8003692 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	20000004 	.word	0x20000004
 80036a4:	431bde83 	.word	0x431bde83
 80036a8:	40012300 	.word	0x40012300
 80036ac:	40012000 	.word	0x40012000
 80036b0:	40012100 	.word	0x40012100
 80036b4:	40012200 	.word	0x40012200

080036b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_ADC_Stop+0x16>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e021      	b.n	8003712 <HAL_ADC_Stop+0x5a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373a:	d113      	bne.n	8003764 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800374a:	d10b      	bne.n	8003764 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e063      	b.n	800382c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003764:	f7ff fe62 	bl	800342c <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800376a:	e021      	b.n	80037b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d01d      	beq.n	80037b0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_ADC_PollForConversion+0x6c>
 800377a:	f7ff fe57 	bl	800342c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d212      	bcs.n	80037b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d00b      	beq.n	80037b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e03d      	b.n	800382c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d1d6      	bne.n	800376c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0212 	mvn.w	r2, #18
 80037c6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d123      	bne.n	800382a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11f      	bne.n	800382a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003802:	2b00      	cmp	r3, #0
 8003804:	d111      	bne.n	800382a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x1c>
 8003868:	2302      	movs	r3, #2
 800386a:	e113      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x244>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b09      	cmp	r3, #9
 800387a:	d925      	bls.n	80038c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68d9      	ldr	r1, [r3, #12]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	3b1e      	subs	r3, #30
 8003892:	2207      	movs	r2, #7
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43da      	mvns	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	400a      	ands	r2, r1
 80038a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68d9      	ldr	r1, [r3, #12]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4403      	add	r3, r0
 80038ba:	3b1e      	subs	r3, #30
 80038bc:	409a      	lsls	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	e022      	b.n	800390e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6919      	ldr	r1, [r3, #16]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	2207      	movs	r2, #7
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	400a      	ands	r2, r1
 80038ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6919      	ldr	r1, [r3, #16]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4403      	add	r3, r0
 8003904:	409a      	lsls	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d824      	bhi.n	8003960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	3b05      	subs	r3, #5
 8003928:	221f      	movs	r2, #31
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	400a      	ands	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	4618      	mov	r0, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	3b05      	subs	r3, #5
 8003952:	fa00 f203 	lsl.w	r2, r0, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	635a      	str	r2, [r3, #52]	@ 0x34
 800395e:	e04c      	b.n	80039fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d824      	bhi.n	80039b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b23      	subs	r3, #35	@ 0x23
 800397a:	221f      	movs	r2, #31
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43da      	mvns	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	400a      	ands	r2, r1
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3b23      	subs	r3, #35	@ 0x23
 80039a4:	fa00 f203 	lsl.w	r2, r0, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80039b0:	e023      	b.n	80039fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	3b41      	subs	r3, #65	@ 0x41
 80039c4:	221f      	movs	r2, #31
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	400a      	ands	r2, r1
 80039d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	3b41      	subs	r3, #65	@ 0x41
 80039ee:	fa00 f203 	lsl.w	r2, r0, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fa:	4b29      	ldr	r3, [pc, #164]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x250>)
 80039fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x254>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10f      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x1d8>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b12      	cmp	r3, #18
 8003a0e:	d10b      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x254>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d12b      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x23a>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x258>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <HAL_ADC_ConfigChannel+0x1f4>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b11      	cmp	r3, #17
 8003a42:	d122      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x258>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d111      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a66:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <HAL_ADC_ConfigChannel+0x25c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a11      	ldr	r2, [pc, #68]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x260>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	0c9a      	lsrs	r2, r3, #18
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a7c:	e002      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f9      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40012300 	.word	0x40012300
 8003aa4:	40012000 	.word	0x40012000
 8003aa8:	10000012 	.word	0x10000012
 8003aac:	20000004 	.word	0x20000004
 8003ab0:	431bde83 	.word	0x431bde83

08003ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003abc:	4b79      	ldr	r3, [pc, #484]	@ (8003ca4 <ADC_Init+0x1f0>)
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	021a      	lsls	r2, r3, #8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	4a58      	ldr	r2, [pc, #352]	@ (8003ca8 <ADC_Init+0x1f4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d022      	beq.n	8003b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6899      	ldr	r1, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	e00f      	b.n	8003bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0202 	bic.w	r2, r2, #2
 8003bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7e1b      	ldrb	r3, [r3, #24]
 8003bcc:	005a      	lsls	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01b      	beq.n	8003c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	035a      	lsls	r2, r3, #13
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	e007      	b.n	8003c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	051a      	lsls	r2, r3, #20
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c6a:	025a      	lsls	r2, r3, #9
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	029a      	lsls	r2, r3, #10
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40012300 	.word	0x40012300
 8003ca8:	0f000001 	.word	0x0f000001

08003cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cde:	4a04      	ldr	r2, [pc, #16]	@ (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60d3      	str	r3, [r2, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf8:	4b04      	ldr	r3, [pc, #16]	@ (8003d0c <__NVIC_GetPriorityGrouping+0x18>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0307 	and.w	r3, r3, #7
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	db0a      	blt.n	8003d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	490c      	ldr	r1, [pc, #48]	@ (8003d5c <__NVIC_SetPriority+0x4c>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	440b      	add	r3, r1
 8003d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d38:	e00a      	b.n	8003d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4908      	ldr	r1, [pc, #32]	@ (8003d60 <__NVIC_SetPriority+0x50>)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	3b04      	subs	r3, #4
 8003d48:	0112      	lsls	r2, r2, #4
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	761a      	strb	r2, [r3, #24]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e100 	.word	0xe000e100
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f1c3 0307 	rsb	r3, r3, #7
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf28      	it	cs
 8003d82:	2304      	movcs	r3, #4
 8003d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d902      	bls.n	8003d94 <NVIC_EncodePriority+0x30>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3b03      	subs	r3, #3
 8003d92:	e000      	b.n	8003d96 <NVIC_EncodePriority+0x32>
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	401a      	ands	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dac:	f04f 31ff 	mov.w	r1, #4294967295
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	4313      	orrs	r3, r2
         );
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ddc:	d301      	bcc.n	8003de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00f      	b.n	8003e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003de2:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <SysTick_Config+0x40>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dea:	210f      	movs	r1, #15
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	f7ff ff8e 	bl	8003d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <SysTick_Config+0x40>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dfa:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <SysTick_Config+0x40>)
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	e000e010 	.word	0xe000e010

08003e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff47 	bl	8003cac <__NVIC_SetPriorityGrouping>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e38:	f7ff ff5c 	bl	8003cf4 <__NVIC_GetPriorityGrouping>
 8003e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	6978      	ldr	r0, [r7, #20]
 8003e44:	f7ff ff8e 	bl	8003d64 <NVIC_EncodePriority>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff5d 	bl	8003d10 <__NVIC_SetPriority>
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ffb0 	bl	8003dcc <SysTick_Config>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e165      	b.n	8004160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e94:	2201      	movs	r2, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	f040 8154 	bne.w	800415a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d005      	beq.n	8003eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d130      	bne.n	8003f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f00:	2201      	movs	r2, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 0201 	and.w	r2, r3, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d017      	beq.n	8003f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d123      	bne.n	8003fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	08da      	lsrs	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3208      	adds	r2, #8
 8003f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	220f      	movs	r2, #15
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	08da      	lsrs	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0203 	and.w	r2, r3, #3
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80ae 	beq.w	800415a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	4b5d      	ldr	r3, [pc, #372]	@ (8004178 <HAL_GPIO_Init+0x300>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	4a5c      	ldr	r2, [pc, #368]	@ (8004178 <HAL_GPIO_Init+0x300>)
 8004008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800400c:	6453      	str	r3, [r2, #68]	@ 0x44
 800400e:	4b5a      	ldr	r3, [pc, #360]	@ (8004178 <HAL_GPIO_Init+0x300>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800401a:	4a58      	ldr	r2, [pc, #352]	@ (800417c <HAL_GPIO_Init+0x304>)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	3302      	adds	r3, #2
 8004022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4f      	ldr	r2, [pc, #316]	@ (8004180 <HAL_GPIO_Init+0x308>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d025      	beq.n	8004092 <HAL_GPIO_Init+0x21a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4e      	ldr	r2, [pc, #312]	@ (8004184 <HAL_GPIO_Init+0x30c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <HAL_GPIO_Init+0x216>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4d      	ldr	r2, [pc, #308]	@ (8004188 <HAL_GPIO_Init+0x310>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d019      	beq.n	800408a <HAL_GPIO_Init+0x212>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4c      	ldr	r2, [pc, #304]	@ (800418c <HAL_GPIO_Init+0x314>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_GPIO_Init+0x20e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4b      	ldr	r2, [pc, #300]	@ (8004190 <HAL_GPIO_Init+0x318>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00d      	beq.n	8004082 <HAL_GPIO_Init+0x20a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4a      	ldr	r2, [pc, #296]	@ (8004194 <HAL_GPIO_Init+0x31c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <HAL_GPIO_Init+0x206>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a49      	ldr	r2, [pc, #292]	@ (8004198 <HAL_GPIO_Init+0x320>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <HAL_GPIO_Init+0x202>
 8004076:	2306      	movs	r3, #6
 8004078:	e00c      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 800407a:	2307      	movs	r3, #7
 800407c:	e00a      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 800407e:	2305      	movs	r3, #5
 8004080:	e008      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 8004082:	2304      	movs	r3, #4
 8004084:	e006      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 8004086:	2303      	movs	r3, #3
 8004088:	e004      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 800408a:	2302      	movs	r3, #2
 800408c:	e002      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_GPIO_Init+0x21c>
 8004092:	2300      	movs	r3, #0
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	f002 0203 	and.w	r2, r2, #3
 800409a:	0092      	lsls	r2, r2, #2
 800409c:	4093      	lsls	r3, r2
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a4:	4935      	ldr	r1, [pc, #212]	@ (800417c <HAL_GPIO_Init+0x304>)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b2:	4b3a      	ldr	r3, [pc, #232]	@ (800419c <HAL_GPIO_Init+0x324>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040d6:	4a31      	ldr	r2, [pc, #196]	@ (800419c <HAL_GPIO_Init+0x324>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040dc:	4b2f      	ldr	r3, [pc, #188]	@ (800419c <HAL_GPIO_Init+0x324>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004100:	4a26      	ldr	r2, [pc, #152]	@ (800419c <HAL_GPIO_Init+0x324>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004106:	4b25      	ldr	r3, [pc, #148]	@ (800419c <HAL_GPIO_Init+0x324>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800412a:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <HAL_GPIO_Init+0x324>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004130:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <HAL_GPIO_Init+0x324>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004154:	4a11      	ldr	r2, [pc, #68]	@ (800419c <HAL_GPIO_Init+0x324>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	f67f ae96 	bls.w	8003e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	3724      	adds	r7, #36	@ 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	40013800 	.word	0x40013800
 8004180:	40020000 	.word	0x40020000
 8004184:	40020400 	.word	0x40020400
 8004188:	40020800 	.word	0x40020800
 800418c:	40020c00 	.word	0x40020c00
 8004190:	40021000 	.word	0x40021000
 8004194:	40021400 	.word	0x40021400
 8004198:	40021800 	.word	0x40021800
 800419c:	40013c00 	.word	0x40013c00

080041a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e001      	b.n	80041c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e12b      	b.n	800443a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe fc20 	bl	8002a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	@ 0x24
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004234:	f001 f8e2 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8004238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4a81      	ldr	r2, [pc, #516]	@ (8004444 <HAL_I2C_Init+0x274>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d807      	bhi.n	8004254 <HAL_I2C_Init+0x84>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4a80      	ldr	r2, [pc, #512]	@ (8004448 <HAL_I2C_Init+0x278>)
 8004248:	4293      	cmp	r3, r2
 800424a:	bf94      	ite	ls
 800424c:	2301      	movls	r3, #1
 800424e:	2300      	movhi	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e006      	b.n	8004262 <HAL_I2C_Init+0x92>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a7d      	ldr	r2, [pc, #500]	@ (800444c <HAL_I2C_Init+0x27c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	bf94      	ite	ls
 800425c:	2301      	movls	r3, #1
 800425e:	2300      	movhi	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0e7      	b.n	800443a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a78      	ldr	r2, [pc, #480]	@ (8004450 <HAL_I2C_Init+0x280>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0c9b      	lsrs	r3, r3, #18
 8004274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4a6a      	ldr	r2, [pc, #424]	@ (8004444 <HAL_I2C_Init+0x274>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d802      	bhi.n	80042a4 <HAL_I2C_Init+0xd4>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	3301      	adds	r3, #1
 80042a2:	e009      	b.n	80042b8 <HAL_I2C_Init+0xe8>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	4a69      	ldr	r2, [pc, #420]	@ (8004454 <HAL_I2C_Init+0x284>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	3301      	adds	r3, #1
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	430b      	orrs	r3, r1
 80042be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	495c      	ldr	r1, [pc, #368]	@ (8004444 <HAL_I2C_Init+0x274>)
 80042d4:	428b      	cmp	r3, r1
 80042d6:	d819      	bhi.n	800430c <HAL_I2C_Init+0x13c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1e59      	subs	r1, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042ec:	400b      	ands	r3, r1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_I2C_Init+0x138>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1e59      	subs	r1, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004300:	3301      	adds	r3, #1
 8004302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004306:	e051      	b.n	80043ac <HAL_I2C_Init+0x1dc>
 8004308:	2304      	movs	r3, #4
 800430a:	e04f      	b.n	80043ac <HAL_I2C_Init+0x1dc>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d111      	bne.n	8004338 <HAL_I2C_Init+0x168>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1e58      	subs	r0, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	440b      	add	r3, r1
 8004322:	fbb0 f3f3 	udiv	r3, r0, r3
 8004326:	3301      	adds	r3, #1
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e012      	b.n	800435e <HAL_I2C_Init+0x18e>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	0099      	lsls	r1, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Init+0x196>
 8004362:	2301      	movs	r3, #1
 8004364:	e022      	b.n	80043ac <HAL_I2C_Init+0x1dc>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10e      	bne.n	800438c <HAL_I2C_Init+0x1bc>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1e58      	subs	r0, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	440b      	add	r3, r1
 800437c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800438a:	e00f      	b.n	80043ac <HAL_I2C_Init+0x1dc>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e58      	subs	r0, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	0099      	lsls	r1, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	6809      	ldr	r1, [r1, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6911      	ldr	r1, [r2, #16]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	000186a0 	.word	0x000186a0
 8004448:	001e847f 	.word	0x001e847f
 800444c:	003d08ff 	.word	0x003d08ff
 8004450:	431bde83 	.word	0x431bde83
 8004454:	10624dd3 	.word	0x10624dd3

08004458 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	461a      	mov	r2, r3
 8004466:	4603      	mov	r3, r0
 8004468:	817b      	strh	r3, [r7, #10]
 800446a:	460b      	mov	r3, r1
 800446c:	813b      	strh	r3, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004472:	f7fe ffdb 	bl	800342c <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b20      	cmp	r3, #32
 8004482:	f040 80d9 	bne.w	8004638 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2319      	movs	r3, #25
 800448c:	2201      	movs	r2, #1
 800448e:	496d      	ldr	r1, [pc, #436]	@ (8004644 <HAL_I2C_Mem_Write+0x1ec>)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fc8b 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
 800449e:	e0cc      	b.n	800463a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_I2C_Mem_Write+0x56>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0c5      	b.n	800463a <HAL_I2C_Mem_Write+0x1e2>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d007      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2221      	movs	r2, #33	@ 0x21
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2240      	movs	r2, #64	@ 0x40
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a4d      	ldr	r2, [pc, #308]	@ (8004648 <HAL_I2C_Mem_Write+0x1f0>)
 8004514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004516:	88f8      	ldrh	r0, [r7, #6]
 8004518:	893a      	ldrh	r2, [r7, #8]
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	4603      	mov	r3, r0
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fac2 	bl	8004ab0 <I2C_RequestMemoryWrite>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d052      	beq.n	80045d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e081      	b.n	800463a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fd50 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00d      	beq.n	8004562 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	2b04      	cmp	r3, #4
 800454c:	d107      	bne.n	800455e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e06b      	b.n	800463a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d11b      	bne.n	80045d8 <HAL_I2C_Mem_Write+0x180>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d017      	beq.n	80045d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1aa      	bne.n	8004536 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fd43 	bl	8005070 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d107      	bne.n	8004608 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004606:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e016      	b.n	800463a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	00100002 	.word	0x00100002
 8004648:	ffff0000 	.word	0xffff0000

0800464c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	@ 0x30
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	461a      	mov	r2, r3
 800465a:	4603      	mov	r3, r0
 800465c:	817b      	strh	r3, [r7, #10]
 800465e:	460b      	mov	r3, r1
 8004660:	813b      	strh	r3, [r7, #8]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004666:	f7fe fee1 	bl	800342c <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b20      	cmp	r3, #32
 8004676:	f040 8214 	bne.w	8004aa2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	2319      	movs	r3, #25
 8004680:	2201      	movs	r2, #1
 8004682:	497b      	ldr	r1, [pc, #492]	@ (8004870 <HAL_I2C_Mem_Read+0x224>)
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fb91 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
 8004692:	e207      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x56>
 800469e:	2302      	movs	r3, #2
 80046a0:	e200      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d007      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2222      	movs	r2, #34	@ 0x22
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a5b      	ldr	r2, [pc, #364]	@ (8004874 <HAL_I2C_Mem_Read+0x228>)
 8004708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800470a:	88f8      	ldrh	r0, [r7, #6]
 800470c:	893a      	ldrh	r2, [r7, #8]
 800470e:	8979      	ldrh	r1, [r7, #10]
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4603      	mov	r3, r0
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fa5e 	bl	8004bdc <I2C_RequestMemoryRead>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e1bc      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d113      	bne.n	800475a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e190      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	2b01      	cmp	r3, #1
 8004760:	d11b      	bne.n	800479a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e170      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d11b      	bne.n	80047da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	e150      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047f0:	e144      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	f200 80f1 	bhi.w	80049de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004800:	2b01      	cmp	r3, #1
 8004802:	d123      	bne.n	800484c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004806:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fc79 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e145      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800484a:	e117      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004850:	2b02      	cmp	r3, #2
 8004852:	d14e      	bne.n	80048f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	2200      	movs	r2, #0
 800485c:	4906      	ldr	r1, [pc, #24]	@ (8004878 <HAL_I2C_Mem_Read+0x22c>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 faa4 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e11a      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
 800486e:	bf00      	nop
 8004870:	00100002 	.word	0x00100002
 8004874:	ffff0000 	.word	0xffff0000
 8004878:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048f0:	e0c4      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	2200      	movs	r2, #0
 80048fa:	496c      	ldr	r1, [pc, #432]	@ (8004aac <HAL_I2C_Mem_Read+0x460>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa55 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0cb      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	2200      	movs	r2, #0
 8004956:	4955      	ldr	r1, [pc, #340]	@ (8004aac <HAL_I2C_Mem_Read+0x460>)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fa27 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e09d      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049dc:	e04e      	b.n	8004a7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fb8c 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e058      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d124      	bne.n	8004a7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f aeb6 	bne.w	80047f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e000      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
  }
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3728      	adds	r7, #40	@ 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	00010004 	.word	0x00010004

08004ab0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	817b      	strh	r3, [r7, #10]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	813b      	strh	r3, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f960 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b00:	d103      	bne.n	8004b0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e05f      	b.n	8004bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	492d      	ldr	r1, [pc, #180]	@ (8004bd8 <I2C_RequestMemoryWrite+0x128>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f9bb 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e04c      	b.n	8004bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4c:	6a39      	ldr	r1, [r7, #32]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fa46 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d107      	bne.n	8004b72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e02b      	b.n	8004bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b7c:	893b      	ldrh	r3, [r7, #8]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e021      	b.n	8004bcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b98:	6a39      	ldr	r1, [r7, #32]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fa20 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00d      	beq.n	8004bc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d107      	bne.n	8004bbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e005      	b.n	8004bce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc2:	893b      	ldrh	r3, [r7, #8]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	00010002 	.word	0x00010002

08004bdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	813b      	strh	r3, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f8c2 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00d      	beq.n	8004c4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c3c:	d103      	bne.n	8004c46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0aa      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	4952      	ldr	r1, [pc, #328]	@ (8004da8 <I2C_RequestMemoryRead+0x1cc>)
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f91d 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e097      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f9a8 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d107      	bne.n	8004cae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e076      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	611a      	str	r2, [r3, #16]
 8004cc2:	e021      	b.n	8004d08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc4:	893b      	ldrh	r3, [r7, #8]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f982 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d107      	bne.n	8004cfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e050      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfe:	893b      	ldrh	r3, [r7, #8]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0a:	6a39      	ldr	r1, [r7, #32]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f967 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00d      	beq.n	8004d34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d107      	bne.n	8004d30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e035      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f82b 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00d      	beq.n	8004d78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6a:	d103      	bne.n	8004d74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e013      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d78:	897b      	ldrh	r3, [r7, #10]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	4906      	ldr	r1, [pc, #24]	@ (8004da8 <I2C_RequestMemoryRead+0x1cc>)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f886 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	00010002 	.word	0x00010002

08004dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dbc:	e048      	b.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d044      	beq.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fe fb31 	bl	800342c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d139      	bne.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10d      	bne.n	8004e02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	43da      	mvns	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	e00c      	b.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d116      	bne.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e023      	b.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d10d      	bne.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	43da      	mvns	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4013      	ands	r3, r2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	e00c      	b.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d093      	beq.n	8004dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eae:	e071      	b.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebe:	d123      	bne.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ece:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0204 	orr.w	r2, r3, #4
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e067      	b.n	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d041      	beq.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f10:	f7fe fa8c 	bl	800342c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d302      	bcc.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d136      	bne.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10c      	bne.n	8004f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	43da      	mvns	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e00b      	b.n	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e021      	b.n	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10c      	bne.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e00b      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f af6d 	bne.w	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fec:	e034      	b.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f8e3 	bl	80051ba <I2C_IsAcknowledgeFailed>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e034      	b.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d028      	beq.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fe fa11 	bl	800342c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11d      	bne.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d016      	beq.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e007      	b.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	2b80      	cmp	r3, #128	@ 0x80
 8005064:	d1c3      	bne.n	8004fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800507c:	e034      	b.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f89b 	bl	80051ba <I2C_IsAcknowledgeFailed>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e034      	b.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d028      	beq.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fe f9c9 	bl	800342c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11d      	bne.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d016      	beq.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e007      	b.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d1c3      	bne.n	800507e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800510c:	e049      	b.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d119      	bne.n	8005150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0210 	mvn.w	r2, #16
 8005124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e030      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fe f96c 	bl	800342c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11d      	bne.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d016      	beq.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e007      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	d1ae      	bne.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d0:	d11b      	bne.n	800520a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	f043 0204 	orr.w	r2, r3, #4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0cc      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800522c:	4b68      	ldr	r3, [pc, #416]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d90c      	bls.n	8005254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b65      	ldr	r3, [pc, #404]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0b8      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800526c:	4b59      	ldr	r3, [pc, #356]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a58      	ldr	r2, [pc, #352]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005276:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005284:	4b53      	ldr	r3, [pc, #332]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a52      	ldr	r2, [pc, #328]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800528e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b50      	ldr	r3, [pc, #320]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	494d      	ldr	r1, [pc, #308]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d044      	beq.n	8005338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	4b47      	ldr	r3, [pc, #284]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d119      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e07f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b3f      	ldr	r3, [pc, #252]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e6:	4b3b      	ldr	r3, [pc, #236]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e067      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052f6:	4b37      	ldr	r3, [pc, #220]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 0203 	bic.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4934      	ldr	r1, [pc, #208]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005308:	f7fe f890 	bl	800342c <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530e:	e00a      	b.n	8005326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005310:	f7fe f88c 	bl	800342c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e04f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	4b2b      	ldr	r3, [pc, #172]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 020c 	and.w	r2, r3, #12
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	429a      	cmp	r2, r3
 8005336:	d1eb      	bne.n	8005310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005338:	4b25      	ldr	r3, [pc, #148]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d20c      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b22      	ldr	r3, [pc, #136]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b20      	ldr	r3, [pc, #128]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e032      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4916      	ldr	r1, [pc, #88]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538a:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	490e      	ldr	r1, [pc, #56]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800539e:	f000 f855 	bl	800544c <HAL_RCC_GetSysClockFreq>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	490a      	ldr	r1, [pc, #40]	@ (80053d8 <HAL_RCC_ClockConfig+0x1c0>)
 80053b0:	5ccb      	ldrb	r3, [r1, r3]
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	4a09      	ldr	r2, [pc, #36]	@ (80053dc <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <HAL_RCC_ClockConfig+0x1c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fff0 	bl	80033a4 <HAL_InitTick>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023c00 	.word	0x40023c00
 80053d4:	40023800 	.word	0x40023800
 80053d8:	0800a900 	.word	0x0800a900
 80053dc:	20000004 	.word	0x20000004
 80053e0:	20000008 	.word	0x20000008

080053e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000004 	.word	0x20000004

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800a910 	.word	0x0800a910

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffdc 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800a910 	.word	0x0800a910

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b0ae      	sub	sp, #184	@ 0xb8
 8005452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005472:	4bcb      	ldr	r3, [pc, #812]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b0c      	cmp	r3, #12
 800547c:	f200 8206 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x440>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054bd 	.word	0x080054bd
 800548c:	0800588d 	.word	0x0800588d
 8005490:	0800588d 	.word	0x0800588d
 8005494:	0800588d 	.word	0x0800588d
 8005498:	080054c5 	.word	0x080054c5
 800549c:	0800588d 	.word	0x0800588d
 80054a0:	0800588d 	.word	0x0800588d
 80054a4:	0800588d 	.word	0x0800588d
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	0800588d 	.word	0x0800588d
 80054b0:	0800588d 	.word	0x0800588d
 80054b4:	0800588d 	.word	0x0800588d
 80054b8:	080056bd 	.word	0x080056bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4bb9      	ldr	r3, [pc, #740]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80054be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054c2:	e1e7      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c4:	4bb8      	ldr	r3, [pc, #736]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054ca:	e1e3      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054cc:	4bb4      	ldr	r3, [pc, #720]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d8:	4bb1      	ldr	r3, [pc, #708]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d071      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e4:	4bae      	ldr	r3, [pc, #696]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80054f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005500:	2300      	movs	r3, #0
 8005502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f04f 0000 	mov.w	r0, #0
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	0159      	lsls	r1, r3, #5
 8005518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551c:	0150      	lsls	r0, r2, #5
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4621      	mov	r1, r4
 8005524:	1a51      	subs	r1, r2, r1
 8005526:	6439      	str	r1, [r7, #64]	@ 0x40
 8005528:	4629      	mov	r1, r5
 800552a:	eb63 0301 	sbc.w	r3, r3, r1
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800553c:	4649      	mov	r1, r9
 800553e:	018b      	lsls	r3, r1, #6
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005546:	4641      	mov	r1, r8
 8005548:	018a      	lsls	r2, r1, #6
 800554a:	4641      	mov	r1, r8
 800554c:	1a51      	subs	r1, r2, r1
 800554e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005550:	4649      	mov	r1, r9
 8005552:	eb63 0301 	sbc.w	r3, r3, r1
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005564:	4649      	mov	r1, r9
 8005566:	00cb      	lsls	r3, r1, #3
 8005568:	4641      	mov	r1, r8
 800556a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556e:	4641      	mov	r1, r8
 8005570:	00ca      	lsls	r2, r1, #3
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	4603      	mov	r3, r0
 8005578:	4622      	mov	r2, r4
 800557a:	189b      	adds	r3, r3, r2
 800557c:	633b      	str	r3, [r7, #48]	@ 0x30
 800557e:	462b      	mov	r3, r5
 8005580:	460a      	mov	r2, r1
 8005582:	eb42 0303 	adc.w	r3, r2, r3
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005594:	4629      	mov	r1, r5
 8005596:	024b      	lsls	r3, r1, #9
 8005598:	4621      	mov	r1, r4
 800559a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800559e:	4621      	mov	r1, r4
 80055a0:	024a      	lsls	r2, r1, #9
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80055b8:	f7fb fb66 	bl	8000c88 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055c6:	e067      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c8:	4b75      	ldr	r3, [pc, #468]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80055d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055e2:	2300      	movs	r3, #0
 80055e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	f04f 0000 	mov.w	r0, #0
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	0159      	lsls	r1, r3, #5
 80055f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055fc:	0150      	lsls	r0, r2, #5
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4621      	mov	r1, r4
 8005604:	1a51      	subs	r1, r2, r1
 8005606:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005608:	4629      	mov	r1, r5
 800560a:	eb63 0301 	sbc.w	r3, r3, r1
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800561c:	4649      	mov	r1, r9
 800561e:	018b      	lsls	r3, r1, #6
 8005620:	4641      	mov	r1, r8
 8005622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005626:	4641      	mov	r1, r8
 8005628:	018a      	lsls	r2, r1, #6
 800562a:	4641      	mov	r1, r8
 800562c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005630:	4649      	mov	r1, r9
 8005632:	eb63 0b01 	sbc.w	fp, r3, r1
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564a:	4692      	mov	sl, r2
 800564c:	469b      	mov	fp, r3
 800564e:	4623      	mov	r3, r4
 8005650:	eb1a 0303 	adds.w	r3, sl, r3
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	462b      	mov	r3, r5
 8005658:	eb4b 0303 	adc.w	r3, fp, r3
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005680:	2200      	movs	r2, #0
 8005682:	673b      	str	r3, [r7, #112]	@ 0x70
 8005684:	677a      	str	r2, [r7, #116]	@ 0x74
 8005686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800568a:	f7fb fafd 	bl	8000c88 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4613      	mov	r3, r2
 8005694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005698:	4b41      	ldr	r3, [pc, #260]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80056aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056ba:	e0eb      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056bc:	4b38      	ldr	r3, [pc, #224]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056c8:	4b35      	ldr	r3, [pc, #212]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d06b      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d4:	4b32      	ldr	r3, [pc, #200]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	099b      	lsrs	r3, r3, #6
 80056da:	2200      	movs	r2, #0
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e8:	2300      	movs	r3, #0
 80056ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80056f0:	4622      	mov	r2, r4
 80056f2:	462b      	mov	r3, r5
 80056f4:	f04f 0000 	mov.w	r0, #0
 80056f8:	f04f 0100 	mov.w	r1, #0
 80056fc:	0159      	lsls	r1, r3, #5
 80056fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005702:	0150      	lsls	r0, r2, #5
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4621      	mov	r1, r4
 800570a:	1a51      	subs	r1, r2, r1
 800570c:	61b9      	str	r1, [r7, #24]
 800570e:	4629      	mov	r1, r5
 8005710:	eb63 0301 	sbc.w	r3, r3, r1
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005722:	4659      	mov	r1, fp
 8005724:	018b      	lsls	r3, r1, #6
 8005726:	4651      	mov	r1, sl
 8005728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800572c:	4651      	mov	r1, sl
 800572e:	018a      	lsls	r2, r1, #6
 8005730:	4651      	mov	r1, sl
 8005732:	ebb2 0801 	subs.w	r8, r2, r1
 8005736:	4659      	mov	r1, fp
 8005738:	eb63 0901 	sbc.w	r9, r3, r1
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005750:	4690      	mov	r8, r2
 8005752:	4699      	mov	r9, r3
 8005754:	4623      	mov	r3, r4
 8005756:	eb18 0303 	adds.w	r3, r8, r3
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	462b      	mov	r3, r5
 800575e:	eb49 0303 	adc.w	r3, r9, r3
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005770:	4629      	mov	r1, r5
 8005772:	024b      	lsls	r3, r1, #9
 8005774:	4621      	mov	r1, r4
 8005776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800577a:	4621      	mov	r1, r4
 800577c:	024a      	lsls	r2, r1, #9
 800577e:	4610      	mov	r0, r2
 8005780:	4619      	mov	r1, r3
 8005782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005786:	2200      	movs	r2, #0
 8005788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800578c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005790:	f7fb fa7a 	bl	8000c88 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800579e:	e065      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x420>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	00f42400 	.word	0x00f42400
 80057a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ac:	4b3d      	ldr	r3, [pc, #244]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	2200      	movs	r2, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	4611      	mov	r1, r2
 80057b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057be:	2300      	movs	r3, #0
 80057c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	f04f 0000 	mov.w	r0, #0
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	0159      	lsls	r1, r3, #5
 80057d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d8:	0150      	lsls	r0, r2, #5
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4641      	mov	r1, r8
 80057e0:	1a51      	subs	r1, r2, r1
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	4649      	mov	r1, r9
 80057e6:	eb63 0301 	sbc.w	r3, r3, r1
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80057f8:	4659      	mov	r1, fp
 80057fa:	018b      	lsls	r3, r1, #6
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005802:	4651      	mov	r1, sl
 8005804:	018a      	lsls	r2, r1, #6
 8005806:	4651      	mov	r1, sl
 8005808:	1a54      	subs	r4, r2, r1
 800580a:	4659      	mov	r1, fp
 800580c:	eb63 0501 	sbc.w	r5, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	4643      	mov	r3, r8
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	464b      	mov	r3, r9
 800582c:	eb45 0303 	adc.w	r3, r5, r3
 8005830:	607b      	str	r3, [r7, #4]
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800583e:	4629      	mov	r1, r5
 8005840:	028b      	lsls	r3, r1, #10
 8005842:	4621      	mov	r1, r4
 8005844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005848:	4621      	mov	r1, r4
 800584a:	028a      	lsls	r2, r1, #10
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005854:	2200      	movs	r2, #0
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005858:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800585a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800585e:	f7fb fa13 	bl	8000c88 <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4613      	mov	r3, r2
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800586c:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0f1b      	lsrs	r3, r3, #28
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800587a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800587e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005882:	fbb2 f3f3 	udiv	r3, r2, r3
 8005886:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800588a:	e003      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800588e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005898:	4618      	mov	r0, r3
 800589a:	37b8      	adds	r7, #184	@ 0xb8
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	00f42400 	.word	0x00f42400

080058ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e28d      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8083 	beq.w	80059d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058cc:	4b94      	ldr	r3, [pc, #592]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d019      	beq.n	800590c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058d8:	4b91      	ldr	r3, [pc, #580]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f0:	d00c      	beq.n	800590c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058fa:	2b0c      	cmp	r3, #12
 80058fc:	d112      	bne.n	8005924 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fe:	4b88      	ldr	r3, [pc, #544]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800590a:	d10b      	bne.n	8005924 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	4b84      	ldr	r3, [pc, #528]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05b      	beq.n	80059d0 <HAL_RCC_OscConfig+0x124>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d157      	bne.n	80059d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e25a      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x90>
 800592e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7b      	ldr	r2, [pc, #492]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e01d      	b.n	8005978 <HAL_RCC_OscConfig+0xcc>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0xb4>
 8005946:	4b76      	ldr	r3, [pc, #472]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a75      	ldr	r2, [pc, #468]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800594c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b73      	ldr	r3, [pc, #460]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a72      	ldr	r2, [pc, #456]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0xcc>
 8005960:	4b6f      	ldr	r3, [pc, #444]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a6e      	ldr	r2, [pc, #440]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a6b      	ldr	r2, [pc, #428]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd fd54 	bl	800342c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fd fd50 	bl	800342c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e21f      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599a:	4b61      	ldr	r3, [pc, #388]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0xdc>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fd fd40 	bl	800342c <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fd fd3c 	bl	800342c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	@ 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e20b      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c2:	4b57      	ldr	r3, [pc, #348]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x104>
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d06f      	beq.n	8005abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059de:	4b50      	ldr	r3, [pc, #320]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d017      	beq.n	8005a1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d105      	bne.n	8005a02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a02:	4b47      	ldr	r3, [pc, #284]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d11c      	bne.n	8005a48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0e:	4b44      	ldr	r3, [pc, #272]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1a:	4b41      	ldr	r3, [pc, #260]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_RCC_OscConfig+0x186>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e1d3      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a32:	4b3b      	ldr	r3, [pc, #236]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4937      	ldr	r1, [pc, #220]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a46:	e03a      	b.n	8005abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a50:	4b34      	ldr	r3, [pc, #208]	@ (8005b24 <HAL_RCC_OscConfig+0x278>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fd fce9 	bl	800342c <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5e:	f7fd fce5 	bl	800342c <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e1b4      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	4b2b      	ldr	r3, [pc, #172]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7c:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4925      	ldr	r1, [pc, #148]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]
 8005a90:	e015      	b.n	8005abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a92:	4b24      	ldr	r3, [pc, #144]	@ (8005b24 <HAL_RCC_OscConfig+0x278>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fd fcc8 	bl	800342c <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fd fcc4 	bl	800342c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e193      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d036      	beq.n	8005b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ad2:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fd fca8 	bl	800342c <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fd fca4 	bl	800342c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e173      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x234>
 8005afe:	e01b      	b.n	8005b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b00:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b06:	f7fd fc91 	bl	800342c <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0c:	e00e      	b.n	8005b2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0e:	f7fd fc8d 	bl	800342c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d907      	bls.n	8005b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e15c      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	42470000 	.word	0x42470000
 8005b28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ea      	bne.n	8005b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8097 	beq.w	8005c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4a:	4b83      	ldr	r3, [pc, #524]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b66:	4b7c      	ldr	r3, [pc, #496]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b76:	4b79      	ldr	r3, [pc, #484]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d118      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b82:	4b76      	ldr	r3, [pc, #472]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a75      	ldr	r2, [pc, #468]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8e:	f7fd fc4d 	bl	800342c <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b96:	f7fd fc49 	bl	800342c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e118      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <HAL_RCC_OscConfig+0x31e>
 8005bbc:	4b66      	ldr	r3, [pc, #408]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	4a65      	ldr	r2, [pc, #404]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc8:	e01c      	b.n	8005c04 <HAL_RCC_OscConfig+0x358>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0x340>
 8005bd2:	4b61      	ldr	r3, [pc, #388]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd6:	4a60      	ldr	r2, [pc, #384]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bd8:	f043 0304 	orr.w	r3, r3, #4
 8005bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bde:	4b5e      	ldr	r3, [pc, #376]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be2:	4a5d      	ldr	r2, [pc, #372]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0x358>
 8005bec:	4b5a      	ldr	r3, [pc, #360]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf0:	4a59      	ldr	r2, [pc, #356]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf8:	4b57      	ldr	r3, [pc, #348]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfc:	4a56      	ldr	r2, [pc, #344]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bfe:	f023 0304 	bic.w	r3, r3, #4
 8005c02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fd fc0e 	bl	800342c <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c14:	f7fd fc0a 	bl	800342c <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e0d7      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ee      	beq.n	8005c14 <HAL_RCC_OscConfig+0x368>
 8005c36:	e014      	b.n	8005c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c38:	f7fd fbf8 	bl	800342c <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c40:	f7fd fbf4 	bl	800342c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e0c1      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c56:	4b40      	ldr	r3, [pc, #256]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1ee      	bne.n	8005c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c68:	4b3b      	ldr	r3, [pc, #236]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80ad 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c7e:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d060      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d145      	bne.n	8005d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b33      	ldr	r3, [pc, #204]	@ (8005d60 <HAL_RCC_OscConfig+0x4b4>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fd fbc8 	bl	800342c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fd fbc4 	bl	800342c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e093      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	4b29      	ldr	r3, [pc, #164]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	019b      	lsls	r3, r3, #6
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	061b      	lsls	r3, r3, #24
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	491b      	ldr	r1, [pc, #108]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <HAL_RCC_OscConfig+0x4b4>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf6:	f7fd fb99 	bl	800342c <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fd fb95 	bl	800342c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e064      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d10:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x452>
 8005d1c:	e05c      	b.n	8005dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	4b10      	ldr	r3, [pc, #64]	@ (8005d60 <HAL_RCC_OscConfig+0x4b4>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fd fb82 	bl	800342c <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fd fb7e 	bl	800342c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e04d      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x480>
 8005d4a:	e045      	b.n	8005dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e040      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d64:	4b1f      	ldr	r3, [pc, #124]	@ (8005de4 <HAL_RCC_OscConfig+0x538>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d030      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d129      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d122      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d119      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d10f      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800

08005de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e041      	b.n	8005e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fc fe5c 	bl	8002acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f000 fad8 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e041      	b.n	8005f1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f839 	bl	8005f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f000 fa89 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <HAL_TIM_PWM_Start+0x24>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	e022      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x6a>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d109      	bne.n	8005f76 <HAL_TIM_PWM_Start+0x3e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e015      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x6a>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x58>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e008      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x6a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e07c      	b.n	80060a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Start+0x82>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb8:	e013      	b.n	8005fe2 <HAL_TIM_PWM_Start+0xaa>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0x92>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc8:	e00b      	b.n	8005fe2 <HAL_TIM_PWM_Start+0xaa>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Start+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd8:	e003      	b.n	8005fe2 <HAL_TIM_PWM_Start+0xaa>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fcec 	bl	80069c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80060ac <HAL_TIM_PWM_Start+0x174>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_TIM_PWM_Start+0xcc>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80060b0 <HAL_TIM_PWM_Start+0x178>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <HAL_TIM_PWM_Start+0xd0>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_TIM_PWM_Start+0xd2>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a22      	ldr	r2, [pc, #136]	@ (80060ac <HAL_TIM_PWM_Start+0x174>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006030:	d01d      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1f      	ldr	r2, [pc, #124]	@ (80060b4 <HAL_TIM_PWM_Start+0x17c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1d      	ldr	r2, [pc, #116]	@ (80060b8 <HAL_TIM_PWM_Start+0x180>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1c      	ldr	r2, [pc, #112]	@ (80060bc <HAL_TIM_PWM_Start+0x184>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a16      	ldr	r2, [pc, #88]	@ (80060b0 <HAL_TIM_PWM_Start+0x178>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <HAL_TIM_PWM_Start+0x188>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_TIM_PWM_Start+0x136>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a16      	ldr	r2, [pc, #88]	@ (80060c4 <HAL_TIM_PWM_Start+0x18c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d111      	bne.n	8006092 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b06      	cmp	r3, #6
 800607e:	d010      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	e007      	b.n	80060a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40010400 	.word	0x40010400
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40001800 	.word	0x40001800

080060c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e0ae      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	f200 809f 	bhi.w	8006234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060f6:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006131 	.word	0x08006131
 8006100:	08006235 	.word	0x08006235
 8006104:	08006235 	.word	0x08006235
 8006108:	08006235 	.word	0x08006235
 800610c:	08006171 	.word	0x08006171
 8006110:	08006235 	.word	0x08006235
 8006114:	08006235 	.word	0x08006235
 8006118:	08006235 	.word	0x08006235
 800611c:	080061b3 	.word	0x080061b3
 8006120:	08006235 	.word	0x08006235
 8006124:	08006235 	.word	0x08006235
 8006128:	08006235 	.word	0x08006235
 800612c:	080061f3 	.word	0x080061f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f9fc 	bl	8006534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0208 	orr.w	r2, r2, #8
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0204 	bic.w	r2, r2, #4
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	619a      	str	r2, [r3, #24]
      break;
 800616e:	e064      	b.n	800623a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fa4c 	bl	8006614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800618a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800619a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6999      	ldr	r1, [r3, #24]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	021a      	lsls	r2, r3, #8
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	619a      	str	r2, [r3, #24]
      break;
 80061b0:	e043      	b.n	800623a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 faa1 	bl	8006700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0208 	orr.w	r2, r2, #8
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0204 	bic.w	r2, r2, #4
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	61da      	str	r2, [r3, #28]
      break;
 80061f0:	e023      	b.n	800623a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 faf5 	bl	80067e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800620c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800621c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69d9      	ldr	r1, [r3, #28]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	021a      	lsls	r2, r3, #8
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	61da      	str	r2, [r3, #28]
      break;
 8006232:	e002      	b.n	800623a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	75fb      	strb	r3, [r7, #23]
      break;
 8006238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIM_ConfigClockSource+0x1c>
 8006264:	2302      	movs	r3, #2
 8006266:	e0b4      	b.n	80063d2 <HAL_TIM_ConfigClockSource+0x186>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800628e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a0:	d03e      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0xd4>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a6:	f200 8087 	bhi.w	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	f000 8086 	beq.w	80063be <HAL_TIM_ConfigClockSource+0x172>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b6:	d87f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b70      	cmp	r3, #112	@ 0x70
 80062ba:	d01a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0xa6>
 80062bc:	2b70      	cmp	r3, #112	@ 0x70
 80062be:	d87b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b60      	cmp	r3, #96	@ 0x60
 80062c2:	d050      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x11a>
 80062c4:	2b60      	cmp	r3, #96	@ 0x60
 80062c6:	d877      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b50      	cmp	r3, #80	@ 0x50
 80062ca:	d03c      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0xfa>
 80062cc:	2b50      	cmp	r3, #80	@ 0x50
 80062ce:	d873      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b40      	cmp	r3, #64	@ 0x40
 80062d2:	d058      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x13a>
 80062d4:	2b40      	cmp	r3, #64	@ 0x40
 80062d6:	d86f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b30      	cmp	r3, #48	@ 0x30
 80062da:	d064      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062dc:	2b30      	cmp	r3, #48	@ 0x30
 80062de:	d86b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d060      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d867      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d05c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d05a      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	e062      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006302:	f000 fb41 	bl	8006988 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	609a      	str	r2, [r3, #8]
      break;
 800631e:	e04f      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006330:	f000 fb2a 	bl	8006988 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006342:	609a      	str	r2, [r3, #8]
      break;
 8006344:	e03c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	461a      	mov	r2, r3
 8006354:	f000 fa9e 	bl	8006894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2150      	movs	r1, #80	@ 0x50
 800635e:	4618      	mov	r0, r3
 8006360:	f000 faf7 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 8006364:	e02c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006372:	461a      	mov	r2, r3
 8006374:	f000 fabd 	bl	80068f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2160      	movs	r1, #96	@ 0x60
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fae7 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 8006384:	e01c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006392:	461a      	mov	r2, r3
 8006394:	f000 fa7e 	bl	8006894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2140      	movs	r1, #64	@ 0x40
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fad7 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 80063a4:	e00c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f000 face 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 80063b6:	e003      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a46      	ldr	r2, [pc, #280]	@ (8006508 <TIM_Base_SetConfig+0x12c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fa:	d00f      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a43      	ldr	r2, [pc, #268]	@ (800650c <TIM_Base_SetConfig+0x130>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a42      	ldr	r2, [pc, #264]	@ (8006510 <TIM_Base_SetConfig+0x134>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a41      	ldr	r2, [pc, #260]	@ (8006514 <TIM_Base_SetConfig+0x138>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a40      	ldr	r2, [pc, #256]	@ (8006518 <TIM_Base_SetConfig+0x13c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d108      	bne.n	800642e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a35      	ldr	r2, [pc, #212]	@ (8006508 <TIM_Base_SetConfig+0x12c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d02b      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643c:	d027      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a32      	ldr	r2, [pc, #200]	@ (800650c <TIM_Base_SetConfig+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d023      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a31      	ldr	r2, [pc, #196]	@ (8006510 <TIM_Base_SetConfig+0x134>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01f      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a30      	ldr	r2, [pc, #192]	@ (8006514 <TIM_Base_SetConfig+0x138>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01b      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2f      	ldr	r2, [pc, #188]	@ (8006518 <TIM_Base_SetConfig+0x13c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d017      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2e      	ldr	r2, [pc, #184]	@ (800651c <TIM_Base_SetConfig+0x140>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2d      	ldr	r2, [pc, #180]	@ (8006520 <TIM_Base_SetConfig+0x144>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2c      	ldr	r2, [pc, #176]	@ (8006524 <TIM_Base_SetConfig+0x148>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2b      	ldr	r2, [pc, #172]	@ (8006528 <TIM_Base_SetConfig+0x14c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2a      	ldr	r2, [pc, #168]	@ (800652c <TIM_Base_SetConfig+0x150>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a29      	ldr	r2, [pc, #164]	@ (8006530 <TIM_Base_SetConfig+0x154>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a10      	ldr	r2, [pc, #64]	@ (8006508 <TIM_Base_SetConfig+0x12c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a12      	ldr	r2, [pc, #72]	@ (8006518 <TIM_Base_SetConfig+0x13c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]
  }
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800
 8006528:	40001800 	.word	0x40001800
 800652c:	40001c00 	.word	0x40001c00
 8006530:	40002000 	.word	0x40002000

08006534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f023 0201 	bic.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 0302 	bic.w	r3, r3, #2
 800657c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a20      	ldr	r2, [pc, #128]	@ (800660c <TIM_OC1_SetConfig+0xd8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC1_SetConfig+0x64>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a1f      	ldr	r2, [pc, #124]	@ (8006610 <TIM_OC1_SetConfig+0xdc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10c      	bne.n	80065b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0308 	bic.w	r3, r3, #8
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 0304 	bic.w	r3, r3, #4
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a15      	ldr	r2, [pc, #84]	@ (800660c <TIM_OC1_SetConfig+0xd8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_OC1_SetConfig+0x8e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a14      	ldr	r2, [pc, #80]	@ (8006610 <TIM_OC1_SetConfig+0xdc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d111      	bne.n	80065e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40010000 	.word	0x40010000
 8006610:	40010400 	.word	0x40010400

08006614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f023 0210 	bic.w	r2, r3, #16
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800664a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0320 	bic.w	r3, r3, #32
 800665e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <TIM_OC2_SetConfig+0xe4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC2_SetConfig+0x68>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a21      	ldr	r2, [pc, #132]	@ (80066fc <TIM_OC2_SetConfig+0xe8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10d      	bne.n	8006698 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <TIM_OC2_SetConfig+0xe4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC2_SetConfig+0x94>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <TIM_OC2_SetConfig+0xe8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d113      	bne.n	80066d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40010400 	.word	0x40010400

08006700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a21      	ldr	r2, [pc, #132]	@ (80067e0 <TIM_OC3_SetConfig+0xe0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_OC3_SetConfig+0x66>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a20      	ldr	r2, [pc, #128]	@ (80067e4 <TIM_OC3_SetConfig+0xe4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10d      	bne.n	8006782 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800676c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a16      	ldr	r2, [pc, #88]	@ (80067e0 <TIM_OC3_SetConfig+0xe0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC3_SetConfig+0x92>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <TIM_OC3_SetConfig+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d113      	bne.n	80067ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	621a      	str	r2, [r3, #32]
}
 80067d4:	bf00      	nop
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400

080067e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	031b      	lsls	r3, r3, #12
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a12      	ldr	r2, [pc, #72]	@ (800688c <TIM_OC4_SetConfig+0xa4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC4_SetConfig+0x68>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a11      	ldr	r2, [pc, #68]	@ (8006890 <TIM_OC4_SetConfig+0xa8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d109      	bne.n	8006864 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40010400 	.word	0x40010400

08006894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f023 030a 	bic.w	r3, r3, #10
 80068d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b087      	sub	sp, #28
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f023 0210 	bic.w	r2, r3, #16
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800691c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800692e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	f043 0307 	orr.w	r3, r3, #7
 8006974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	609a      	str	r2, [r3, #8]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	021a      	lsls	r2, r3, #8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2201      	movs	r2, #1
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1a      	ldr	r2, [r3, #32]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	43db      	mvns	r3, r3
 80069ea:	401a      	ands	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006a00:	431a      	orrs	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
	...

08006a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e05a      	b.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a21      	ldr	r2, [pc, #132]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1a      	ldr	r2, [pc, #104]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a15      	ldr	r2, [pc, #84]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40010400 	.word	0x40010400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40001800 	.word	0x40001800

08006b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e03d      	b.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e042      	b.n	8006c48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc f812 	bl	8002c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	@ 0x24
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f973 	bl	8006ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	@ 0x28
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d175      	bne.n	8006d5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_UART_Transmit+0x2c>
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e06e      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2221      	movs	r2, #33	@ 0x21
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8e:	f7fc fbcd 	bl	800342c <HAL_GetTick>
 8006c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca8:	d108      	bne.n	8006cbc <HAL_UART_Transmit+0x6c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	e003      	b.n	8006cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc4:	e02e      	b.n	8006d24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2180      	movs	r1, #128	@ 0x80
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f848 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e03a      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	3302      	adds	r3, #2
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e007      	b.n	8006d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1cb      	bne.n	8006cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2140      	movs	r1, #64	@ 0x40
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f814 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e006      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	4613      	mov	r3, r2
 8006d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d76:	e03b      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d037      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d80:	f7fc fb54 	bl	800342c <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	6a3a      	ldr	r2, [r7, #32]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e03a      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d023      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b80      	cmp	r3, #128	@ 0x80
 8006dac:	d020      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	d01d      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d116      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f81d 	bl	8006e18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2208      	movs	r2, #8
 8006de2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e00f      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d0b4      	beq.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b095      	sub	sp, #84	@ 0x54
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e40:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e5      	bne.n	8006e54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d119      	bne.n	8006ec4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0310 	bic.w	r3, r3, #16
 8006ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eb0:	61ba      	str	r2, [r7, #24]
 8006eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6979      	ldr	r1, [r7, #20]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ed2:	bf00      	nop
 8006ed4:	3754      	adds	r7, #84	@ 0x54
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee4:	b0c0      	sub	sp, #256	@ 0x100
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	68d9      	ldr	r1, [r3, #12]
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	ea40 0301 	orr.w	r3, r0, r1
 8006f08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f38:	f021 010c 	bic.w	r1, r1, #12
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f46:	430b      	orrs	r3, r1
 8006f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5a:	6999      	ldr	r1, [r3, #24]
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	ea40 0301 	orr.w	r3, r0, r1
 8006f66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80071ac <UART_SetConfig+0x2cc>)
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d005      	beq.n	8006f80 <UART_SetConfig+0xa0>
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80071b0 <UART_SetConfig+0x2d0>)
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d104      	bne.n	8006f8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f80:	f7fe fa50 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8006f84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f88:	e003      	b.n	8006f92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f8a:	f7fe fa37 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8006f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9c:	f040 810c 	bne.w	80071b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006faa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	1891      	adds	r1, r2, r2
 8006fb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fba:	415b      	adcs	r3, r3
 8006fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	eb12 0801 	adds.w	r8, r2, r1
 8006fc8:	4629      	mov	r1, r5
 8006fca:	eb43 0901 	adc.w	r9, r3, r1
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe2:	4690      	mov	r8, r2
 8006fe4:	4699      	mov	r9, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	eb18 0303 	adds.w	r3, r8, r3
 8006fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	eb49 0303 	adc.w	r3, r9, r3
 8006ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007006:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800700a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800700e:	460b      	mov	r3, r1
 8007010:	18db      	adds	r3, r3, r3
 8007012:	653b      	str	r3, [r7, #80]	@ 0x50
 8007014:	4613      	mov	r3, r2
 8007016:	eb42 0303 	adc.w	r3, r2, r3
 800701a:	657b      	str	r3, [r7, #84]	@ 0x54
 800701c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007020:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007024:	f7f9 fe30 	bl	8000c88 <__aeabi_uldivmod>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4b61      	ldr	r3, [pc, #388]	@ (80071b4 <UART_SetConfig+0x2d4>)
 800702e:	fba3 2302 	umull	r2, r3, r3, r2
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	011c      	lsls	r4, r3, #4
 8007036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007040:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007044:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	1891      	adds	r1, r2, r2
 800704e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007050:	415b      	adcs	r3, r3
 8007052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007058:	4641      	mov	r1, r8
 800705a:	eb12 0a01 	adds.w	sl, r2, r1
 800705e:	4649      	mov	r1, r9
 8007060:	eb43 0b01 	adc.w	fp, r3, r1
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007070:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007078:	4692      	mov	sl, r2
 800707a:	469b      	mov	fp, r3
 800707c:	4643      	mov	r3, r8
 800707e:	eb1a 0303 	adds.w	r3, sl, r3
 8007082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007086:	464b      	mov	r3, r9
 8007088:	eb4b 0303 	adc.w	r3, fp, r3
 800708c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800709c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070a4:	460b      	mov	r3, r1
 80070a6:	18db      	adds	r3, r3, r3
 80070a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80070aa:	4613      	mov	r3, r2
 80070ac:	eb42 0303 	adc.w	r3, r2, r3
 80070b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070ba:	f7f9 fde5 	bl	8000c88 <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	4b3b      	ldr	r3, [pc, #236]	@ (80071b4 <UART_SetConfig+0x2d4>)
 80070c6:	fba3 2301 	umull	r2, r3, r3, r1
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2264      	movs	r2, #100	@ 0x64
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	1acb      	subs	r3, r1, r3
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070da:	4b36      	ldr	r3, [pc, #216]	@ (80071b4 <UART_SetConfig+0x2d4>)
 80070dc:	fba3 2302 	umull	r2, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070e8:	441c      	add	r4, r3
 80070ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070fc:	4642      	mov	r2, r8
 80070fe:	464b      	mov	r3, r9
 8007100:	1891      	adds	r1, r2, r2
 8007102:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007104:	415b      	adcs	r3, r3
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800710c:	4641      	mov	r1, r8
 800710e:	1851      	adds	r1, r2, r1
 8007110:	6339      	str	r1, [r7, #48]	@ 0x30
 8007112:	4649      	mov	r1, r9
 8007114:	414b      	adcs	r3, r1
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007124:	4659      	mov	r1, fp
 8007126:	00cb      	lsls	r3, r1, #3
 8007128:	4651      	mov	r1, sl
 800712a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712e:	4651      	mov	r1, sl
 8007130:	00ca      	lsls	r2, r1, #3
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	4603      	mov	r3, r0
 8007138:	4642      	mov	r2, r8
 800713a:	189b      	adds	r3, r3, r2
 800713c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007140:	464b      	mov	r3, r9
 8007142:	460a      	mov	r2, r1
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007158:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800715c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007160:	460b      	mov	r3, r1
 8007162:	18db      	adds	r3, r3, r3
 8007164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007166:	4613      	mov	r3, r2
 8007168:	eb42 0303 	adc.w	r3, r2, r3
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007172:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007176:	f7f9 fd87 	bl	8000c88 <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <UART_SetConfig+0x2d4>)
 8007180:	fba3 1302 	umull	r1, r3, r3, r2
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	2164      	movs	r1, #100	@ 0x64
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	3332      	adds	r3, #50	@ 0x32
 8007192:	4a08      	ldr	r2, [pc, #32]	@ (80071b4 <UART_SetConfig+0x2d4>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	f003 0207 	and.w	r2, r3, #7
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4422      	add	r2, r4
 80071a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071a8:	e106      	b.n	80073b8 <UART_SetConfig+0x4d8>
 80071aa:	bf00      	nop
 80071ac:	40011000 	.word	0x40011000
 80071b0:	40011400 	.word	0x40011400
 80071b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071ca:	4642      	mov	r2, r8
 80071cc:	464b      	mov	r3, r9
 80071ce:	1891      	adds	r1, r2, r2
 80071d0:	6239      	str	r1, [r7, #32]
 80071d2:	415b      	adcs	r3, r3
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071da:	4641      	mov	r1, r8
 80071dc:	1854      	adds	r4, r2, r1
 80071de:	4649      	mov	r1, r9
 80071e0:	eb43 0501 	adc.w	r5, r3, r1
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	00eb      	lsls	r3, r5, #3
 80071ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071f2:	00e2      	lsls	r2, r4, #3
 80071f4:	4614      	mov	r4, r2
 80071f6:	461d      	mov	r5, r3
 80071f8:	4643      	mov	r3, r8
 80071fa:	18e3      	adds	r3, r4, r3
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007200:	464b      	mov	r3, r9
 8007202:	eb45 0303 	adc.w	r3, r5, r3
 8007206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007216:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007226:	4629      	mov	r1, r5
 8007228:	008b      	lsls	r3, r1, #2
 800722a:	4621      	mov	r1, r4
 800722c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007230:	4621      	mov	r1, r4
 8007232:	008a      	lsls	r2, r1, #2
 8007234:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007238:	f7f9 fd26 	bl	8000c88 <__aeabi_uldivmod>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4b60      	ldr	r3, [pc, #384]	@ (80073c4 <UART_SetConfig+0x4e4>)
 8007242:	fba3 2302 	umull	r2, r3, r3, r2
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	011c      	lsls	r4, r3, #4
 800724a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724e:	2200      	movs	r2, #0
 8007250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007254:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007258:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	1891      	adds	r1, r2, r2
 8007262:	61b9      	str	r1, [r7, #24]
 8007264:	415b      	adcs	r3, r3
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800726c:	4641      	mov	r1, r8
 800726e:	1851      	adds	r1, r2, r1
 8007270:	6139      	str	r1, [r7, #16]
 8007272:	4649      	mov	r1, r9
 8007274:	414b      	adcs	r3, r1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007284:	4659      	mov	r1, fp
 8007286:	00cb      	lsls	r3, r1, #3
 8007288:	4651      	mov	r1, sl
 800728a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728e:	4651      	mov	r1, sl
 8007290:	00ca      	lsls	r2, r1, #3
 8007292:	4610      	mov	r0, r2
 8007294:	4619      	mov	r1, r3
 8007296:	4603      	mov	r3, r0
 8007298:	4642      	mov	r2, r8
 800729a:	189b      	adds	r3, r3, r2
 800729c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072a0:	464b      	mov	r3, r9
 80072a2:	460a      	mov	r2, r1
 80072a4:	eb42 0303 	adc.w	r3, r2, r3
 80072a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072c4:	4649      	mov	r1, r9
 80072c6:	008b      	lsls	r3, r1, #2
 80072c8:	4641      	mov	r1, r8
 80072ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ce:	4641      	mov	r1, r8
 80072d0:	008a      	lsls	r2, r1, #2
 80072d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072d6:	f7f9 fcd7 	bl	8000c88 <__aeabi_uldivmod>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	4b38      	ldr	r3, [pc, #224]	@ (80073c4 <UART_SetConfig+0x4e4>)
 80072e2:	fba3 2301 	umull	r2, r3, r3, r1
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	2264      	movs	r2, #100	@ 0x64
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	1acb      	subs	r3, r1, r3
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	3332      	adds	r3, #50	@ 0x32
 80072f4:	4a33      	ldr	r2, [pc, #204]	@ (80073c4 <UART_SetConfig+0x4e4>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007300:	441c      	add	r4, r3
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007306:	2200      	movs	r2, #0
 8007308:	673b      	str	r3, [r7, #112]	@ 0x70
 800730a:	677a      	str	r2, [r7, #116]	@ 0x74
 800730c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	1891      	adds	r1, r2, r2
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	415b      	adcs	r3, r3
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007320:	4641      	mov	r1, r8
 8007322:	1851      	adds	r1, r2, r1
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	4649      	mov	r1, r9
 8007328:	414b      	adcs	r3, r1
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007338:	4659      	mov	r1, fp
 800733a:	00cb      	lsls	r3, r1, #3
 800733c:	4651      	mov	r1, sl
 800733e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007342:	4651      	mov	r1, sl
 8007344:	00ca      	lsls	r2, r1, #3
 8007346:	4610      	mov	r0, r2
 8007348:	4619      	mov	r1, r3
 800734a:	4603      	mov	r3, r0
 800734c:	4642      	mov	r2, r8
 800734e:	189b      	adds	r3, r3, r2
 8007350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007352:	464b      	mov	r3, r9
 8007354:	460a      	mov	r2, r1
 8007356:	eb42 0303 	adc.w	r3, r2, r3
 800735a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	663b      	str	r3, [r7, #96]	@ 0x60
 8007366:	667a      	str	r2, [r7, #100]	@ 0x64
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007374:	4649      	mov	r1, r9
 8007376:	008b      	lsls	r3, r1, #2
 8007378:	4641      	mov	r1, r8
 800737a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737e:	4641      	mov	r1, r8
 8007380:	008a      	lsls	r2, r1, #2
 8007382:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007386:	f7f9 fc7f 	bl	8000c88 <__aeabi_uldivmod>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <UART_SetConfig+0x4e4>)
 8007390:	fba3 1302 	umull	r1, r3, r3, r2
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	2164      	movs	r1, #100	@ 0x64
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	3332      	adds	r3, #50	@ 0x32
 80073a2:	4a08      	ldr	r2, [pc, #32]	@ (80073c4 <UART_SetConfig+0x4e4>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4422      	add	r2, r4
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073be:	46bd      	mov	sp, r7
 80073c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073c4:	51eb851f 	.word	0x51eb851f

080073c8 <__cvt>:
 80073c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	ec57 6b10 	vmov	r6, r7, d0
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	460c      	mov	r4, r1
 80073d4:	4619      	mov	r1, r3
 80073d6:	463b      	mov	r3, r7
 80073d8:	bfbb      	ittet	lt
 80073da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073de:	461f      	movlt	r7, r3
 80073e0:	2300      	movge	r3, #0
 80073e2:	232d      	movlt	r3, #45	@ 0x2d
 80073e4:	700b      	strb	r3, [r1, #0]
 80073e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073ec:	4691      	mov	r9, r2
 80073ee:	f023 0820 	bic.w	r8, r3, #32
 80073f2:	bfbc      	itt	lt
 80073f4:	4632      	movlt	r2, r6
 80073f6:	4616      	movlt	r6, r2
 80073f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073fc:	d005      	beq.n	800740a <__cvt+0x42>
 80073fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007402:	d100      	bne.n	8007406 <__cvt+0x3e>
 8007404:	3401      	adds	r4, #1
 8007406:	2102      	movs	r1, #2
 8007408:	e000      	b.n	800740c <__cvt+0x44>
 800740a:	2103      	movs	r1, #3
 800740c:	ab03      	add	r3, sp, #12
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	ab02      	add	r3, sp, #8
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	ec47 6b10 	vmov	d0, r6, r7
 8007418:	4653      	mov	r3, sl
 800741a:	4622      	mov	r2, r4
 800741c:	f000 fe84 	bl	8008128 <_dtoa_r>
 8007420:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007424:	4605      	mov	r5, r0
 8007426:	d119      	bne.n	800745c <__cvt+0x94>
 8007428:	f019 0f01 	tst.w	r9, #1
 800742c:	d00e      	beq.n	800744c <__cvt+0x84>
 800742e:	eb00 0904 	add.w	r9, r0, r4
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4630      	mov	r0, r6
 8007438:	4639      	mov	r1, r7
 800743a:	f7f9 fb65 	bl	8000b08 <__aeabi_dcmpeq>
 800743e:	b108      	cbz	r0, 8007444 <__cvt+0x7c>
 8007440:	f8cd 900c 	str.w	r9, [sp, #12]
 8007444:	2230      	movs	r2, #48	@ 0x30
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	454b      	cmp	r3, r9
 800744a:	d31e      	bcc.n	800748a <__cvt+0xc2>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007450:	1b5b      	subs	r3, r3, r5
 8007452:	4628      	mov	r0, r5
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	b004      	add	sp, #16
 8007458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007460:	eb00 0904 	add.w	r9, r0, r4
 8007464:	d1e5      	bne.n	8007432 <__cvt+0x6a>
 8007466:	7803      	ldrb	r3, [r0, #0]
 8007468:	2b30      	cmp	r3, #48	@ 0x30
 800746a:	d10a      	bne.n	8007482 <__cvt+0xba>
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 fb48 	bl	8000b08 <__aeabi_dcmpeq>
 8007478:	b918      	cbnz	r0, 8007482 <__cvt+0xba>
 800747a:	f1c4 0401 	rsb	r4, r4, #1
 800747e:	f8ca 4000 	str.w	r4, [sl]
 8007482:	f8da 3000 	ldr.w	r3, [sl]
 8007486:	4499      	add	r9, r3
 8007488:	e7d3      	b.n	8007432 <__cvt+0x6a>
 800748a:	1c59      	adds	r1, r3, #1
 800748c:	9103      	str	r1, [sp, #12]
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	e7d9      	b.n	8007446 <__cvt+0x7e>

08007492 <__exponent>:
 8007492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007494:	2900      	cmp	r1, #0
 8007496:	bfba      	itte	lt
 8007498:	4249      	neglt	r1, r1
 800749a:	232d      	movlt	r3, #45	@ 0x2d
 800749c:	232b      	movge	r3, #43	@ 0x2b
 800749e:	2909      	cmp	r1, #9
 80074a0:	7002      	strb	r2, [r0, #0]
 80074a2:	7043      	strb	r3, [r0, #1]
 80074a4:	dd29      	ble.n	80074fa <__exponent+0x68>
 80074a6:	f10d 0307 	add.w	r3, sp, #7
 80074aa:	461d      	mov	r5, r3
 80074ac:	270a      	movs	r7, #10
 80074ae:	461a      	mov	r2, r3
 80074b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80074b4:	fb07 1416 	mls	r4, r7, r6, r1
 80074b8:	3430      	adds	r4, #48	@ 0x30
 80074ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074be:	460c      	mov	r4, r1
 80074c0:	2c63      	cmp	r4, #99	@ 0x63
 80074c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80074c6:	4631      	mov	r1, r6
 80074c8:	dcf1      	bgt.n	80074ae <__exponent+0x1c>
 80074ca:	3130      	adds	r1, #48	@ 0x30
 80074cc:	1e94      	subs	r4, r2, #2
 80074ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074d2:	1c41      	adds	r1, r0, #1
 80074d4:	4623      	mov	r3, r4
 80074d6:	42ab      	cmp	r3, r5
 80074d8:	d30a      	bcc.n	80074f0 <__exponent+0x5e>
 80074da:	f10d 0309 	add.w	r3, sp, #9
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	42ac      	cmp	r4, r5
 80074e2:	bf88      	it	hi
 80074e4:	2300      	movhi	r3, #0
 80074e6:	3302      	adds	r3, #2
 80074e8:	4403      	add	r3, r0
 80074ea:	1a18      	subs	r0, r3, r0
 80074ec:	b003      	add	sp, #12
 80074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074f8:	e7ed      	b.n	80074d6 <__exponent+0x44>
 80074fa:	2330      	movs	r3, #48	@ 0x30
 80074fc:	3130      	adds	r1, #48	@ 0x30
 80074fe:	7083      	strb	r3, [r0, #2]
 8007500:	70c1      	strb	r1, [r0, #3]
 8007502:	1d03      	adds	r3, r0, #4
 8007504:	e7f1      	b.n	80074ea <__exponent+0x58>
	...

08007508 <_printf_float>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	b08d      	sub	sp, #52	@ 0x34
 800750e:	460c      	mov	r4, r1
 8007510:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007514:	4616      	mov	r6, r2
 8007516:	461f      	mov	r7, r3
 8007518:	4605      	mov	r5, r0
 800751a:	f000 fcf5 	bl	8007f08 <_localeconv_r>
 800751e:	6803      	ldr	r3, [r0, #0]
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	4618      	mov	r0, r3
 8007524:	f7f8 fec4 	bl	80002b0 <strlen>
 8007528:	2300      	movs	r3, #0
 800752a:	930a      	str	r3, [sp, #40]	@ 0x28
 800752c:	f8d8 3000 	ldr.w	r3, [r8]
 8007530:	9005      	str	r0, [sp, #20]
 8007532:	3307      	adds	r3, #7
 8007534:	f023 0307 	bic.w	r3, r3, #7
 8007538:	f103 0208 	add.w	r2, r3, #8
 800753c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007540:	f8d4 b000 	ldr.w	fp, [r4]
 8007544:	f8c8 2000 	str.w	r2, [r8]
 8007548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800754c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007550:	9307      	str	r3, [sp, #28]
 8007552:	f8cd 8018 	str.w	r8, [sp, #24]
 8007556:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800755a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800755e:	4b9c      	ldr	r3, [pc, #624]	@ (80077d0 <_printf_float+0x2c8>)
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	f7f9 fb02 	bl	8000b6c <__aeabi_dcmpun>
 8007568:	bb70      	cbnz	r0, 80075c8 <_printf_float+0xc0>
 800756a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800756e:	4b98      	ldr	r3, [pc, #608]	@ (80077d0 <_printf_float+0x2c8>)
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	f7f9 fadc 	bl	8000b30 <__aeabi_dcmple>
 8007578:	bb30      	cbnz	r0, 80075c8 <_printf_float+0xc0>
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f9 facb 	bl	8000b1c <__aeabi_dcmplt>
 8007586:	b110      	cbz	r0, 800758e <_printf_float+0x86>
 8007588:	232d      	movs	r3, #45	@ 0x2d
 800758a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800758e:	4a91      	ldr	r2, [pc, #580]	@ (80077d4 <_printf_float+0x2cc>)
 8007590:	4b91      	ldr	r3, [pc, #580]	@ (80077d8 <_printf_float+0x2d0>)
 8007592:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007596:	bf94      	ite	ls
 8007598:	4690      	movls	r8, r2
 800759a:	4698      	movhi	r8, r3
 800759c:	2303      	movs	r3, #3
 800759e:	6123      	str	r3, [r4, #16]
 80075a0:	f02b 0304 	bic.w	r3, fp, #4
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	f04f 0900 	mov.w	r9, #0
 80075aa:	9700      	str	r7, [sp, #0]
 80075ac:	4633      	mov	r3, r6
 80075ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075b0:	4621      	mov	r1, r4
 80075b2:	4628      	mov	r0, r5
 80075b4:	f000 f9d2 	bl	800795c <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	f040 808d 	bne.w	80076d8 <_printf_float+0x1d0>
 80075be:	f04f 30ff 	mov.w	r0, #4294967295
 80075c2:	b00d      	add	sp, #52	@ 0x34
 80075c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c8:	4642      	mov	r2, r8
 80075ca:	464b      	mov	r3, r9
 80075cc:	4640      	mov	r0, r8
 80075ce:	4649      	mov	r1, r9
 80075d0:	f7f9 facc 	bl	8000b6c <__aeabi_dcmpun>
 80075d4:	b140      	cbz	r0, 80075e8 <_printf_float+0xe0>
 80075d6:	464b      	mov	r3, r9
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bfbc      	itt	lt
 80075dc:	232d      	movlt	r3, #45	@ 0x2d
 80075de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075e2:	4a7e      	ldr	r2, [pc, #504]	@ (80077dc <_printf_float+0x2d4>)
 80075e4:	4b7e      	ldr	r3, [pc, #504]	@ (80077e0 <_printf_float+0x2d8>)
 80075e6:	e7d4      	b.n	8007592 <_printf_float+0x8a>
 80075e8:	6863      	ldr	r3, [r4, #4]
 80075ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075ee:	9206      	str	r2, [sp, #24]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	d13b      	bne.n	800766c <_printf_float+0x164>
 80075f4:	2306      	movs	r3, #6
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075fc:	2300      	movs	r3, #0
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	ab0a      	add	r3, sp, #40	@ 0x28
 8007604:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007608:	ab09      	add	r3, sp, #36	@ 0x24
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	6861      	ldr	r1, [r4, #4]
 800760e:	ec49 8b10 	vmov	d0, r8, r9
 8007612:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007616:	4628      	mov	r0, r5
 8007618:	f7ff fed6 	bl	80073c8 <__cvt>
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007620:	2b47      	cmp	r3, #71	@ 0x47
 8007622:	4680      	mov	r8, r0
 8007624:	d129      	bne.n	800767a <_printf_float+0x172>
 8007626:	1cc8      	adds	r0, r1, #3
 8007628:	db02      	blt.n	8007630 <_printf_float+0x128>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	4299      	cmp	r1, r3
 800762e:	dd41      	ble.n	80076b4 <_printf_float+0x1ac>
 8007630:	f1aa 0a02 	sub.w	sl, sl, #2
 8007634:	fa5f fa8a 	uxtb.w	sl, sl
 8007638:	3901      	subs	r1, #1
 800763a:	4652      	mov	r2, sl
 800763c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007640:	9109      	str	r1, [sp, #36]	@ 0x24
 8007642:	f7ff ff26 	bl	8007492 <__exponent>
 8007646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007648:	1813      	adds	r3, r2, r0
 800764a:	2a01      	cmp	r2, #1
 800764c:	4681      	mov	r9, r0
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	dc02      	bgt.n	8007658 <_printf_float+0x150>
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	07d2      	lsls	r2, r2, #31
 8007656:	d501      	bpl.n	800765c <_printf_float+0x154>
 8007658:	3301      	adds	r3, #1
 800765a:	6123      	str	r3, [r4, #16]
 800765c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0a2      	beq.n	80075aa <_printf_float+0xa2>
 8007664:	232d      	movs	r3, #45	@ 0x2d
 8007666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800766a:	e79e      	b.n	80075aa <_printf_float+0xa2>
 800766c:	9a06      	ldr	r2, [sp, #24]
 800766e:	2a47      	cmp	r2, #71	@ 0x47
 8007670:	d1c2      	bne.n	80075f8 <_printf_float+0xf0>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1c0      	bne.n	80075f8 <_printf_float+0xf0>
 8007676:	2301      	movs	r3, #1
 8007678:	e7bd      	b.n	80075f6 <_printf_float+0xee>
 800767a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800767e:	d9db      	bls.n	8007638 <_printf_float+0x130>
 8007680:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007684:	d118      	bne.n	80076b8 <_printf_float+0x1b0>
 8007686:	2900      	cmp	r1, #0
 8007688:	6863      	ldr	r3, [r4, #4]
 800768a:	dd0b      	ble.n	80076a4 <_printf_float+0x19c>
 800768c:	6121      	str	r1, [r4, #16]
 800768e:	b913      	cbnz	r3, 8007696 <_printf_float+0x18e>
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	07d0      	lsls	r0, r2, #31
 8007694:	d502      	bpl.n	800769c <_printf_float+0x194>
 8007696:	3301      	adds	r3, #1
 8007698:	440b      	add	r3, r1
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800769e:	f04f 0900 	mov.w	r9, #0
 80076a2:	e7db      	b.n	800765c <_printf_float+0x154>
 80076a4:	b913      	cbnz	r3, 80076ac <_printf_float+0x1a4>
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	07d2      	lsls	r2, r2, #31
 80076aa:	d501      	bpl.n	80076b0 <_printf_float+0x1a8>
 80076ac:	3302      	adds	r3, #2
 80076ae:	e7f4      	b.n	800769a <_printf_float+0x192>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e7f2      	b.n	800769a <_printf_float+0x192>
 80076b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ba:	4299      	cmp	r1, r3
 80076bc:	db05      	blt.n	80076ca <_printf_float+0x1c2>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	6121      	str	r1, [r4, #16]
 80076c2:	07d8      	lsls	r0, r3, #31
 80076c4:	d5ea      	bpl.n	800769c <_printf_float+0x194>
 80076c6:	1c4b      	adds	r3, r1, #1
 80076c8:	e7e7      	b.n	800769a <_printf_float+0x192>
 80076ca:	2900      	cmp	r1, #0
 80076cc:	bfd4      	ite	le
 80076ce:	f1c1 0202 	rsble	r2, r1, #2
 80076d2:	2201      	movgt	r2, #1
 80076d4:	4413      	add	r3, r2
 80076d6:	e7e0      	b.n	800769a <_printf_float+0x192>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	055a      	lsls	r2, r3, #21
 80076dc:	d407      	bmi.n	80076ee <_printf_float+0x1e6>
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	4642      	mov	r2, r8
 80076e2:	4631      	mov	r1, r6
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b8      	blx	r7
 80076e8:	3001      	adds	r0, #1
 80076ea:	d12b      	bne.n	8007744 <_printf_float+0x23c>
 80076ec:	e767      	b.n	80075be <_printf_float+0xb6>
 80076ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076f2:	f240 80dd 	bls.w	80078b0 <_printf_float+0x3a8>
 80076f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076fa:	2200      	movs	r2, #0
 80076fc:	2300      	movs	r3, #0
 80076fe:	f7f9 fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8007702:	2800      	cmp	r0, #0
 8007704:	d033      	beq.n	800776e <_printf_float+0x266>
 8007706:	4a37      	ldr	r2, [pc, #220]	@ (80077e4 <_printf_float+0x2dc>)
 8007708:	2301      	movs	r3, #1
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f af54 	beq.w	80075be <_printf_float+0xb6>
 8007716:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800771a:	4543      	cmp	r3, r8
 800771c:	db02      	blt.n	8007724 <_printf_float+0x21c>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	07d8      	lsls	r0, r3, #31
 8007722:	d50f      	bpl.n	8007744 <_printf_float+0x23c>
 8007724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af45 	beq.w	80075be <_printf_float+0xb6>
 8007734:	f04f 0900 	mov.w	r9, #0
 8007738:	f108 38ff 	add.w	r8, r8, #4294967295
 800773c:	f104 0a1a 	add.w	sl, r4, #26
 8007740:	45c8      	cmp	r8, r9
 8007742:	dc09      	bgt.n	8007758 <_printf_float+0x250>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	079b      	lsls	r3, r3, #30
 8007748:	f100 8103 	bmi.w	8007952 <_printf_float+0x44a>
 800774c:	68e0      	ldr	r0, [r4, #12]
 800774e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007750:	4298      	cmp	r0, r3
 8007752:	bfb8      	it	lt
 8007754:	4618      	movlt	r0, r3
 8007756:	e734      	b.n	80075c2 <_printf_float+0xba>
 8007758:	2301      	movs	r3, #1
 800775a:	4652      	mov	r2, sl
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f af2b 	beq.w	80075be <_printf_float+0xb6>
 8007768:	f109 0901 	add.w	r9, r9, #1
 800776c:	e7e8      	b.n	8007740 <_printf_float+0x238>
 800776e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	dc39      	bgt.n	80077e8 <_printf_float+0x2e0>
 8007774:	4a1b      	ldr	r2, [pc, #108]	@ (80077e4 <_printf_float+0x2dc>)
 8007776:	2301      	movs	r3, #1
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af1d 	beq.w	80075be <_printf_float+0xb6>
 8007784:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007788:	ea59 0303 	orrs.w	r3, r9, r3
 800778c:	d102      	bne.n	8007794 <_printf_float+0x28c>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	07d9      	lsls	r1, r3, #31
 8007792:	d5d7      	bpl.n	8007744 <_printf_float+0x23c>
 8007794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af0d 	beq.w	80075be <_printf_float+0xb6>
 80077a4:	f04f 0a00 	mov.w	sl, #0
 80077a8:	f104 0b1a 	add.w	fp, r4, #26
 80077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ae:	425b      	negs	r3, r3
 80077b0:	4553      	cmp	r3, sl
 80077b2:	dc01      	bgt.n	80077b8 <_printf_float+0x2b0>
 80077b4:	464b      	mov	r3, r9
 80077b6:	e793      	b.n	80076e0 <_printf_float+0x1d8>
 80077b8:	2301      	movs	r3, #1
 80077ba:	465a      	mov	r2, fp
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f aefb 	beq.w	80075be <_printf_float+0xb6>
 80077c8:	f10a 0a01 	add.w	sl, sl, #1
 80077cc:	e7ee      	b.n	80077ac <_printf_float+0x2a4>
 80077ce:	bf00      	nop
 80077d0:	7fefffff 	.word	0x7fefffff
 80077d4:	0800b090 	.word	0x0800b090
 80077d8:	0800b094 	.word	0x0800b094
 80077dc:	0800b098 	.word	0x0800b098
 80077e0:	0800b09c 	.word	0x0800b09c
 80077e4:	0800b0a0 	.word	0x0800b0a0
 80077e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077ee:	4553      	cmp	r3, sl
 80077f0:	bfa8      	it	ge
 80077f2:	4653      	movge	r3, sl
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	4699      	mov	r9, r3
 80077f8:	dc36      	bgt.n	8007868 <_printf_float+0x360>
 80077fa:	f04f 0b00 	mov.w	fp, #0
 80077fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007802:	f104 021a 	add.w	r2, r4, #26
 8007806:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007808:	9306      	str	r3, [sp, #24]
 800780a:	eba3 0309 	sub.w	r3, r3, r9
 800780e:	455b      	cmp	r3, fp
 8007810:	dc31      	bgt.n	8007876 <_printf_float+0x36e>
 8007812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007814:	459a      	cmp	sl, r3
 8007816:	dc3a      	bgt.n	800788e <_printf_float+0x386>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	07da      	lsls	r2, r3, #31
 800781c:	d437      	bmi.n	800788e <_printf_float+0x386>
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	ebaa 0903 	sub.w	r9, sl, r3
 8007824:	9b06      	ldr	r3, [sp, #24]
 8007826:	ebaa 0303 	sub.w	r3, sl, r3
 800782a:	4599      	cmp	r9, r3
 800782c:	bfa8      	it	ge
 800782e:	4699      	movge	r9, r3
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	dc33      	bgt.n	800789e <_printf_float+0x396>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800783e:	f104 0b1a 	add.w	fp, r4, #26
 8007842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007844:	ebaa 0303 	sub.w	r3, sl, r3
 8007848:	eba3 0309 	sub.w	r3, r3, r9
 800784c:	4543      	cmp	r3, r8
 800784e:	f77f af79 	ble.w	8007744 <_printf_float+0x23c>
 8007852:	2301      	movs	r3, #1
 8007854:	465a      	mov	r2, fp
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f aeae 	beq.w	80075be <_printf_float+0xb6>
 8007862:	f108 0801 	add.w	r8, r8, #1
 8007866:	e7ec      	b.n	8007842 <_printf_float+0x33a>
 8007868:	4642      	mov	r2, r8
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	d1c2      	bne.n	80077fa <_printf_float+0x2f2>
 8007874:	e6a3      	b.n	80075be <_printf_float+0xb6>
 8007876:	2301      	movs	r3, #1
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	9206      	str	r2, [sp, #24]
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae9c 	beq.w	80075be <_printf_float+0xb6>
 8007886:	9a06      	ldr	r2, [sp, #24]
 8007888:	f10b 0b01 	add.w	fp, fp, #1
 800788c:	e7bb      	b.n	8007806 <_printf_float+0x2fe>
 800788e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	d1c0      	bne.n	800781e <_printf_float+0x316>
 800789c:	e68f      	b.n	80075be <_printf_float+0xb6>
 800789e:	9a06      	ldr	r2, [sp, #24]
 80078a0:	464b      	mov	r3, r9
 80078a2:	4442      	add	r2, r8
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	d1c3      	bne.n	8007836 <_printf_float+0x32e>
 80078ae:	e686      	b.n	80075be <_printf_float+0xb6>
 80078b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078b4:	f1ba 0f01 	cmp.w	sl, #1
 80078b8:	dc01      	bgt.n	80078be <_printf_float+0x3b6>
 80078ba:	07db      	lsls	r3, r3, #31
 80078bc:	d536      	bpl.n	800792c <_printf_float+0x424>
 80078be:	2301      	movs	r3, #1
 80078c0:	4642      	mov	r2, r8
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	f43f ae78 	beq.w	80075be <_printf_float+0xb6>
 80078ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae70 	beq.w	80075be <_printf_float+0xb6>
 80078de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ea:	f7f9 f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80078ee:	b9c0      	cbnz	r0, 8007922 <_printf_float+0x41a>
 80078f0:	4653      	mov	r3, sl
 80078f2:	f108 0201 	add.w	r2, r8, #1
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	d10c      	bne.n	800791a <_printf_float+0x412>
 8007900:	e65d      	b.n	80075be <_printf_float+0xb6>
 8007902:	2301      	movs	r3, #1
 8007904:	465a      	mov	r2, fp
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f ae56 	beq.w	80075be <_printf_float+0xb6>
 8007912:	f108 0801 	add.w	r8, r8, #1
 8007916:	45d0      	cmp	r8, sl
 8007918:	dbf3      	blt.n	8007902 <_printf_float+0x3fa>
 800791a:	464b      	mov	r3, r9
 800791c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007920:	e6df      	b.n	80076e2 <_printf_float+0x1da>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	f104 0b1a 	add.w	fp, r4, #26
 800792a:	e7f4      	b.n	8007916 <_printf_float+0x40e>
 800792c:	2301      	movs	r3, #1
 800792e:	4642      	mov	r2, r8
 8007930:	e7e1      	b.n	80078f6 <_printf_float+0x3ee>
 8007932:	2301      	movs	r3, #1
 8007934:	464a      	mov	r2, r9
 8007936:	4631      	mov	r1, r6
 8007938:	4628      	mov	r0, r5
 800793a:	47b8      	blx	r7
 800793c:	3001      	adds	r0, #1
 800793e:	f43f ae3e 	beq.w	80075be <_printf_float+0xb6>
 8007942:	f108 0801 	add.w	r8, r8, #1
 8007946:	68e3      	ldr	r3, [r4, #12]
 8007948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800794a:	1a5b      	subs	r3, r3, r1
 800794c:	4543      	cmp	r3, r8
 800794e:	dcf0      	bgt.n	8007932 <_printf_float+0x42a>
 8007950:	e6fc      	b.n	800774c <_printf_float+0x244>
 8007952:	f04f 0800 	mov.w	r8, #0
 8007956:	f104 0919 	add.w	r9, r4, #25
 800795a:	e7f4      	b.n	8007946 <_printf_float+0x43e>

0800795c <_printf_common>:
 800795c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	4616      	mov	r6, r2
 8007962:	4698      	mov	r8, r3
 8007964:	688a      	ldr	r2, [r1, #8]
 8007966:	690b      	ldr	r3, [r1, #16]
 8007968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800796c:	4293      	cmp	r3, r2
 800796e:	bfb8      	it	lt
 8007970:	4613      	movlt	r3, r2
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007978:	4607      	mov	r7, r0
 800797a:	460c      	mov	r4, r1
 800797c:	b10a      	cbz	r2, 8007982 <_printf_common+0x26>
 800797e:	3301      	adds	r3, #1
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	0699      	lsls	r1, r3, #26
 8007986:	bf42      	ittt	mi
 8007988:	6833      	ldrmi	r3, [r6, #0]
 800798a:	3302      	addmi	r3, #2
 800798c:	6033      	strmi	r3, [r6, #0]
 800798e:	6825      	ldr	r5, [r4, #0]
 8007990:	f015 0506 	ands.w	r5, r5, #6
 8007994:	d106      	bne.n	80079a4 <_printf_common+0x48>
 8007996:	f104 0a19 	add.w	sl, r4, #25
 800799a:	68e3      	ldr	r3, [r4, #12]
 800799c:	6832      	ldr	r2, [r6, #0]
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	dc26      	bgt.n	80079f2 <_printf_common+0x96>
 80079a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	3b00      	subs	r3, #0
 80079ac:	bf18      	it	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	0692      	lsls	r2, r2, #26
 80079b2:	d42b      	bmi.n	8007a0c <_printf_common+0xb0>
 80079b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079b8:	4641      	mov	r1, r8
 80079ba:	4638      	mov	r0, r7
 80079bc:	47c8      	blx	r9
 80079be:	3001      	adds	r0, #1
 80079c0:	d01e      	beq.n	8007a00 <_printf_common+0xa4>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	6922      	ldr	r2, [r4, #16]
 80079c6:	f003 0306 	and.w	r3, r3, #6
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	bf02      	ittt	eq
 80079ce:	68e5      	ldreq	r5, [r4, #12]
 80079d0:	6833      	ldreq	r3, [r6, #0]
 80079d2:	1aed      	subeq	r5, r5, r3
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	bf0c      	ite	eq
 80079d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079dc:	2500      	movne	r5, #0
 80079de:	4293      	cmp	r3, r2
 80079e0:	bfc4      	itt	gt
 80079e2:	1a9b      	subgt	r3, r3, r2
 80079e4:	18ed      	addgt	r5, r5, r3
 80079e6:	2600      	movs	r6, #0
 80079e8:	341a      	adds	r4, #26
 80079ea:	42b5      	cmp	r5, r6
 80079ec:	d11a      	bne.n	8007a24 <_printf_common+0xc8>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e008      	b.n	8007a04 <_printf_common+0xa8>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4652      	mov	r2, sl
 80079f6:	4641      	mov	r1, r8
 80079f8:	4638      	mov	r0, r7
 80079fa:	47c8      	blx	r9
 80079fc:	3001      	adds	r0, #1
 80079fe:	d103      	bne.n	8007a08 <_printf_common+0xac>
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a08:	3501      	adds	r5, #1
 8007a0a:	e7c6      	b.n	800799a <_printf_common+0x3e>
 8007a0c:	18e1      	adds	r1, r4, r3
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	2030      	movs	r0, #48	@ 0x30
 8007a12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a16:	4422      	add	r2, r4
 8007a18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a20:	3302      	adds	r3, #2
 8007a22:	e7c7      	b.n	80079b4 <_printf_common+0x58>
 8007a24:	2301      	movs	r3, #1
 8007a26:	4622      	mov	r2, r4
 8007a28:	4641      	mov	r1, r8
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	47c8      	blx	r9
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d0e6      	beq.n	8007a00 <_printf_common+0xa4>
 8007a32:	3601      	adds	r6, #1
 8007a34:	e7d9      	b.n	80079ea <_printf_common+0x8e>
	...

08007a38 <_printf_i>:
 8007a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	7e0f      	ldrb	r7, [r1, #24]
 8007a3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a40:	2f78      	cmp	r7, #120	@ 0x78
 8007a42:	4691      	mov	r9, r2
 8007a44:	4680      	mov	r8, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	469a      	mov	sl, r3
 8007a4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a4e:	d807      	bhi.n	8007a60 <_printf_i+0x28>
 8007a50:	2f62      	cmp	r7, #98	@ 0x62
 8007a52:	d80a      	bhi.n	8007a6a <_printf_i+0x32>
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	f000 80d2 	beq.w	8007bfe <_printf_i+0x1c6>
 8007a5a:	2f58      	cmp	r7, #88	@ 0x58
 8007a5c:	f000 80b9 	beq.w	8007bd2 <_printf_i+0x19a>
 8007a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a68:	e03a      	b.n	8007ae0 <_printf_i+0xa8>
 8007a6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a6e:	2b15      	cmp	r3, #21
 8007a70:	d8f6      	bhi.n	8007a60 <_printf_i+0x28>
 8007a72:	a101      	add	r1, pc, #4	@ (adr r1, 8007a78 <_printf_i+0x40>)
 8007a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007a61 	.word	0x08007a61
 8007a84:	08007a61 	.word	0x08007a61
 8007a88:	08007a61 	.word	0x08007a61
 8007a8c:	08007a61 	.word	0x08007a61
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007a61 	.word	0x08007a61
 8007a98:	08007a61 	.word	0x08007a61
 8007a9c:	08007a61 	.word	0x08007a61
 8007aa0:	08007a61 	.word	0x08007a61
 8007aa4:	08007be5 	.word	0x08007be5
 8007aa8:	08007b0f 	.word	0x08007b0f
 8007aac:	08007b9f 	.word	0x08007b9f
 8007ab0:	08007a61 	.word	0x08007a61
 8007ab4:	08007a61 	.word	0x08007a61
 8007ab8:	08007c07 	.word	0x08007c07
 8007abc:	08007a61 	.word	0x08007a61
 8007ac0:	08007b0f 	.word	0x08007b0f
 8007ac4:	08007a61 	.word	0x08007a61
 8007ac8:	08007a61 	.word	0x08007a61
 8007acc:	08007ba7 	.word	0x08007ba7
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	1d1a      	adds	r2, r3, #4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6032      	str	r2, [r6, #0]
 8007ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e09d      	b.n	8007c20 <_printf_i+0x1e8>
 8007ae4:	6833      	ldr	r3, [r6, #0]
 8007ae6:	6820      	ldr	r0, [r4, #0]
 8007ae8:	1d19      	adds	r1, r3, #4
 8007aea:	6031      	str	r1, [r6, #0]
 8007aec:	0606      	lsls	r6, r0, #24
 8007aee:	d501      	bpl.n	8007af4 <_printf_i+0xbc>
 8007af0:	681d      	ldr	r5, [r3, #0]
 8007af2:	e003      	b.n	8007afc <_printf_i+0xc4>
 8007af4:	0645      	lsls	r5, r0, #25
 8007af6:	d5fb      	bpl.n	8007af0 <_printf_i+0xb8>
 8007af8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	da03      	bge.n	8007b08 <_printf_i+0xd0>
 8007b00:	232d      	movs	r3, #45	@ 0x2d
 8007b02:	426d      	negs	r5, r5
 8007b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b08:	4859      	ldr	r0, [pc, #356]	@ (8007c70 <_printf_i+0x238>)
 8007b0a:	230a      	movs	r3, #10
 8007b0c:	e011      	b.n	8007b32 <_printf_i+0xfa>
 8007b0e:	6821      	ldr	r1, [r4, #0]
 8007b10:	6833      	ldr	r3, [r6, #0]
 8007b12:	0608      	lsls	r0, r1, #24
 8007b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b18:	d402      	bmi.n	8007b20 <_printf_i+0xe8>
 8007b1a:	0649      	lsls	r1, r1, #25
 8007b1c:	bf48      	it	mi
 8007b1e:	b2ad      	uxthmi	r5, r5
 8007b20:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b22:	4853      	ldr	r0, [pc, #332]	@ (8007c70 <_printf_i+0x238>)
 8007b24:	6033      	str	r3, [r6, #0]
 8007b26:	bf14      	ite	ne
 8007b28:	230a      	movne	r3, #10
 8007b2a:	2308      	moveq	r3, #8
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b32:	6866      	ldr	r6, [r4, #4]
 8007b34:	60a6      	str	r6, [r4, #8]
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	bfa2      	ittt	ge
 8007b3a:	6821      	ldrge	r1, [r4, #0]
 8007b3c:	f021 0104 	bicge.w	r1, r1, #4
 8007b40:	6021      	strge	r1, [r4, #0]
 8007b42:	b90d      	cbnz	r5, 8007b48 <_printf_i+0x110>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	d04b      	beq.n	8007be0 <_printf_i+0x1a8>
 8007b48:	4616      	mov	r6, r2
 8007b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b52:	5dc7      	ldrb	r7, [r0, r7]
 8007b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b58:	462f      	mov	r7, r5
 8007b5a:	42bb      	cmp	r3, r7
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	d9f4      	bls.n	8007b4a <_printf_i+0x112>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d10b      	bne.n	8007b7c <_printf_i+0x144>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07df      	lsls	r7, r3, #31
 8007b68:	d508      	bpl.n	8007b7c <_printf_i+0x144>
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	6861      	ldr	r1, [r4, #4]
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	bfde      	ittt	le
 8007b72:	2330      	movle	r3, #48	@ 0x30
 8007b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b7c:	1b92      	subs	r2, r2, r6
 8007b7e:	6122      	str	r2, [r4, #16]
 8007b80:	f8cd a000 	str.w	sl, [sp]
 8007b84:	464b      	mov	r3, r9
 8007b86:	aa03      	add	r2, sp, #12
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f7ff fee6 	bl	800795c <_printf_common>
 8007b90:	3001      	adds	r0, #1
 8007b92:	d14a      	bne.n	8007c2a <_printf_i+0x1f2>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	b004      	add	sp, #16
 8007b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	f043 0320 	orr.w	r3, r3, #32
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	4833      	ldr	r0, [pc, #204]	@ (8007c74 <_printf_i+0x23c>)
 8007ba8:	2778      	movs	r7, #120	@ 0x78
 8007baa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	6831      	ldr	r1, [r6, #0]
 8007bb2:	061f      	lsls	r7, r3, #24
 8007bb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bb8:	d402      	bmi.n	8007bc0 <_printf_i+0x188>
 8007bba:	065f      	lsls	r7, r3, #25
 8007bbc:	bf48      	it	mi
 8007bbe:	b2ad      	uxthmi	r5, r5
 8007bc0:	6031      	str	r1, [r6, #0]
 8007bc2:	07d9      	lsls	r1, r3, #31
 8007bc4:	bf44      	itt	mi
 8007bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8007bca:	6023      	strmi	r3, [r4, #0]
 8007bcc:	b11d      	cbz	r5, 8007bd6 <_printf_i+0x19e>
 8007bce:	2310      	movs	r3, #16
 8007bd0:	e7ac      	b.n	8007b2c <_printf_i+0xf4>
 8007bd2:	4827      	ldr	r0, [pc, #156]	@ (8007c70 <_printf_i+0x238>)
 8007bd4:	e7e9      	b.n	8007baa <_printf_i+0x172>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	f023 0320 	bic.w	r3, r3, #32
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	e7f6      	b.n	8007bce <_printf_i+0x196>
 8007be0:	4616      	mov	r6, r2
 8007be2:	e7bd      	b.n	8007b60 <_printf_i+0x128>
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	6825      	ldr	r5, [r4, #0]
 8007be8:	6961      	ldr	r1, [r4, #20]
 8007bea:	1d18      	adds	r0, r3, #4
 8007bec:	6030      	str	r0, [r6, #0]
 8007bee:	062e      	lsls	r6, r5, #24
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_i+0x1c0>
 8007bf4:	6019      	str	r1, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <_printf_i+0x1c6>
 8007bf8:	0668      	lsls	r0, r5, #25
 8007bfa:	d5fb      	bpl.n	8007bf4 <_printf_i+0x1bc>
 8007bfc:	8019      	strh	r1, [r3, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	4616      	mov	r6, r2
 8007c04:	e7bc      	b.n	8007b80 <_printf_i+0x148>
 8007c06:	6833      	ldr	r3, [r6, #0]
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	6032      	str	r2, [r6, #0]
 8007c0c:	681e      	ldr	r6, [r3, #0]
 8007c0e:	6862      	ldr	r2, [r4, #4]
 8007c10:	2100      	movs	r1, #0
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7f8 fafc 	bl	8000210 <memchr>
 8007c18:	b108      	cbz	r0, 8007c1e <_printf_i+0x1e6>
 8007c1a:	1b80      	subs	r0, r0, r6
 8007c1c:	6060      	str	r0, [r4, #4]
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	2300      	movs	r3, #0
 8007c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c28:	e7aa      	b.n	8007b80 <_printf_i+0x148>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4640      	mov	r0, r8
 8007c32:	47d0      	blx	sl
 8007c34:	3001      	adds	r0, #1
 8007c36:	d0ad      	beq.n	8007b94 <_printf_i+0x15c>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	079b      	lsls	r3, r3, #30
 8007c3c:	d413      	bmi.n	8007c66 <_printf_i+0x22e>
 8007c3e:	68e0      	ldr	r0, [r4, #12]
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	4298      	cmp	r0, r3
 8007c44:	bfb8      	it	lt
 8007c46:	4618      	movlt	r0, r3
 8007c48:	e7a6      	b.n	8007b98 <_printf_i+0x160>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	47d0      	blx	sl
 8007c54:	3001      	adds	r0, #1
 8007c56:	d09d      	beq.n	8007b94 <_printf_i+0x15c>
 8007c58:	3501      	adds	r5, #1
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	9903      	ldr	r1, [sp, #12]
 8007c5e:	1a5b      	subs	r3, r3, r1
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dcf2      	bgt.n	8007c4a <_printf_i+0x212>
 8007c64:	e7eb      	b.n	8007c3e <_printf_i+0x206>
 8007c66:	2500      	movs	r5, #0
 8007c68:	f104 0619 	add.w	r6, r4, #25
 8007c6c:	e7f5      	b.n	8007c5a <_printf_i+0x222>
 8007c6e:	bf00      	nop
 8007c70:	0800b0a2 	.word	0x0800b0a2
 8007c74:	0800b0b3 	.word	0x0800b0b3

08007c78 <std>:
 8007c78:	2300      	movs	r3, #0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c86:	6083      	str	r3, [r0, #8]
 8007c88:	8181      	strh	r1, [r0, #12]
 8007c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c8c:	81c2      	strh	r2, [r0, #14]
 8007c8e:	6183      	str	r3, [r0, #24]
 8007c90:	4619      	mov	r1, r3
 8007c92:	2208      	movs	r2, #8
 8007c94:	305c      	adds	r0, #92	@ 0x5c
 8007c96:	f000 f92e 	bl	8007ef6 <memset>
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd0 <std+0x58>)
 8007c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <std+0x5c>)
 8007ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd8 <std+0x60>)
 8007ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cdc <std+0x64>)
 8007ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007caa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <std+0x68>)
 8007cac:	6224      	str	r4, [r4, #32]
 8007cae:	429c      	cmp	r4, r3
 8007cb0:	d006      	beq.n	8007cc0 <std+0x48>
 8007cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cb6:	4294      	cmp	r4, r2
 8007cb8:	d002      	beq.n	8007cc0 <std+0x48>
 8007cba:	33d0      	adds	r3, #208	@ 0xd0
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	d105      	bne.n	8007ccc <std+0x54>
 8007cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc8:	f000 b992 	b.w	8007ff0 <__retarget_lock_init_recursive>
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	bf00      	nop
 8007cd0:	08007e3d 	.word	0x08007e3d
 8007cd4:	08007e5f 	.word	0x08007e5f
 8007cd8:	08007e97 	.word	0x08007e97
 8007cdc:	08007ebb 	.word	0x08007ebb
 8007ce0:	200009d8 	.word	0x200009d8

08007ce4 <stdio_exit_handler>:
 8007ce4:	4a02      	ldr	r2, [pc, #8]	@ (8007cf0 <stdio_exit_handler+0xc>)
 8007ce6:	4903      	ldr	r1, [pc, #12]	@ (8007cf4 <stdio_exit_handler+0x10>)
 8007ce8:	4803      	ldr	r0, [pc, #12]	@ (8007cf8 <stdio_exit_handler+0x14>)
 8007cea:	f000 b869 	b.w	8007dc0 <_fwalk_sglue>
 8007cee:	bf00      	nop
 8007cf0:	20000010 	.word	0x20000010
 8007cf4:	0800996d 	.word	0x0800996d
 8007cf8:	20000020 	.word	0x20000020

08007cfc <cleanup_stdio>:
 8007cfc:	6841      	ldr	r1, [r0, #4]
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007d30 <cleanup_stdio+0x34>)
 8007d00:	4299      	cmp	r1, r3
 8007d02:	b510      	push	{r4, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	d001      	beq.n	8007d0c <cleanup_stdio+0x10>
 8007d08:	f001 fe30 	bl	800996c <_fflush_r>
 8007d0c:	68a1      	ldr	r1, [r4, #8]
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <cleanup_stdio+0x38>)
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d002      	beq.n	8007d1a <cleanup_stdio+0x1e>
 8007d14:	4620      	mov	r0, r4
 8007d16:	f001 fe29 	bl	800996c <_fflush_r>
 8007d1a:	68e1      	ldr	r1, [r4, #12]
 8007d1c:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <cleanup_stdio+0x3c>)
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	d004      	beq.n	8007d2c <cleanup_stdio+0x30>
 8007d22:	4620      	mov	r0, r4
 8007d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d28:	f001 be20 	b.w	800996c <_fflush_r>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	bf00      	nop
 8007d30:	200009d8 	.word	0x200009d8
 8007d34:	20000a40 	.word	0x20000a40
 8007d38:	20000aa8 	.word	0x20000aa8

08007d3c <global_stdio_init.part.0>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d6c <global_stdio_init.part.0+0x30>)
 8007d40:	4c0b      	ldr	r4, [pc, #44]	@ (8007d70 <global_stdio_init.part.0+0x34>)
 8007d42:	4a0c      	ldr	r2, [pc, #48]	@ (8007d74 <global_stdio_init.part.0+0x38>)
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	4620      	mov	r0, r4
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	f7ff ff94 	bl	8007c78 <std>
 8007d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d54:	2201      	movs	r2, #1
 8007d56:	2109      	movs	r1, #9
 8007d58:	f7ff ff8e 	bl	8007c78 <std>
 8007d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d60:	2202      	movs	r2, #2
 8007d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d66:	2112      	movs	r1, #18
 8007d68:	f7ff bf86 	b.w	8007c78 <std>
 8007d6c:	20000b10 	.word	0x20000b10
 8007d70:	200009d8 	.word	0x200009d8
 8007d74:	08007ce5 	.word	0x08007ce5

08007d78 <__sfp_lock_acquire>:
 8007d78:	4801      	ldr	r0, [pc, #4]	@ (8007d80 <__sfp_lock_acquire+0x8>)
 8007d7a:	f000 b93a 	b.w	8007ff2 <__retarget_lock_acquire_recursive>
 8007d7e:	bf00      	nop
 8007d80:	20000b19 	.word	0x20000b19

08007d84 <__sfp_lock_release>:
 8007d84:	4801      	ldr	r0, [pc, #4]	@ (8007d8c <__sfp_lock_release+0x8>)
 8007d86:	f000 b935 	b.w	8007ff4 <__retarget_lock_release_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	20000b19 	.word	0x20000b19

08007d90 <__sinit>:
 8007d90:	b510      	push	{r4, lr}
 8007d92:	4604      	mov	r4, r0
 8007d94:	f7ff fff0 	bl	8007d78 <__sfp_lock_acquire>
 8007d98:	6a23      	ldr	r3, [r4, #32]
 8007d9a:	b11b      	cbz	r3, 8007da4 <__sinit+0x14>
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da0:	f7ff bff0 	b.w	8007d84 <__sfp_lock_release>
 8007da4:	4b04      	ldr	r3, [pc, #16]	@ (8007db8 <__sinit+0x28>)
 8007da6:	6223      	str	r3, [r4, #32]
 8007da8:	4b04      	ldr	r3, [pc, #16]	@ (8007dbc <__sinit+0x2c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f5      	bne.n	8007d9c <__sinit+0xc>
 8007db0:	f7ff ffc4 	bl	8007d3c <global_stdio_init.part.0>
 8007db4:	e7f2      	b.n	8007d9c <__sinit+0xc>
 8007db6:	bf00      	nop
 8007db8:	08007cfd 	.word	0x08007cfd
 8007dbc:	20000b10 	.word	0x20000b10

08007dc0 <_fwalk_sglue>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	4688      	mov	r8, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	2600      	movs	r6, #0
 8007dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd4:	d505      	bpl.n	8007de2 <_fwalk_sglue+0x22>
 8007dd6:	6824      	ldr	r4, [r4, #0]
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d1f7      	bne.n	8007dcc <_fwalk_sglue+0xc>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d907      	bls.n	8007df8 <_fwalk_sglue+0x38>
 8007de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dec:	3301      	adds	r3, #1
 8007dee:	d003      	beq.n	8007df8 <_fwalk_sglue+0x38>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4638      	mov	r0, r7
 8007df4:	47c0      	blx	r8
 8007df6:	4306      	orrs	r6, r0
 8007df8:	3568      	adds	r5, #104	@ 0x68
 8007dfa:	e7e9      	b.n	8007dd0 <_fwalk_sglue+0x10>

08007dfc <siprintf>:
 8007dfc:	b40e      	push	{r1, r2, r3}
 8007dfe:	b500      	push	{lr}
 8007e00:	b09c      	sub	sp, #112	@ 0x70
 8007e02:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e04:	9002      	str	r0, [sp, #8]
 8007e06:	9006      	str	r0, [sp, #24]
 8007e08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e0c:	4809      	ldr	r0, [pc, #36]	@ (8007e34 <siprintf+0x38>)
 8007e0e:	9107      	str	r1, [sp, #28]
 8007e10:	9104      	str	r1, [sp, #16]
 8007e12:	4909      	ldr	r1, [pc, #36]	@ (8007e38 <siprintf+0x3c>)
 8007e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e18:	9105      	str	r1, [sp, #20]
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	a902      	add	r1, sp, #8
 8007e20:	f001 fc24 	bl	800966c <_svfiprintf_r>
 8007e24:	9b02      	ldr	r3, [sp, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	b01c      	add	sp, #112	@ 0x70
 8007e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e30:	b003      	add	sp, #12
 8007e32:	4770      	bx	lr
 8007e34:	2000001c 	.word	0x2000001c
 8007e38:	ffff0208 	.word	0xffff0208

08007e3c <__sread>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	f000 f886 	bl	8007f54 <_read_r>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	bfab      	itete	ge
 8007e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e50:	181b      	addge	r3, r3, r0
 8007e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e56:	bfac      	ite	ge
 8007e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e5a:	81a3      	strhlt	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__swrite>:
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	461f      	mov	r7, r3
 8007e64:	898b      	ldrh	r3, [r1, #12]
 8007e66:	05db      	lsls	r3, r3, #23
 8007e68:	4605      	mov	r5, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	d505      	bpl.n	8007e7c <__swrite+0x1e>
 8007e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e74:	2302      	movs	r3, #2
 8007e76:	2200      	movs	r2, #0
 8007e78:	f000 f85a 	bl	8007f30 <_lseek_r>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	f000 b871 	b.w	8007f78 <_write_r>

08007e96 <__sseek>:
 8007e96:	b510      	push	{r4, lr}
 8007e98:	460c      	mov	r4, r1
 8007e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9e:	f000 f847 	bl	8007f30 <_lseek_r>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	bf15      	itete	ne
 8007ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007eb2:	81a3      	strheq	r3, [r4, #12]
 8007eb4:	bf18      	it	ne
 8007eb6:	81a3      	strhne	r3, [r4, #12]
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <__sclose>:
 8007eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebe:	f000 b827 	b.w	8007f10 <_close_r>

08007ec2 <memmove>:
 8007ec2:	4288      	cmp	r0, r1
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	eb01 0402 	add.w	r4, r1, r2
 8007eca:	d902      	bls.n	8007ed2 <memmove+0x10>
 8007ecc:	4284      	cmp	r4, r0
 8007ece:	4623      	mov	r3, r4
 8007ed0:	d807      	bhi.n	8007ee2 <memmove+0x20>
 8007ed2:	1e43      	subs	r3, r0, #1
 8007ed4:	42a1      	cmp	r1, r4
 8007ed6:	d008      	beq.n	8007eea <memmove+0x28>
 8007ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007edc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ee0:	e7f8      	b.n	8007ed4 <memmove+0x12>
 8007ee2:	4402      	add	r2, r0
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	428a      	cmp	r2, r1
 8007ee8:	d100      	bne.n	8007eec <memmove+0x2a>
 8007eea:	bd10      	pop	{r4, pc}
 8007eec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ef0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ef4:	e7f7      	b.n	8007ee6 <memmove+0x24>

08007ef6 <memset>:
 8007ef6:	4402      	add	r2, r0
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d100      	bne.n	8007f00 <memset+0xa>
 8007efe:	4770      	bx	lr
 8007f00:	f803 1b01 	strb.w	r1, [r3], #1
 8007f04:	e7f9      	b.n	8007efa <memset+0x4>
	...

08007f08 <_localeconv_r>:
 8007f08:	4800      	ldr	r0, [pc, #0]	@ (8007f0c <_localeconv_r+0x4>)
 8007f0a:	4770      	bx	lr
 8007f0c:	2000015c 	.word	0x2000015c

08007f10 <_close_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d06      	ldr	r5, [pc, #24]	@ (8007f2c <_close_r+0x1c>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	f7fa ff43 	bl	8002da6 <_close>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_close_r+0x1a>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_close_r+0x1a>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20000b14 	.word	0x20000b14

08007f30 <_lseek_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d07      	ldr	r5, [pc, #28]	@ (8007f50 <_lseek_r+0x20>)
 8007f34:	4604      	mov	r4, r0
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7fa ff58 	bl	8002df4 <_lseek>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_lseek_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_lseek_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	20000b14 	.word	0x20000b14

08007f54 <_read_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	@ (8007f74 <_read_r+0x20>)
 8007f58:	4604      	mov	r4, r0
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f7fa fee6 	bl	8002d34 <_read>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_read_r+0x1e>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_read_r+0x1e>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	20000b14 	.word	0x20000b14

08007f78 <_write_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	@ (8007f98 <_write_r+0x20>)
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7fa fef1 	bl	8002d6e <_write>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_write_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_write_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20000b14 	.word	0x20000b14

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	@ (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	2000001c 	.word	0x2000001c

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe0 <__libc_init_array+0x38>)
 8007fac:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe4 <__libc_init_array+0x3c>)
 8007fae:	1b64      	subs	r4, r4, r5
 8007fb0:	10a4      	asrs	r4, r4, #2
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8007fe8 <__libc_init_array+0x40>)
 8007fba:	4c0c      	ldr	r4, [pc, #48]	@ (8007fec <__libc_init_array+0x44>)
 8007fbc:	f002 fc16 	bl	800a7ec <_init>
 8007fc0:	1b64      	subs	r4, r4, r5
 8007fc2:	10a4      	asrs	r4, r4, #2
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	0800b420 	.word	0x0800b420
 8007fe4:	0800b420 	.word	0x0800b420
 8007fe8:	0800b420 	.word	0x0800b420
 8007fec:	0800b424 	.word	0x0800b424

08007ff0 <__retarget_lock_init_recursive>:
 8007ff0:	4770      	bx	lr

08007ff2 <__retarget_lock_acquire_recursive>:
 8007ff2:	4770      	bx	lr

08007ff4 <__retarget_lock_release_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <memcpy>:
 8007ff6:	440a      	add	r2, r1
 8007ff8:	4291      	cmp	r1, r2
 8007ffa:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ffe:	d100      	bne.n	8008002 <memcpy+0xc>
 8008000:	4770      	bx	lr
 8008002:	b510      	push	{r4, lr}
 8008004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800c:	4291      	cmp	r1, r2
 800800e:	d1f9      	bne.n	8008004 <memcpy+0xe>
 8008010:	bd10      	pop	{r4, pc}

08008012 <quorem>:
 8008012:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008016:	6903      	ldr	r3, [r0, #16]
 8008018:	690c      	ldr	r4, [r1, #16]
 800801a:	42a3      	cmp	r3, r4
 800801c:	4607      	mov	r7, r0
 800801e:	db7e      	blt.n	800811e <quorem+0x10c>
 8008020:	3c01      	subs	r4, #1
 8008022:	f101 0814 	add.w	r8, r1, #20
 8008026:	00a3      	lsls	r3, r4, #2
 8008028:	f100 0514 	add.w	r5, r0, #20
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800803c:	3301      	adds	r3, #1
 800803e:	429a      	cmp	r2, r3
 8008040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008044:	fbb2 f6f3 	udiv	r6, r2, r3
 8008048:	d32e      	bcc.n	80080a8 <quorem+0x96>
 800804a:	f04f 0a00 	mov.w	sl, #0
 800804e:	46c4      	mov	ip, r8
 8008050:	46ae      	mov	lr, r5
 8008052:	46d3      	mov	fp, sl
 8008054:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008058:	b298      	uxth	r0, r3
 800805a:	fb06 a000 	mla	r0, r6, r0, sl
 800805e:	0c02      	lsrs	r2, r0, #16
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	fb06 2303 	mla	r3, r6, r3, r2
 8008066:	f8de 2000 	ldr.w	r2, [lr]
 800806a:	b280      	uxth	r0, r0
 800806c:	b292      	uxth	r2, r2
 800806e:	1a12      	subs	r2, r2, r0
 8008070:	445a      	add	r2, fp
 8008072:	f8de 0000 	ldr.w	r0, [lr]
 8008076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800807a:	b29b      	uxth	r3, r3
 800807c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008080:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008084:	b292      	uxth	r2, r2
 8008086:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800808a:	45e1      	cmp	r9, ip
 800808c:	f84e 2b04 	str.w	r2, [lr], #4
 8008090:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008094:	d2de      	bcs.n	8008054 <quorem+0x42>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	58eb      	ldr	r3, [r5, r3]
 800809a:	b92b      	cbnz	r3, 80080a8 <quorem+0x96>
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	3b04      	subs	r3, #4
 80080a0:	429d      	cmp	r5, r3
 80080a2:	461a      	mov	r2, r3
 80080a4:	d32f      	bcc.n	8008106 <quorem+0xf4>
 80080a6:	613c      	str	r4, [r7, #16]
 80080a8:	4638      	mov	r0, r7
 80080aa:	f001 f97b 	bl	80093a4 <__mcmp>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	db25      	blt.n	80080fe <quorem+0xec>
 80080b2:	4629      	mov	r1, r5
 80080b4:	2000      	movs	r0, #0
 80080b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80080ba:	f8d1 c000 	ldr.w	ip, [r1]
 80080be:	fa1f fe82 	uxth.w	lr, r2
 80080c2:	fa1f f38c 	uxth.w	r3, ip
 80080c6:	eba3 030e 	sub.w	r3, r3, lr
 80080ca:	4403      	add	r3, r0
 80080cc:	0c12      	lsrs	r2, r2, #16
 80080ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080dc:	45c1      	cmp	r9, r8
 80080de:	f841 3b04 	str.w	r3, [r1], #4
 80080e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080e6:	d2e6      	bcs.n	80080b6 <quorem+0xa4>
 80080e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080f0:	b922      	cbnz	r2, 80080fc <quorem+0xea>
 80080f2:	3b04      	subs	r3, #4
 80080f4:	429d      	cmp	r5, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	d30b      	bcc.n	8008112 <quorem+0x100>
 80080fa:	613c      	str	r4, [r7, #16]
 80080fc:	3601      	adds	r6, #1
 80080fe:	4630      	mov	r0, r6
 8008100:	b003      	add	sp, #12
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	3b04      	subs	r3, #4
 800810a:	2a00      	cmp	r2, #0
 800810c:	d1cb      	bne.n	80080a6 <quorem+0x94>
 800810e:	3c01      	subs	r4, #1
 8008110:	e7c6      	b.n	80080a0 <quorem+0x8e>
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	3b04      	subs	r3, #4
 8008116:	2a00      	cmp	r2, #0
 8008118:	d1ef      	bne.n	80080fa <quorem+0xe8>
 800811a:	3c01      	subs	r4, #1
 800811c:	e7ea      	b.n	80080f4 <quorem+0xe2>
 800811e:	2000      	movs	r0, #0
 8008120:	e7ee      	b.n	8008100 <quorem+0xee>
 8008122:	0000      	movs	r0, r0
 8008124:	0000      	movs	r0, r0
	...

08008128 <_dtoa_r>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	69c7      	ldr	r7, [r0, #28]
 800812e:	b099      	sub	sp, #100	@ 0x64
 8008130:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008134:	ec55 4b10 	vmov	r4, r5, d0
 8008138:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800813a:	9109      	str	r1, [sp, #36]	@ 0x24
 800813c:	4683      	mov	fp, r0
 800813e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008140:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008142:	b97f      	cbnz	r7, 8008164 <_dtoa_r+0x3c>
 8008144:	2010      	movs	r0, #16
 8008146:	f000 fdfd 	bl	8008d44 <malloc>
 800814a:	4602      	mov	r2, r0
 800814c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008150:	b920      	cbnz	r0, 800815c <_dtoa_r+0x34>
 8008152:	4ba7      	ldr	r3, [pc, #668]	@ (80083f0 <_dtoa_r+0x2c8>)
 8008154:	21ef      	movs	r1, #239	@ 0xef
 8008156:	48a7      	ldr	r0, [pc, #668]	@ (80083f4 <_dtoa_r+0x2cc>)
 8008158:	f001 fc40 	bl	80099dc <__assert_func>
 800815c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008160:	6007      	str	r7, [r0, #0]
 8008162:	60c7      	str	r7, [r0, #12]
 8008164:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	b159      	cbz	r1, 8008184 <_dtoa_r+0x5c>
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	604a      	str	r2, [r1, #4]
 8008170:	2301      	movs	r3, #1
 8008172:	4093      	lsls	r3, r2
 8008174:	608b      	str	r3, [r1, #8]
 8008176:	4658      	mov	r0, fp
 8008178:	f000 feda 	bl	8008f30 <_Bfree>
 800817c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	1e2b      	subs	r3, r5, #0
 8008186:	bfb9      	ittee	lt
 8008188:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800818c:	9303      	strlt	r3, [sp, #12]
 800818e:	2300      	movge	r3, #0
 8008190:	6033      	strge	r3, [r6, #0]
 8008192:	9f03      	ldr	r7, [sp, #12]
 8008194:	4b98      	ldr	r3, [pc, #608]	@ (80083f8 <_dtoa_r+0x2d0>)
 8008196:	bfbc      	itt	lt
 8008198:	2201      	movlt	r2, #1
 800819a:	6032      	strlt	r2, [r6, #0]
 800819c:	43bb      	bics	r3, r7
 800819e:	d112      	bne.n	80081c6 <_dtoa_r+0x9e>
 80081a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80081a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081ac:	4323      	orrs	r3, r4
 80081ae:	f000 854d 	beq.w	8008c4c <_dtoa_r+0xb24>
 80081b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800840c <_dtoa_r+0x2e4>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 854f 	beq.w	8008c5c <_dtoa_r+0xb34>
 80081be:	f10a 0303 	add.w	r3, sl, #3
 80081c2:	f000 bd49 	b.w	8008c58 <_dtoa_r+0xb30>
 80081c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	ec51 0b17 	vmov	r0, r1, d7
 80081d0:	2300      	movs	r3, #0
 80081d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80081d6:	f7f8 fc97 	bl	8000b08 <__aeabi_dcmpeq>
 80081da:	4680      	mov	r8, r0
 80081dc:	b158      	cbz	r0, 80081f6 <_dtoa_r+0xce>
 80081de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80081e0:	2301      	movs	r3, #1
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081e6:	b113      	cbz	r3, 80081ee <_dtoa_r+0xc6>
 80081e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80081ea:	4b84      	ldr	r3, [pc, #528]	@ (80083fc <_dtoa_r+0x2d4>)
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008410 <_dtoa_r+0x2e8>
 80081f2:	f000 bd33 	b.w	8008c5c <_dtoa_r+0xb34>
 80081f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80081fa:	aa16      	add	r2, sp, #88	@ 0x58
 80081fc:	a917      	add	r1, sp, #92	@ 0x5c
 80081fe:	4658      	mov	r0, fp
 8008200:	f001 f980 	bl	8009504 <__d2b>
 8008204:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008208:	4681      	mov	r9, r0
 800820a:	2e00      	cmp	r6, #0
 800820c:	d077      	beq.n	80082fe <_dtoa_r+0x1d6>
 800820e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008210:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800821c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008220:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008224:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008228:	4619      	mov	r1, r3
 800822a:	2200      	movs	r2, #0
 800822c:	4b74      	ldr	r3, [pc, #464]	@ (8008400 <_dtoa_r+0x2d8>)
 800822e:	f7f8 f84b 	bl	80002c8 <__aeabi_dsub>
 8008232:	a369      	add	r3, pc, #420	@ (adr r3, 80083d8 <_dtoa_r+0x2b0>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 f9fe 	bl	8000638 <__aeabi_dmul>
 800823c:	a368      	add	r3, pc, #416	@ (adr r3, 80083e0 <_dtoa_r+0x2b8>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f843 	bl	80002cc <__adddf3>
 8008246:	4604      	mov	r4, r0
 8008248:	4630      	mov	r0, r6
 800824a:	460d      	mov	r5, r1
 800824c:	f7f8 f98a 	bl	8000564 <__aeabi_i2d>
 8008250:	a365      	add	r3, pc, #404	@ (adr r3, 80083e8 <_dtoa_r+0x2c0>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f9ef 	bl	8000638 <__aeabi_dmul>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 f833 	bl	80002cc <__adddf3>
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	f7f8 fc95 	bl	8000b98 <__aeabi_d2iz>
 800826e:	2200      	movs	r2, #0
 8008270:	4607      	mov	r7, r0
 8008272:	2300      	movs	r3, #0
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 fc50 	bl	8000b1c <__aeabi_dcmplt>
 800827c:	b140      	cbz	r0, 8008290 <_dtoa_r+0x168>
 800827e:	4638      	mov	r0, r7
 8008280:	f7f8 f970 	bl	8000564 <__aeabi_i2d>
 8008284:	4622      	mov	r2, r4
 8008286:	462b      	mov	r3, r5
 8008288:	f7f8 fc3e 	bl	8000b08 <__aeabi_dcmpeq>
 800828c:	b900      	cbnz	r0, 8008290 <_dtoa_r+0x168>
 800828e:	3f01      	subs	r7, #1
 8008290:	2f16      	cmp	r7, #22
 8008292:	d851      	bhi.n	8008338 <_dtoa_r+0x210>
 8008294:	4b5b      	ldr	r3, [pc, #364]	@ (8008404 <_dtoa_r+0x2dc>)
 8008296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800829a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082a2:	f7f8 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d048      	beq.n	800833c <_dtoa_r+0x214>
 80082aa:	3f01      	subs	r7, #1
 80082ac:	2300      	movs	r3, #0
 80082ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80082b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80082b2:	1b9b      	subs	r3, r3, r6
 80082b4:	1e5a      	subs	r2, r3, #1
 80082b6:	bf44      	itt	mi
 80082b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80082bc:	2300      	movmi	r3, #0
 80082be:	9208      	str	r2, [sp, #32]
 80082c0:	bf54      	ite	pl
 80082c2:	f04f 0800 	movpl.w	r8, #0
 80082c6:	9308      	strmi	r3, [sp, #32]
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	db39      	blt.n	8008340 <_dtoa_r+0x218>
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80082d0:	443b      	add	r3, r7
 80082d2:	9308      	str	r3, [sp, #32]
 80082d4:	2300      	movs	r3, #0
 80082d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d864      	bhi.n	80083a8 <_dtoa_r+0x280>
 80082de:	2b05      	cmp	r3, #5
 80082e0:	bfc4      	itt	gt
 80082e2:	3b04      	subgt	r3, #4
 80082e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80082e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e8:	f1a3 0302 	sub.w	r3, r3, #2
 80082ec:	bfcc      	ite	gt
 80082ee:	2400      	movgt	r4, #0
 80082f0:	2401      	movle	r4, #1
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d863      	bhi.n	80083be <_dtoa_r+0x296>
 80082f6:	e8df f003 	tbb	[pc, r3]
 80082fa:	372a      	.short	0x372a
 80082fc:	5535      	.short	0x5535
 80082fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008302:	441e      	add	r6, r3
 8008304:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008308:	2b20      	cmp	r3, #32
 800830a:	bfc1      	itttt	gt
 800830c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008310:	409f      	lslgt	r7, r3
 8008312:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008316:	fa24 f303 	lsrgt.w	r3, r4, r3
 800831a:	bfd6      	itet	le
 800831c:	f1c3 0320 	rsble	r3, r3, #32
 8008320:	ea47 0003 	orrgt.w	r0, r7, r3
 8008324:	fa04 f003 	lslle.w	r0, r4, r3
 8008328:	f7f8 f90c 	bl	8000544 <__aeabi_ui2d>
 800832c:	2201      	movs	r2, #1
 800832e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008332:	3e01      	subs	r6, #1
 8008334:	9214      	str	r2, [sp, #80]	@ 0x50
 8008336:	e777      	b.n	8008228 <_dtoa_r+0x100>
 8008338:	2301      	movs	r3, #1
 800833a:	e7b8      	b.n	80082ae <_dtoa_r+0x186>
 800833c:	9012      	str	r0, [sp, #72]	@ 0x48
 800833e:	e7b7      	b.n	80082b0 <_dtoa_r+0x188>
 8008340:	427b      	negs	r3, r7
 8008342:	930a      	str	r3, [sp, #40]	@ 0x28
 8008344:	2300      	movs	r3, #0
 8008346:	eba8 0807 	sub.w	r8, r8, r7
 800834a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800834c:	e7c4      	b.n	80082d8 <_dtoa_r+0x1b0>
 800834e:	2300      	movs	r3, #0
 8008350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc35      	bgt.n	80083c4 <_dtoa_r+0x29c>
 8008358:	2301      	movs	r3, #1
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	9307      	str	r3, [sp, #28]
 800835e:	461a      	mov	r2, r3
 8008360:	920e      	str	r2, [sp, #56]	@ 0x38
 8008362:	e00b      	b.n	800837c <_dtoa_r+0x254>
 8008364:	2301      	movs	r3, #1
 8008366:	e7f3      	b.n	8008350 <_dtoa_r+0x228>
 8008368:	2300      	movs	r3, #0
 800836a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800836c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	2b01      	cmp	r3, #1
 8008376:	9307      	str	r3, [sp, #28]
 8008378:	bfb8      	it	lt
 800837a:	2301      	movlt	r3, #1
 800837c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008380:	2100      	movs	r1, #0
 8008382:	2204      	movs	r2, #4
 8008384:	f102 0514 	add.w	r5, r2, #20
 8008388:	429d      	cmp	r5, r3
 800838a:	d91f      	bls.n	80083cc <_dtoa_r+0x2a4>
 800838c:	6041      	str	r1, [r0, #4]
 800838e:	4658      	mov	r0, fp
 8008390:	f000 fd8e 	bl	8008eb0 <_Balloc>
 8008394:	4682      	mov	sl, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d13c      	bne.n	8008414 <_dtoa_r+0x2ec>
 800839a:	4b1b      	ldr	r3, [pc, #108]	@ (8008408 <_dtoa_r+0x2e0>)
 800839c:	4602      	mov	r2, r0
 800839e:	f240 11af 	movw	r1, #431	@ 0x1af
 80083a2:	e6d8      	b.n	8008156 <_dtoa_r+0x2e>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e7e0      	b.n	800836a <_dtoa_r+0x242>
 80083a8:	2401      	movs	r4, #1
 80083aa:	2300      	movs	r3, #0
 80083ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083b0:	f04f 33ff 	mov.w	r3, #4294967295
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2312      	movs	r3, #18
 80083bc:	e7d0      	b.n	8008360 <_dtoa_r+0x238>
 80083be:	2301      	movs	r3, #1
 80083c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083c2:	e7f5      	b.n	80083b0 <_dtoa_r+0x288>
 80083c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	9307      	str	r3, [sp, #28]
 80083ca:	e7d7      	b.n	800837c <_dtoa_r+0x254>
 80083cc:	3101      	adds	r1, #1
 80083ce:	0052      	lsls	r2, r2, #1
 80083d0:	e7d8      	b.n	8008384 <_dtoa_r+0x25c>
 80083d2:	bf00      	nop
 80083d4:	f3af 8000 	nop.w
 80083d8:	636f4361 	.word	0x636f4361
 80083dc:	3fd287a7 	.word	0x3fd287a7
 80083e0:	8b60c8b3 	.word	0x8b60c8b3
 80083e4:	3fc68a28 	.word	0x3fc68a28
 80083e8:	509f79fb 	.word	0x509f79fb
 80083ec:	3fd34413 	.word	0x3fd34413
 80083f0:	0800b0d1 	.word	0x0800b0d1
 80083f4:	0800b0e8 	.word	0x0800b0e8
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	0800b0a1 	.word	0x0800b0a1
 8008400:	3ff80000 	.word	0x3ff80000
 8008404:	0800b1e0 	.word	0x0800b1e0
 8008408:	0800b140 	.word	0x0800b140
 800840c:	0800b0cd 	.word	0x0800b0cd
 8008410:	0800b0a0 	.word	0x0800b0a0
 8008414:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008418:	6018      	str	r0, [r3, #0]
 800841a:	9b07      	ldr	r3, [sp, #28]
 800841c:	2b0e      	cmp	r3, #14
 800841e:	f200 80a4 	bhi.w	800856a <_dtoa_r+0x442>
 8008422:	2c00      	cmp	r4, #0
 8008424:	f000 80a1 	beq.w	800856a <_dtoa_r+0x442>
 8008428:	2f00      	cmp	r7, #0
 800842a:	dd33      	ble.n	8008494 <_dtoa_r+0x36c>
 800842c:	4bad      	ldr	r3, [pc, #692]	@ (80086e4 <_dtoa_r+0x5bc>)
 800842e:	f007 020f 	and.w	r2, r7, #15
 8008432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008436:	ed93 7b00 	vldr	d7, [r3]
 800843a:	05f8      	lsls	r0, r7, #23
 800843c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008440:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008444:	d516      	bpl.n	8008474 <_dtoa_r+0x34c>
 8008446:	4ba8      	ldr	r3, [pc, #672]	@ (80086e8 <_dtoa_r+0x5c0>)
 8008448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800844c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008450:	f7f8 fa1c 	bl	800088c <__aeabi_ddiv>
 8008454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008458:	f004 040f 	and.w	r4, r4, #15
 800845c:	2603      	movs	r6, #3
 800845e:	4da2      	ldr	r5, [pc, #648]	@ (80086e8 <_dtoa_r+0x5c0>)
 8008460:	b954      	cbnz	r4, 8008478 <_dtoa_r+0x350>
 8008462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846a:	f7f8 fa0f 	bl	800088c <__aeabi_ddiv>
 800846e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008472:	e028      	b.n	80084c6 <_dtoa_r+0x39e>
 8008474:	2602      	movs	r6, #2
 8008476:	e7f2      	b.n	800845e <_dtoa_r+0x336>
 8008478:	07e1      	lsls	r1, r4, #31
 800847a:	d508      	bpl.n	800848e <_dtoa_r+0x366>
 800847c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008480:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008484:	f7f8 f8d8 	bl	8000638 <__aeabi_dmul>
 8008488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848c:	3601      	adds	r6, #1
 800848e:	1064      	asrs	r4, r4, #1
 8008490:	3508      	adds	r5, #8
 8008492:	e7e5      	b.n	8008460 <_dtoa_r+0x338>
 8008494:	f000 80d2 	beq.w	800863c <_dtoa_r+0x514>
 8008498:	427c      	negs	r4, r7
 800849a:	4b92      	ldr	r3, [pc, #584]	@ (80086e4 <_dtoa_r+0x5bc>)
 800849c:	4d92      	ldr	r5, [pc, #584]	@ (80086e8 <_dtoa_r+0x5c0>)
 800849e:	f004 020f 	and.w	r2, r4, #15
 80084a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084ae:	f7f8 f8c3 	bl	8000638 <__aeabi_dmul>
 80084b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b6:	1124      	asrs	r4, r4, #4
 80084b8:	2300      	movs	r3, #0
 80084ba:	2602      	movs	r6, #2
 80084bc:	2c00      	cmp	r4, #0
 80084be:	f040 80b2 	bne.w	8008626 <_dtoa_r+0x4fe>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1d3      	bne.n	800846e <_dtoa_r+0x346>
 80084c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 80b7 	beq.w	8008640 <_dtoa_r+0x518>
 80084d2:	4b86      	ldr	r3, [pc, #536]	@ (80086ec <_dtoa_r+0x5c4>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4620      	mov	r0, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	f7f8 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	f000 80ae 	beq.w	8008640 <_dtoa_r+0x518>
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 80aa 	beq.w	8008640 <_dtoa_r+0x518>
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dd37      	ble.n	8008562 <_dtoa_r+0x43a>
 80084f2:	1e7b      	subs	r3, r7, #1
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	4620      	mov	r0, r4
 80084f8:	4b7d      	ldr	r3, [pc, #500]	@ (80086f0 <_dtoa_r+0x5c8>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f8 f89b 	bl	8000638 <__aeabi_dmul>
 8008502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008506:	9c00      	ldr	r4, [sp, #0]
 8008508:	3601      	adds	r6, #1
 800850a:	4630      	mov	r0, r6
 800850c:	f7f8 f82a 	bl	8000564 <__aeabi_i2d>
 8008510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008514:	f7f8 f890 	bl	8000638 <__aeabi_dmul>
 8008518:	4b76      	ldr	r3, [pc, #472]	@ (80086f4 <_dtoa_r+0x5cc>)
 800851a:	2200      	movs	r2, #0
 800851c:	f7f7 fed6 	bl	80002cc <__adddf3>
 8008520:	4605      	mov	r5, r0
 8008522:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008526:	2c00      	cmp	r4, #0
 8008528:	f040 808d 	bne.w	8008646 <_dtoa_r+0x51e>
 800852c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008530:	4b71      	ldr	r3, [pc, #452]	@ (80086f8 <_dtoa_r+0x5d0>)
 8008532:	2200      	movs	r2, #0
 8008534:	f7f7 fec8 	bl	80002c8 <__aeabi_dsub>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008540:	462a      	mov	r2, r5
 8008542:	4633      	mov	r3, r6
 8008544:	f7f8 fb08 	bl	8000b58 <__aeabi_dcmpgt>
 8008548:	2800      	cmp	r0, #0
 800854a:	f040 828b 	bne.w	8008a64 <_dtoa_r+0x93c>
 800854e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008552:	462a      	mov	r2, r5
 8008554:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008558:	f7f8 fae0 	bl	8000b1c <__aeabi_dcmplt>
 800855c:	2800      	cmp	r0, #0
 800855e:	f040 8128 	bne.w	80087b2 <_dtoa_r+0x68a>
 8008562:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008566:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800856a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800856c:	2b00      	cmp	r3, #0
 800856e:	f2c0 815a 	blt.w	8008826 <_dtoa_r+0x6fe>
 8008572:	2f0e      	cmp	r7, #14
 8008574:	f300 8157 	bgt.w	8008826 <_dtoa_r+0x6fe>
 8008578:	4b5a      	ldr	r3, [pc, #360]	@ (80086e4 <_dtoa_r+0x5bc>)
 800857a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800857e:	ed93 7b00 	vldr	d7, [r3]
 8008582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	ed8d 7b00 	vstr	d7, [sp]
 800858a:	da03      	bge.n	8008594 <_dtoa_r+0x46c>
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f340 8101 	ble.w	8008796 <_dtoa_r+0x66e>
 8008594:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008598:	4656      	mov	r6, sl
 800859a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f8 f973 	bl	800088c <__aeabi_ddiv>
 80085a6:	f7f8 faf7 	bl	8000b98 <__aeabi_d2iz>
 80085aa:	4680      	mov	r8, r0
 80085ac:	f7f7 ffda 	bl	8000564 <__aeabi_i2d>
 80085b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b4:	f7f8 f840 	bl	8000638 <__aeabi_dmul>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4620      	mov	r0, r4
 80085be:	4629      	mov	r1, r5
 80085c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085c4:	f7f7 fe80 	bl	80002c8 <__aeabi_dsub>
 80085c8:	f806 4b01 	strb.w	r4, [r6], #1
 80085cc:	9d07      	ldr	r5, [sp, #28]
 80085ce:	eba6 040a 	sub.w	r4, r6, sl
 80085d2:	42a5      	cmp	r5, r4
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	f040 8117 	bne.w	800880a <_dtoa_r+0x6e2>
 80085dc:	f7f7 fe76 	bl	80002cc <__adddf3>
 80085e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085e4:	4604      	mov	r4, r0
 80085e6:	460d      	mov	r5, r1
 80085e8:	f7f8 fab6 	bl	8000b58 <__aeabi_dcmpgt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f040 80f9 	bne.w	80087e4 <_dtoa_r+0x6bc>
 80085f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085f6:	4620      	mov	r0, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f8 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 80085fe:	b118      	cbz	r0, 8008608 <_dtoa_r+0x4e0>
 8008600:	f018 0f01 	tst.w	r8, #1
 8008604:	f040 80ee 	bne.w	80087e4 <_dtoa_r+0x6bc>
 8008608:	4649      	mov	r1, r9
 800860a:	4658      	mov	r0, fp
 800860c:	f000 fc90 	bl	8008f30 <_Bfree>
 8008610:	2300      	movs	r3, #0
 8008612:	7033      	strb	r3, [r6, #0]
 8008614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008616:	3701      	adds	r7, #1
 8008618:	601f      	str	r7, [r3, #0]
 800861a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 831d 	beq.w	8008c5c <_dtoa_r+0xb34>
 8008622:	601e      	str	r6, [r3, #0]
 8008624:	e31a      	b.n	8008c5c <_dtoa_r+0xb34>
 8008626:	07e2      	lsls	r2, r4, #31
 8008628:	d505      	bpl.n	8008636 <_dtoa_r+0x50e>
 800862a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800862e:	f7f8 f803 	bl	8000638 <__aeabi_dmul>
 8008632:	3601      	adds	r6, #1
 8008634:	2301      	movs	r3, #1
 8008636:	1064      	asrs	r4, r4, #1
 8008638:	3508      	adds	r5, #8
 800863a:	e73f      	b.n	80084bc <_dtoa_r+0x394>
 800863c:	2602      	movs	r6, #2
 800863e:	e742      	b.n	80084c6 <_dtoa_r+0x39e>
 8008640:	9c07      	ldr	r4, [sp, #28]
 8008642:	9704      	str	r7, [sp, #16]
 8008644:	e761      	b.n	800850a <_dtoa_r+0x3e2>
 8008646:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <_dtoa_r+0x5bc>)
 8008648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800864a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800864e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008652:	4454      	add	r4, sl
 8008654:	2900      	cmp	r1, #0
 8008656:	d053      	beq.n	8008700 <_dtoa_r+0x5d8>
 8008658:	4928      	ldr	r1, [pc, #160]	@ (80086fc <_dtoa_r+0x5d4>)
 800865a:	2000      	movs	r0, #0
 800865c:	f7f8 f916 	bl	800088c <__aeabi_ddiv>
 8008660:	4633      	mov	r3, r6
 8008662:	462a      	mov	r2, r5
 8008664:	f7f7 fe30 	bl	80002c8 <__aeabi_dsub>
 8008668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800866c:	4656      	mov	r6, sl
 800866e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008672:	f7f8 fa91 	bl	8000b98 <__aeabi_d2iz>
 8008676:	4605      	mov	r5, r0
 8008678:	f7f7 ff74 	bl	8000564 <__aeabi_i2d>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008684:	f7f7 fe20 	bl	80002c8 <__aeabi_dsub>
 8008688:	3530      	adds	r5, #48	@ 0x30
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008692:	f806 5b01 	strb.w	r5, [r6], #1
 8008696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800869a:	f7f8 fa3f 	bl	8000b1c <__aeabi_dcmplt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d171      	bne.n	8008786 <_dtoa_r+0x65e>
 80086a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a6:	4911      	ldr	r1, [pc, #68]	@ (80086ec <_dtoa_r+0x5c4>)
 80086a8:	2000      	movs	r0, #0
 80086aa:	f7f7 fe0d 	bl	80002c8 <__aeabi_dsub>
 80086ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086b2:	f7f8 fa33 	bl	8000b1c <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f040 8095 	bne.w	80087e6 <_dtoa_r+0x6be>
 80086bc:	42a6      	cmp	r6, r4
 80086be:	f43f af50 	beq.w	8008562 <_dtoa_r+0x43a>
 80086c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086c6:	4b0a      	ldr	r3, [pc, #40]	@ (80086f0 <_dtoa_r+0x5c8>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	f7f7 ffb5 	bl	8000638 <__aeabi_dmul>
 80086ce:	4b08      	ldr	r3, [pc, #32]	@ (80086f0 <_dtoa_r+0x5c8>)
 80086d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086d4:	2200      	movs	r2, #0
 80086d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086da:	f7f7 ffad 	bl	8000638 <__aeabi_dmul>
 80086de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e2:	e7c4      	b.n	800866e <_dtoa_r+0x546>
 80086e4:	0800b1e0 	.word	0x0800b1e0
 80086e8:	0800b1b8 	.word	0x0800b1b8
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	40240000 	.word	0x40240000
 80086f4:	401c0000 	.word	0x401c0000
 80086f8:	40140000 	.word	0x40140000
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	f7f7 ff98 	bl	8000638 <__aeabi_dmul>
 8008708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800870c:	9415      	str	r4, [sp, #84]	@ 0x54
 800870e:	4656      	mov	r6, sl
 8008710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008714:	f7f8 fa40 	bl	8000b98 <__aeabi_d2iz>
 8008718:	4605      	mov	r5, r0
 800871a:	f7f7 ff23 	bl	8000564 <__aeabi_i2d>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008726:	f7f7 fdcf 	bl	80002c8 <__aeabi_dsub>
 800872a:	3530      	adds	r5, #48	@ 0x30
 800872c:	f806 5b01 	strb.w	r5, [r6], #1
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	42a6      	cmp	r6, r4
 8008736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800873a:	f04f 0200 	mov.w	r2, #0
 800873e:	d124      	bne.n	800878a <_dtoa_r+0x662>
 8008740:	4bac      	ldr	r3, [pc, #688]	@ (80089f4 <_dtoa_r+0x8cc>)
 8008742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008746:	f7f7 fdc1 	bl	80002cc <__adddf3>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008752:	f7f8 fa01 	bl	8000b58 <__aeabi_dcmpgt>
 8008756:	2800      	cmp	r0, #0
 8008758:	d145      	bne.n	80087e6 <_dtoa_r+0x6be>
 800875a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800875e:	49a5      	ldr	r1, [pc, #660]	@ (80089f4 <_dtoa_r+0x8cc>)
 8008760:	2000      	movs	r0, #0
 8008762:	f7f7 fdb1 	bl	80002c8 <__aeabi_dsub>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876e:	f7f8 f9d5 	bl	8000b1c <__aeabi_dcmplt>
 8008772:	2800      	cmp	r0, #0
 8008774:	f43f aef5 	beq.w	8008562 <_dtoa_r+0x43a>
 8008778:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800877a:	1e73      	subs	r3, r6, #1
 800877c:	9315      	str	r3, [sp, #84]	@ 0x54
 800877e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008782:	2b30      	cmp	r3, #48	@ 0x30
 8008784:	d0f8      	beq.n	8008778 <_dtoa_r+0x650>
 8008786:	9f04      	ldr	r7, [sp, #16]
 8008788:	e73e      	b.n	8008608 <_dtoa_r+0x4e0>
 800878a:	4b9b      	ldr	r3, [pc, #620]	@ (80089f8 <_dtoa_r+0x8d0>)
 800878c:	f7f7 ff54 	bl	8000638 <__aeabi_dmul>
 8008790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008794:	e7bc      	b.n	8008710 <_dtoa_r+0x5e8>
 8008796:	d10c      	bne.n	80087b2 <_dtoa_r+0x68a>
 8008798:	4b98      	ldr	r3, [pc, #608]	@ (80089fc <_dtoa_r+0x8d4>)
 800879a:	2200      	movs	r2, #0
 800879c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087a0:	f7f7 ff4a 	bl	8000638 <__aeabi_dmul>
 80087a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a8:	f7f8 f9cc 	bl	8000b44 <__aeabi_dcmpge>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f000 8157 	beq.w	8008a60 <_dtoa_r+0x938>
 80087b2:	2400      	movs	r4, #0
 80087b4:	4625      	mov	r5, r4
 80087b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087b8:	43db      	mvns	r3, r3
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	4656      	mov	r6, sl
 80087be:	2700      	movs	r7, #0
 80087c0:	4621      	mov	r1, r4
 80087c2:	4658      	mov	r0, fp
 80087c4:	f000 fbb4 	bl	8008f30 <_Bfree>
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	d0dc      	beq.n	8008786 <_dtoa_r+0x65e>
 80087cc:	b12f      	cbz	r7, 80087da <_dtoa_r+0x6b2>
 80087ce:	42af      	cmp	r7, r5
 80087d0:	d003      	beq.n	80087da <_dtoa_r+0x6b2>
 80087d2:	4639      	mov	r1, r7
 80087d4:	4658      	mov	r0, fp
 80087d6:	f000 fbab 	bl	8008f30 <_Bfree>
 80087da:	4629      	mov	r1, r5
 80087dc:	4658      	mov	r0, fp
 80087de:	f000 fba7 	bl	8008f30 <_Bfree>
 80087e2:	e7d0      	b.n	8008786 <_dtoa_r+0x65e>
 80087e4:	9704      	str	r7, [sp, #16]
 80087e6:	4633      	mov	r3, r6
 80087e8:	461e      	mov	r6, r3
 80087ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ee:	2a39      	cmp	r2, #57	@ 0x39
 80087f0:	d107      	bne.n	8008802 <_dtoa_r+0x6da>
 80087f2:	459a      	cmp	sl, r3
 80087f4:	d1f8      	bne.n	80087e8 <_dtoa_r+0x6c0>
 80087f6:	9a04      	ldr	r2, [sp, #16]
 80087f8:	3201      	adds	r2, #1
 80087fa:	9204      	str	r2, [sp, #16]
 80087fc:	2230      	movs	r2, #48	@ 0x30
 80087fe:	f88a 2000 	strb.w	r2, [sl]
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	3201      	adds	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
 8008808:	e7bd      	b.n	8008786 <_dtoa_r+0x65e>
 800880a:	4b7b      	ldr	r3, [pc, #492]	@ (80089f8 <_dtoa_r+0x8d0>)
 800880c:	2200      	movs	r2, #0
 800880e:	f7f7 ff13 	bl	8000638 <__aeabi_dmul>
 8008812:	2200      	movs	r2, #0
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	460d      	mov	r5, r1
 800881a:	f7f8 f975 	bl	8000b08 <__aeabi_dcmpeq>
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f aebb 	beq.w	800859a <_dtoa_r+0x472>
 8008824:	e6f0      	b.n	8008608 <_dtoa_r+0x4e0>
 8008826:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008828:	2a00      	cmp	r2, #0
 800882a:	f000 80db 	beq.w	80089e4 <_dtoa_r+0x8bc>
 800882e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008830:	2a01      	cmp	r2, #1
 8008832:	f300 80bf 	bgt.w	80089b4 <_dtoa_r+0x88c>
 8008836:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008838:	2a00      	cmp	r2, #0
 800883a:	f000 80b7 	beq.w	80089ac <_dtoa_r+0x884>
 800883e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008842:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008844:	4646      	mov	r6, r8
 8008846:	9a08      	ldr	r2, [sp, #32]
 8008848:	2101      	movs	r1, #1
 800884a:	441a      	add	r2, r3
 800884c:	4658      	mov	r0, fp
 800884e:	4498      	add	r8, r3
 8008850:	9208      	str	r2, [sp, #32]
 8008852:	f000 fc21 	bl	8009098 <__i2b>
 8008856:	4605      	mov	r5, r0
 8008858:	b15e      	cbz	r6, 8008872 <_dtoa_r+0x74a>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd08      	ble.n	8008872 <_dtoa_r+0x74a>
 8008860:	42b3      	cmp	r3, r6
 8008862:	9a08      	ldr	r2, [sp, #32]
 8008864:	bfa8      	it	ge
 8008866:	4633      	movge	r3, r6
 8008868:	eba8 0803 	sub.w	r8, r8, r3
 800886c:	1af6      	subs	r6, r6, r3
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	9308      	str	r3, [sp, #32]
 8008872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008874:	b1f3      	cbz	r3, 80088b4 <_dtoa_r+0x78c>
 8008876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 80b7 	beq.w	80089ec <_dtoa_r+0x8c4>
 800887e:	b18c      	cbz	r4, 80088a4 <_dtoa_r+0x77c>
 8008880:	4629      	mov	r1, r5
 8008882:	4622      	mov	r2, r4
 8008884:	4658      	mov	r0, fp
 8008886:	f000 fcc7 	bl	8009218 <__pow5mult>
 800888a:	464a      	mov	r2, r9
 800888c:	4601      	mov	r1, r0
 800888e:	4605      	mov	r5, r0
 8008890:	4658      	mov	r0, fp
 8008892:	f000 fc17 	bl	80090c4 <__multiply>
 8008896:	4649      	mov	r1, r9
 8008898:	9004      	str	r0, [sp, #16]
 800889a:	4658      	mov	r0, fp
 800889c:	f000 fb48 	bl	8008f30 <_Bfree>
 80088a0:	9b04      	ldr	r3, [sp, #16]
 80088a2:	4699      	mov	r9, r3
 80088a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088a6:	1b1a      	subs	r2, r3, r4
 80088a8:	d004      	beq.n	80088b4 <_dtoa_r+0x78c>
 80088aa:	4649      	mov	r1, r9
 80088ac:	4658      	mov	r0, fp
 80088ae:	f000 fcb3 	bl	8009218 <__pow5mult>
 80088b2:	4681      	mov	r9, r0
 80088b4:	2101      	movs	r1, #1
 80088b6:	4658      	mov	r0, fp
 80088b8:	f000 fbee 	bl	8009098 <__i2b>
 80088bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088be:	4604      	mov	r4, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 81cf 	beq.w	8008c64 <_dtoa_r+0xb3c>
 80088c6:	461a      	mov	r2, r3
 80088c8:	4601      	mov	r1, r0
 80088ca:	4658      	mov	r0, fp
 80088cc:	f000 fca4 	bl	8009218 <__pow5mult>
 80088d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	4604      	mov	r4, r0
 80088d6:	f300 8095 	bgt.w	8008a04 <_dtoa_r+0x8dc>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8087 	bne.w	80089f0 <_dtoa_r+0x8c8>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f040 8089 	bne.w	8008a00 <_dtoa_r+0x8d8>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088f4:	0d1b      	lsrs	r3, r3, #20
 80088f6:	051b      	lsls	r3, r3, #20
 80088f8:	b12b      	cbz	r3, 8008906 <_dtoa_r+0x7de>
 80088fa:	9b08      	ldr	r3, [sp, #32]
 80088fc:	3301      	adds	r3, #1
 80088fe:	9308      	str	r3, [sp, #32]
 8008900:	f108 0801 	add.w	r8, r8, #1
 8008904:	2301      	movs	r3, #1
 8008906:	930a      	str	r3, [sp, #40]	@ 0x28
 8008908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 81b0 	beq.w	8008c70 <_dtoa_r+0xb48>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008916:	6918      	ldr	r0, [r3, #16]
 8008918:	f000 fb72 	bl	8009000 <__hi0bits>
 800891c:	f1c0 0020 	rsb	r0, r0, #32
 8008920:	9b08      	ldr	r3, [sp, #32]
 8008922:	4418      	add	r0, r3
 8008924:	f010 001f 	ands.w	r0, r0, #31
 8008928:	d077      	beq.n	8008a1a <_dtoa_r+0x8f2>
 800892a:	f1c0 0320 	rsb	r3, r0, #32
 800892e:	2b04      	cmp	r3, #4
 8008930:	dd6b      	ble.n	8008a0a <_dtoa_r+0x8e2>
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	f1c0 001c 	rsb	r0, r0, #28
 8008938:	4403      	add	r3, r0
 800893a:	4480      	add	r8, r0
 800893c:	4406      	add	r6, r0
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	dd05      	ble.n	8008952 <_dtoa_r+0x82a>
 8008946:	4649      	mov	r1, r9
 8008948:	4642      	mov	r2, r8
 800894a:	4658      	mov	r0, fp
 800894c:	f000 fcbe 	bl	80092cc <__lshift>
 8008950:	4681      	mov	r9, r0
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd05      	ble.n	8008964 <_dtoa_r+0x83c>
 8008958:	4621      	mov	r1, r4
 800895a:	461a      	mov	r2, r3
 800895c:	4658      	mov	r0, fp
 800895e:	f000 fcb5 	bl	80092cc <__lshift>
 8008962:	4604      	mov	r4, r0
 8008964:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008966:	2b00      	cmp	r3, #0
 8008968:	d059      	beq.n	8008a1e <_dtoa_r+0x8f6>
 800896a:	4621      	mov	r1, r4
 800896c:	4648      	mov	r0, r9
 800896e:	f000 fd19 	bl	80093a4 <__mcmp>
 8008972:	2800      	cmp	r0, #0
 8008974:	da53      	bge.n	8008a1e <_dtoa_r+0x8f6>
 8008976:	1e7b      	subs	r3, r7, #1
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	4649      	mov	r1, r9
 800897c:	2300      	movs	r3, #0
 800897e:	220a      	movs	r2, #10
 8008980:	4658      	mov	r0, fp
 8008982:	f000 faf7 	bl	8008f74 <__multadd>
 8008986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008988:	4681      	mov	r9, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8172 	beq.w	8008c74 <_dtoa_r+0xb4c>
 8008990:	2300      	movs	r3, #0
 8008992:	4629      	mov	r1, r5
 8008994:	220a      	movs	r2, #10
 8008996:	4658      	mov	r0, fp
 8008998:	f000 faec 	bl	8008f74 <__multadd>
 800899c:	9b00      	ldr	r3, [sp, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	4605      	mov	r5, r0
 80089a2:	dc67      	bgt.n	8008a74 <_dtoa_r+0x94c>
 80089a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	dc41      	bgt.n	8008a2e <_dtoa_r+0x906>
 80089aa:	e063      	b.n	8008a74 <_dtoa_r+0x94c>
 80089ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089b2:	e746      	b.n	8008842 <_dtoa_r+0x71a>
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	1e5c      	subs	r4, r3, #1
 80089b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	bfbf      	itttt	lt
 80089be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80089c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80089c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80089c4:	1ae3      	sublt	r3, r4, r3
 80089c6:	bfb4      	ite	lt
 80089c8:	18d2      	addlt	r2, r2, r3
 80089ca:	1b1c      	subge	r4, r3, r4
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	bfbc      	itt	lt
 80089d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80089d2:	2400      	movlt	r4, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	bfb5      	itete	lt
 80089d8:	eba8 0603 	sublt.w	r6, r8, r3
 80089dc:	9b07      	ldrge	r3, [sp, #28]
 80089de:	2300      	movlt	r3, #0
 80089e0:	4646      	movge	r6, r8
 80089e2:	e730      	b.n	8008846 <_dtoa_r+0x71e>
 80089e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80089e8:	4646      	mov	r6, r8
 80089ea:	e735      	b.n	8008858 <_dtoa_r+0x730>
 80089ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089ee:	e75c      	b.n	80088aa <_dtoa_r+0x782>
 80089f0:	2300      	movs	r3, #0
 80089f2:	e788      	b.n	8008906 <_dtoa_r+0x7de>
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	40240000 	.word	0x40240000
 80089fc:	40140000 	.word	0x40140000
 8008a00:	9b02      	ldr	r3, [sp, #8]
 8008a02:	e780      	b.n	8008906 <_dtoa_r+0x7de>
 8008a04:	2300      	movs	r3, #0
 8008a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a08:	e782      	b.n	8008910 <_dtoa_r+0x7e8>
 8008a0a:	d099      	beq.n	8008940 <_dtoa_r+0x818>
 8008a0c:	9a08      	ldr	r2, [sp, #32]
 8008a0e:	331c      	adds	r3, #28
 8008a10:	441a      	add	r2, r3
 8008a12:	4498      	add	r8, r3
 8008a14:	441e      	add	r6, r3
 8008a16:	9208      	str	r2, [sp, #32]
 8008a18:	e792      	b.n	8008940 <_dtoa_r+0x818>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	e7f6      	b.n	8008a0c <_dtoa_r+0x8e4>
 8008a1e:	9b07      	ldr	r3, [sp, #28]
 8008a20:	9704      	str	r7, [sp, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dc20      	bgt.n	8008a68 <_dtoa_r+0x940>
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	dd1e      	ble.n	8008a6c <_dtoa_r+0x944>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f47f aec0 	bne.w	80087b6 <_dtoa_r+0x68e>
 8008a36:	4621      	mov	r1, r4
 8008a38:	2205      	movs	r2, #5
 8008a3a:	4658      	mov	r0, fp
 8008a3c:	f000 fa9a 	bl	8008f74 <__multadd>
 8008a40:	4601      	mov	r1, r0
 8008a42:	4604      	mov	r4, r0
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 fcad 	bl	80093a4 <__mcmp>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	f77f aeb3 	ble.w	80087b6 <_dtoa_r+0x68e>
 8008a50:	4656      	mov	r6, sl
 8008a52:	2331      	movs	r3, #49	@ 0x31
 8008a54:	f806 3b01 	strb.w	r3, [r6], #1
 8008a58:	9b04      	ldr	r3, [sp, #16]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	e6ae      	b.n	80087be <_dtoa_r+0x696>
 8008a60:	9c07      	ldr	r4, [sp, #28]
 8008a62:	9704      	str	r7, [sp, #16]
 8008a64:	4625      	mov	r5, r4
 8008a66:	e7f3      	b.n	8008a50 <_dtoa_r+0x928>
 8008a68:	9b07      	ldr	r3, [sp, #28]
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 8104 	beq.w	8008c7c <_dtoa_r+0xb54>
 8008a74:	2e00      	cmp	r6, #0
 8008a76:	dd05      	ble.n	8008a84 <_dtoa_r+0x95c>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	4658      	mov	r0, fp
 8008a7e:	f000 fc25 	bl	80092cc <__lshift>
 8008a82:	4605      	mov	r5, r0
 8008a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d05a      	beq.n	8008b40 <_dtoa_r+0xa18>
 8008a8a:	6869      	ldr	r1, [r5, #4]
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	f000 fa0f 	bl	8008eb0 <_Balloc>
 8008a92:	4606      	mov	r6, r0
 8008a94:	b928      	cbnz	r0, 8008aa2 <_dtoa_r+0x97a>
 8008a96:	4b84      	ldr	r3, [pc, #528]	@ (8008ca8 <_dtoa_r+0xb80>)
 8008a98:	4602      	mov	r2, r0
 8008a9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a9e:	f7ff bb5a 	b.w	8008156 <_dtoa_r+0x2e>
 8008aa2:	692a      	ldr	r2, [r5, #16]
 8008aa4:	3202      	adds	r2, #2
 8008aa6:	0092      	lsls	r2, r2, #2
 8008aa8:	f105 010c 	add.w	r1, r5, #12
 8008aac:	300c      	adds	r0, #12
 8008aae:	f7ff faa2 	bl	8007ff6 <memcpy>
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4658      	mov	r0, fp
 8008ab8:	f000 fc08 	bl	80092cc <__lshift>
 8008abc:	f10a 0301 	add.w	r3, sl, #1
 8008ac0:	9307      	str	r3, [sp, #28]
 8008ac2:	9b00      	ldr	r3, [sp, #0]
 8008ac4:	4453      	add	r3, sl
 8008ac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ac8:	9b02      	ldr	r3, [sp, #8]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	462f      	mov	r7, r5
 8008ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	4648      	mov	r0, r9
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	f7ff fa98 	bl	8008012 <quorem>
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	9002      	str	r0, [sp, #8]
 8008ae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008aea:	4648      	mov	r0, r9
 8008aec:	f000 fc5a 	bl	80093a4 <__mcmp>
 8008af0:	462a      	mov	r2, r5
 8008af2:	9008      	str	r0, [sp, #32]
 8008af4:	4621      	mov	r1, r4
 8008af6:	4658      	mov	r0, fp
 8008af8:	f000 fc70 	bl	80093dc <__mdiff>
 8008afc:	68c2      	ldr	r2, [r0, #12]
 8008afe:	4606      	mov	r6, r0
 8008b00:	bb02      	cbnz	r2, 8008b44 <_dtoa_r+0xa1c>
 8008b02:	4601      	mov	r1, r0
 8008b04:	4648      	mov	r0, r9
 8008b06:	f000 fc4d 	bl	80093a4 <__mcmp>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4658      	mov	r0, fp
 8008b10:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b12:	f000 fa0d 	bl	8008f30 <_Bfree>
 8008b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b1a:	9e07      	ldr	r6, [sp, #28]
 8008b1c:	ea43 0102 	orr.w	r1, r3, r2
 8008b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b22:	4319      	orrs	r1, r3
 8008b24:	d110      	bne.n	8008b48 <_dtoa_r+0xa20>
 8008b26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b2a:	d029      	beq.n	8008b80 <_dtoa_r+0xa58>
 8008b2c:	9b08      	ldr	r3, [sp, #32]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dd02      	ble.n	8008b38 <_dtoa_r+0xa10>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	f883 8000 	strb.w	r8, [r3]
 8008b3e:	e63f      	b.n	80087c0 <_dtoa_r+0x698>
 8008b40:	4628      	mov	r0, r5
 8008b42:	e7bb      	b.n	8008abc <_dtoa_r+0x994>
 8008b44:	2201      	movs	r2, #1
 8008b46:	e7e1      	b.n	8008b0c <_dtoa_r+0x9e4>
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	db04      	blt.n	8008b58 <_dtoa_r+0xa30>
 8008b4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b50:	430b      	orrs	r3, r1
 8008b52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b54:	430b      	orrs	r3, r1
 8008b56:	d120      	bne.n	8008b9a <_dtoa_r+0xa72>
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	dded      	ble.n	8008b38 <_dtoa_r+0xa10>
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4658      	mov	r0, fp
 8008b62:	f000 fbb3 	bl	80092cc <__lshift>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4681      	mov	r9, r0
 8008b6a:	f000 fc1b 	bl	80093a4 <__mcmp>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	dc03      	bgt.n	8008b7a <_dtoa_r+0xa52>
 8008b72:	d1e1      	bne.n	8008b38 <_dtoa_r+0xa10>
 8008b74:	f018 0f01 	tst.w	r8, #1
 8008b78:	d0de      	beq.n	8008b38 <_dtoa_r+0xa10>
 8008b7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b7e:	d1d8      	bne.n	8008b32 <_dtoa_r+0xa0a>
 8008b80:	9a00      	ldr	r2, [sp, #0]
 8008b82:	2339      	movs	r3, #57	@ 0x39
 8008b84:	7013      	strb	r3, [r2, #0]
 8008b86:	4633      	mov	r3, r6
 8008b88:	461e      	mov	r6, r3
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b90:	2a39      	cmp	r2, #57	@ 0x39
 8008b92:	d052      	beq.n	8008c3a <_dtoa_r+0xb12>
 8008b94:	3201      	adds	r2, #1
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	e612      	b.n	80087c0 <_dtoa_r+0x698>
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	dd07      	ble.n	8008bae <_dtoa_r+0xa86>
 8008b9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ba2:	d0ed      	beq.n	8008b80 <_dtoa_r+0xa58>
 8008ba4:	9a00      	ldr	r2, [sp, #0]
 8008ba6:	f108 0301 	add.w	r3, r8, #1
 8008baa:	7013      	strb	r3, [r2, #0]
 8008bac:	e608      	b.n	80087c0 <_dtoa_r+0x698>
 8008bae:	9b07      	ldr	r3, [sp, #28]
 8008bb0:	9a07      	ldr	r2, [sp, #28]
 8008bb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d028      	beq.n	8008c0e <_dtoa_r+0xae6>
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f000 f9d6 	bl	8008f74 <__multadd>
 8008bc8:	42af      	cmp	r7, r5
 8008bca:	4681      	mov	r9, r0
 8008bcc:	f04f 0300 	mov.w	r3, #0
 8008bd0:	f04f 020a 	mov.w	r2, #10
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4658      	mov	r0, fp
 8008bd8:	d107      	bne.n	8008bea <_dtoa_r+0xac2>
 8008bda:	f000 f9cb 	bl	8008f74 <__multadd>
 8008bde:	4607      	mov	r7, r0
 8008be0:	4605      	mov	r5, r0
 8008be2:	9b07      	ldr	r3, [sp, #28]
 8008be4:	3301      	adds	r3, #1
 8008be6:	9307      	str	r3, [sp, #28]
 8008be8:	e774      	b.n	8008ad4 <_dtoa_r+0x9ac>
 8008bea:	f000 f9c3 	bl	8008f74 <__multadd>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f000 f9bc 	bl	8008f74 <__multadd>
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	e7f0      	b.n	8008be2 <_dtoa_r+0xaba>
 8008c00:	9b00      	ldr	r3, [sp, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bfcc      	ite	gt
 8008c06:	461e      	movgt	r6, r3
 8008c08:	2601      	movle	r6, #1
 8008c0a:	4456      	add	r6, sl
 8008c0c:	2700      	movs	r7, #0
 8008c0e:	4649      	mov	r1, r9
 8008c10:	2201      	movs	r2, #1
 8008c12:	4658      	mov	r0, fp
 8008c14:	f000 fb5a 	bl	80092cc <__lshift>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4681      	mov	r9, r0
 8008c1c:	f000 fbc2 	bl	80093a4 <__mcmp>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dcb0      	bgt.n	8008b86 <_dtoa_r+0xa5e>
 8008c24:	d102      	bne.n	8008c2c <_dtoa_r+0xb04>
 8008c26:	f018 0f01 	tst.w	r8, #1
 8008c2a:	d1ac      	bne.n	8008b86 <_dtoa_r+0xa5e>
 8008c2c:	4633      	mov	r3, r6
 8008c2e:	461e      	mov	r6, r3
 8008c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c34:	2a30      	cmp	r2, #48	@ 0x30
 8008c36:	d0fa      	beq.n	8008c2e <_dtoa_r+0xb06>
 8008c38:	e5c2      	b.n	80087c0 <_dtoa_r+0x698>
 8008c3a:	459a      	cmp	sl, r3
 8008c3c:	d1a4      	bne.n	8008b88 <_dtoa_r+0xa60>
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	3301      	adds	r3, #1
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	2331      	movs	r3, #49	@ 0x31
 8008c46:	f88a 3000 	strb.w	r3, [sl]
 8008c4a:	e5b9      	b.n	80087c0 <_dtoa_r+0x698>
 8008c4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008cac <_dtoa_r+0xb84>
 8008c52:	b11b      	cbz	r3, 8008c5c <_dtoa_r+0xb34>
 8008c54:	f10a 0308 	add.w	r3, sl, #8
 8008c58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	b019      	add	sp, #100	@ 0x64
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	f77f ae37 	ble.w	80088da <_dtoa_r+0x7b2>
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c70:	2001      	movs	r0, #1
 8008c72:	e655      	b.n	8008920 <_dtoa_r+0x7f8>
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f77f aed6 	ble.w	8008a28 <_dtoa_r+0x900>
 8008c7c:	4656      	mov	r6, sl
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4648      	mov	r0, r9
 8008c82:	f7ff f9c6 	bl	8008012 <quorem>
 8008c86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c8a:	f806 8b01 	strb.w	r8, [r6], #1
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	eba6 020a 	sub.w	r2, r6, sl
 8008c94:	4293      	cmp	r3, r2
 8008c96:	ddb3      	ble.n	8008c00 <_dtoa_r+0xad8>
 8008c98:	4649      	mov	r1, r9
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f000 f968 	bl	8008f74 <__multadd>
 8008ca4:	4681      	mov	r9, r0
 8008ca6:	e7ea      	b.n	8008c7e <_dtoa_r+0xb56>
 8008ca8:	0800b140 	.word	0x0800b140
 8008cac:	0800b0c4 	.word	0x0800b0c4

08008cb0 <_free_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d041      	beq.n	8008d3c <_free_r+0x8c>
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f0c      	subs	r4, r1, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfb8      	it	lt
 8008cc2:	18e4      	addlt	r4, r4, r3
 8008cc4:	f000 f8e8 	bl	8008e98 <__malloc_lock>
 8008cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d40 <_free_r+0x90>)
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	b933      	cbnz	r3, 8008cdc <_free_r+0x2c>
 8008cce:	6063      	str	r3, [r4, #4]
 8008cd0:	6014      	str	r4, [r2, #0]
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd8:	f000 b8e4 	b.w	8008ea4 <__malloc_unlock>
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	d908      	bls.n	8008cf2 <_free_r+0x42>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	1821      	adds	r1, r4, r0
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	bf01      	itttt	eq
 8008ce8:	6819      	ldreq	r1, [r3, #0]
 8008cea:	685b      	ldreq	r3, [r3, #4]
 8008cec:	1809      	addeq	r1, r1, r0
 8008cee:	6021      	streq	r1, [r4, #0]
 8008cf0:	e7ed      	b.n	8008cce <_free_r+0x1e>
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b10b      	cbz	r3, 8008cfc <_free_r+0x4c>
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d9fa      	bls.n	8008cf2 <_free_r+0x42>
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	1850      	adds	r0, r2, r1
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d10b      	bne.n	8008d1c <_free_r+0x6c>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	4401      	add	r1, r0
 8008d08:	1850      	adds	r0, r2, r1
 8008d0a:	4283      	cmp	r3, r0
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	d1e0      	bne.n	8008cd2 <_free_r+0x22>
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	6053      	str	r3, [r2, #4]
 8008d16:	4408      	add	r0, r1
 8008d18:	6010      	str	r0, [r2, #0]
 8008d1a:	e7da      	b.n	8008cd2 <_free_r+0x22>
 8008d1c:	d902      	bls.n	8008d24 <_free_r+0x74>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	e7d6      	b.n	8008cd2 <_free_r+0x22>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	1821      	adds	r1, r4, r0
 8008d28:	428b      	cmp	r3, r1
 8008d2a:	bf04      	itt	eq
 8008d2c:	6819      	ldreq	r1, [r3, #0]
 8008d2e:	685b      	ldreq	r3, [r3, #4]
 8008d30:	6063      	str	r3, [r4, #4]
 8008d32:	bf04      	itt	eq
 8008d34:	1809      	addeq	r1, r1, r0
 8008d36:	6021      	streq	r1, [r4, #0]
 8008d38:	6054      	str	r4, [r2, #4]
 8008d3a:	e7ca      	b.n	8008cd2 <_free_r+0x22>
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000b20 	.word	0x20000b20

08008d44 <malloc>:
 8008d44:	4b02      	ldr	r3, [pc, #8]	@ (8008d50 <malloc+0xc>)
 8008d46:	4601      	mov	r1, r0
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f000 b825 	b.w	8008d98 <_malloc_r>
 8008d4e:	bf00      	nop
 8008d50:	2000001c 	.word	0x2000001c

08008d54 <sbrk_aligned>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4e0f      	ldr	r6, [pc, #60]	@ (8008d94 <sbrk_aligned+0x40>)
 8008d58:	460c      	mov	r4, r1
 8008d5a:	6831      	ldr	r1, [r6, #0]
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	b911      	cbnz	r1, 8008d66 <sbrk_aligned+0x12>
 8008d60:	f000 fe2c 	bl	80099bc <_sbrk_r>
 8008d64:	6030      	str	r0, [r6, #0]
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f000 fe27 	bl	80099bc <_sbrk_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	d103      	bne.n	8008d7a <sbrk_aligned+0x26>
 8008d72:	f04f 34ff 	mov.w	r4, #4294967295
 8008d76:	4620      	mov	r0, r4
 8008d78:	bd70      	pop	{r4, r5, r6, pc}
 8008d7a:	1cc4      	adds	r4, r0, #3
 8008d7c:	f024 0403 	bic.w	r4, r4, #3
 8008d80:	42a0      	cmp	r0, r4
 8008d82:	d0f8      	beq.n	8008d76 <sbrk_aligned+0x22>
 8008d84:	1a21      	subs	r1, r4, r0
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 fe18 	bl	80099bc <_sbrk_r>
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d1f2      	bne.n	8008d76 <sbrk_aligned+0x22>
 8008d90:	e7ef      	b.n	8008d72 <sbrk_aligned+0x1e>
 8008d92:	bf00      	nop
 8008d94:	20000b1c 	.word	0x20000b1c

08008d98 <_malloc_r>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	1ccd      	adds	r5, r1, #3
 8008d9e:	f025 0503 	bic.w	r5, r5, #3
 8008da2:	3508      	adds	r5, #8
 8008da4:	2d0c      	cmp	r5, #12
 8008da6:	bf38      	it	cc
 8008da8:	250c      	movcc	r5, #12
 8008daa:	2d00      	cmp	r5, #0
 8008dac:	4606      	mov	r6, r0
 8008dae:	db01      	blt.n	8008db4 <_malloc_r+0x1c>
 8008db0:	42a9      	cmp	r1, r5
 8008db2:	d904      	bls.n	8008dbe <_malloc_r+0x26>
 8008db4:	230c      	movs	r3, #12
 8008db6:	6033      	str	r3, [r6, #0]
 8008db8:	2000      	movs	r0, #0
 8008dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e94 <_malloc_r+0xfc>
 8008dc2:	f000 f869 	bl	8008e98 <__malloc_lock>
 8008dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dca:	461c      	mov	r4, r3
 8008dcc:	bb44      	cbnz	r4, 8008e20 <_malloc_r+0x88>
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff ffbf 	bl	8008d54 <sbrk_aligned>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	4604      	mov	r4, r0
 8008dda:	d158      	bne.n	8008e8e <_malloc_r+0xf6>
 8008ddc:	f8d8 4000 	ldr.w	r4, [r8]
 8008de0:	4627      	mov	r7, r4
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	d143      	bne.n	8008e6e <_malloc_r+0xd6>
 8008de6:	2c00      	cmp	r4, #0
 8008de8:	d04b      	beq.n	8008e82 <_malloc_r+0xea>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	4639      	mov	r1, r7
 8008dee:	4630      	mov	r0, r6
 8008df0:	eb04 0903 	add.w	r9, r4, r3
 8008df4:	f000 fde2 	bl	80099bc <_sbrk_r>
 8008df8:	4581      	cmp	r9, r0
 8008dfa:	d142      	bne.n	8008e82 <_malloc_r+0xea>
 8008dfc:	6821      	ldr	r1, [r4, #0]
 8008dfe:	1a6d      	subs	r5, r5, r1
 8008e00:	4629      	mov	r1, r5
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7ff ffa6 	bl	8008d54 <sbrk_aligned>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d03a      	beq.n	8008e82 <_malloc_r+0xea>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	442b      	add	r3, r5
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	f8d8 3000 	ldr.w	r3, [r8]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	bb62      	cbnz	r2, 8008e74 <_malloc_r+0xdc>
 8008e1a:	f8c8 7000 	str.w	r7, [r8]
 8008e1e:	e00f      	b.n	8008e40 <_malloc_r+0xa8>
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	1b52      	subs	r2, r2, r5
 8008e24:	d420      	bmi.n	8008e68 <_malloc_r+0xd0>
 8008e26:	2a0b      	cmp	r2, #11
 8008e28:	d917      	bls.n	8008e5a <_malloc_r+0xc2>
 8008e2a:	1961      	adds	r1, r4, r5
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	6025      	str	r5, [r4, #0]
 8008e30:	bf18      	it	ne
 8008e32:	6059      	strne	r1, [r3, #4]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	bf08      	it	eq
 8008e38:	f8c8 1000 	streq.w	r1, [r8]
 8008e3c:	5162      	str	r2, [r4, r5]
 8008e3e:	604b      	str	r3, [r1, #4]
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 f82f 	bl	8008ea4 <__malloc_unlock>
 8008e46:	f104 000b 	add.w	r0, r4, #11
 8008e4a:	1d23      	adds	r3, r4, #4
 8008e4c:	f020 0007 	bic.w	r0, r0, #7
 8008e50:	1ac2      	subs	r2, r0, r3
 8008e52:	bf1c      	itt	ne
 8008e54:	1a1b      	subne	r3, r3, r0
 8008e56:	50a3      	strne	r3, [r4, r2]
 8008e58:	e7af      	b.n	8008dba <_malloc_r+0x22>
 8008e5a:	6862      	ldr	r2, [r4, #4]
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	bf0c      	ite	eq
 8008e60:	f8c8 2000 	streq.w	r2, [r8]
 8008e64:	605a      	strne	r2, [r3, #4]
 8008e66:	e7eb      	b.n	8008e40 <_malloc_r+0xa8>
 8008e68:	4623      	mov	r3, r4
 8008e6a:	6864      	ldr	r4, [r4, #4]
 8008e6c:	e7ae      	b.n	8008dcc <_malloc_r+0x34>
 8008e6e:	463c      	mov	r4, r7
 8008e70:	687f      	ldr	r7, [r7, #4]
 8008e72:	e7b6      	b.n	8008de2 <_malloc_r+0x4a>
 8008e74:	461a      	mov	r2, r3
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d1fb      	bne.n	8008e74 <_malloc_r+0xdc>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6053      	str	r3, [r2, #4]
 8008e80:	e7de      	b.n	8008e40 <_malloc_r+0xa8>
 8008e82:	230c      	movs	r3, #12
 8008e84:	6033      	str	r3, [r6, #0]
 8008e86:	4630      	mov	r0, r6
 8008e88:	f000 f80c 	bl	8008ea4 <__malloc_unlock>
 8008e8c:	e794      	b.n	8008db8 <_malloc_r+0x20>
 8008e8e:	6005      	str	r5, [r0, #0]
 8008e90:	e7d6      	b.n	8008e40 <_malloc_r+0xa8>
 8008e92:	bf00      	nop
 8008e94:	20000b20 	.word	0x20000b20

08008e98 <__malloc_lock>:
 8008e98:	4801      	ldr	r0, [pc, #4]	@ (8008ea0 <__malloc_lock+0x8>)
 8008e9a:	f7ff b8aa 	b.w	8007ff2 <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	20000b18 	.word	0x20000b18

08008ea4 <__malloc_unlock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	@ (8008eac <__malloc_unlock+0x8>)
 8008ea6:	f7ff b8a5 	b.w	8007ff4 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	20000b18 	.word	0x20000b18

08008eb0 <_Balloc>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	69c6      	ldr	r6, [r0, #28]
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	b976      	cbnz	r6, 8008ed8 <_Balloc+0x28>
 8008eba:	2010      	movs	r0, #16
 8008ebc:	f7ff ff42 	bl	8008d44 <malloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	61e0      	str	r0, [r4, #28]
 8008ec4:	b920      	cbnz	r0, 8008ed0 <_Balloc+0x20>
 8008ec6:	4b18      	ldr	r3, [pc, #96]	@ (8008f28 <_Balloc+0x78>)
 8008ec8:	4818      	ldr	r0, [pc, #96]	@ (8008f2c <_Balloc+0x7c>)
 8008eca:	216b      	movs	r1, #107	@ 0x6b
 8008ecc:	f000 fd86 	bl	80099dc <__assert_func>
 8008ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed4:	6006      	str	r6, [r0, #0]
 8008ed6:	60c6      	str	r6, [r0, #12]
 8008ed8:	69e6      	ldr	r6, [r4, #28]
 8008eda:	68f3      	ldr	r3, [r6, #12]
 8008edc:	b183      	cbz	r3, 8008f00 <_Balloc+0x50>
 8008ede:	69e3      	ldr	r3, [r4, #28]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ee6:	b9b8      	cbnz	r0, 8008f18 <_Balloc+0x68>
 8008ee8:	2101      	movs	r1, #1
 8008eea:	fa01 f605 	lsl.w	r6, r1, r5
 8008eee:	1d72      	adds	r2, r6, #5
 8008ef0:	0092      	lsls	r2, r2, #2
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 fd90 	bl	8009a18 <_calloc_r>
 8008ef8:	b160      	cbz	r0, 8008f14 <_Balloc+0x64>
 8008efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008efe:	e00e      	b.n	8008f1e <_Balloc+0x6e>
 8008f00:	2221      	movs	r2, #33	@ 0x21
 8008f02:	2104      	movs	r1, #4
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 fd87 	bl	8009a18 <_calloc_r>
 8008f0a:	69e3      	ldr	r3, [r4, #28]
 8008f0c:	60f0      	str	r0, [r6, #12]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e4      	bne.n	8008ede <_Balloc+0x2e>
 8008f14:	2000      	movs	r0, #0
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	6802      	ldr	r2, [r0, #0]
 8008f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f24:	e7f7      	b.n	8008f16 <_Balloc+0x66>
 8008f26:	bf00      	nop
 8008f28:	0800b0d1 	.word	0x0800b0d1
 8008f2c:	0800b151 	.word	0x0800b151

08008f30 <_Bfree>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	69c6      	ldr	r6, [r0, #28]
 8008f34:	4605      	mov	r5, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	b976      	cbnz	r6, 8008f58 <_Bfree+0x28>
 8008f3a:	2010      	movs	r0, #16
 8008f3c:	f7ff ff02 	bl	8008d44 <malloc>
 8008f40:	4602      	mov	r2, r0
 8008f42:	61e8      	str	r0, [r5, #28]
 8008f44:	b920      	cbnz	r0, 8008f50 <_Bfree+0x20>
 8008f46:	4b09      	ldr	r3, [pc, #36]	@ (8008f6c <_Bfree+0x3c>)
 8008f48:	4809      	ldr	r0, [pc, #36]	@ (8008f70 <_Bfree+0x40>)
 8008f4a:	218f      	movs	r1, #143	@ 0x8f
 8008f4c:	f000 fd46 	bl	80099dc <__assert_func>
 8008f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f54:	6006      	str	r6, [r0, #0]
 8008f56:	60c6      	str	r6, [r0, #12]
 8008f58:	b13c      	cbz	r4, 8008f6a <_Bfree+0x3a>
 8008f5a:	69eb      	ldr	r3, [r5, #28]
 8008f5c:	6862      	ldr	r2, [r4, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f64:	6021      	str	r1, [r4, #0]
 8008f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	0800b0d1 	.word	0x0800b0d1
 8008f70:	0800b151 	.word	0x0800b151

08008f74 <__multadd>:
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	690d      	ldr	r5, [r1, #16]
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	461e      	mov	r6, r3
 8008f80:	f101 0c14 	add.w	ip, r1, #20
 8008f84:	2000      	movs	r0, #0
 8008f86:	f8dc 3000 	ldr.w	r3, [ip]
 8008f8a:	b299      	uxth	r1, r3
 8008f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008f90:	0c1e      	lsrs	r6, r3, #16
 8008f92:	0c0b      	lsrs	r3, r1, #16
 8008f94:	fb02 3306 	mla	r3, r2, r6, r3
 8008f98:	b289      	uxth	r1, r1
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fa0:	4285      	cmp	r5, r0
 8008fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8008fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008faa:	dcec      	bgt.n	8008f86 <__multadd+0x12>
 8008fac:	b30e      	cbz	r6, 8008ff2 <__multadd+0x7e>
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	dc19      	bgt.n	8008fe8 <__multadd+0x74>
 8008fb4:	6861      	ldr	r1, [r4, #4]
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	3101      	adds	r1, #1
 8008fba:	f7ff ff79 	bl	8008eb0 <_Balloc>
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	b928      	cbnz	r0, 8008fce <__multadd+0x5a>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <__multadd+0x84>)
 8008fc6:	480d      	ldr	r0, [pc, #52]	@ (8008ffc <__multadd+0x88>)
 8008fc8:	21ba      	movs	r1, #186	@ 0xba
 8008fca:	f000 fd07 	bl	80099dc <__assert_func>
 8008fce:	6922      	ldr	r2, [r4, #16]
 8008fd0:	3202      	adds	r2, #2
 8008fd2:	f104 010c 	add.w	r1, r4, #12
 8008fd6:	0092      	lsls	r2, r2, #2
 8008fd8:	300c      	adds	r0, #12
 8008fda:	f7ff f80c 	bl	8007ff6 <memcpy>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f7ff ffa5 	bl	8008f30 <_Bfree>
 8008fe6:	4644      	mov	r4, r8
 8008fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fec:	3501      	adds	r5, #1
 8008fee:	615e      	str	r6, [r3, #20]
 8008ff0:	6125      	str	r5, [r4, #16]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	0800b140 	.word	0x0800b140
 8008ffc:	0800b151 	.word	0x0800b151

08009000 <__hi0bits>:
 8009000:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009004:	4603      	mov	r3, r0
 8009006:	bf36      	itet	cc
 8009008:	0403      	lslcc	r3, r0, #16
 800900a:	2000      	movcs	r0, #0
 800900c:	2010      	movcc	r0, #16
 800900e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009012:	bf3c      	itt	cc
 8009014:	021b      	lslcc	r3, r3, #8
 8009016:	3008      	addcc	r0, #8
 8009018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800901c:	bf3c      	itt	cc
 800901e:	011b      	lslcc	r3, r3, #4
 8009020:	3004      	addcc	r0, #4
 8009022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009026:	bf3c      	itt	cc
 8009028:	009b      	lslcc	r3, r3, #2
 800902a:	3002      	addcc	r0, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	db05      	blt.n	800903c <__hi0bits+0x3c>
 8009030:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009034:	f100 0001 	add.w	r0, r0, #1
 8009038:	bf08      	it	eq
 800903a:	2020      	moveq	r0, #32
 800903c:	4770      	bx	lr

0800903e <__lo0bits>:
 800903e:	6803      	ldr	r3, [r0, #0]
 8009040:	4602      	mov	r2, r0
 8009042:	f013 0007 	ands.w	r0, r3, #7
 8009046:	d00b      	beq.n	8009060 <__lo0bits+0x22>
 8009048:	07d9      	lsls	r1, r3, #31
 800904a:	d421      	bmi.n	8009090 <__lo0bits+0x52>
 800904c:	0798      	lsls	r0, r3, #30
 800904e:	bf49      	itett	mi
 8009050:	085b      	lsrmi	r3, r3, #1
 8009052:	089b      	lsrpl	r3, r3, #2
 8009054:	2001      	movmi	r0, #1
 8009056:	6013      	strmi	r3, [r2, #0]
 8009058:	bf5c      	itt	pl
 800905a:	6013      	strpl	r3, [r2, #0]
 800905c:	2002      	movpl	r0, #2
 800905e:	4770      	bx	lr
 8009060:	b299      	uxth	r1, r3
 8009062:	b909      	cbnz	r1, 8009068 <__lo0bits+0x2a>
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	2010      	movs	r0, #16
 8009068:	b2d9      	uxtb	r1, r3
 800906a:	b909      	cbnz	r1, 8009070 <__lo0bits+0x32>
 800906c:	3008      	adds	r0, #8
 800906e:	0a1b      	lsrs	r3, r3, #8
 8009070:	0719      	lsls	r1, r3, #28
 8009072:	bf04      	itt	eq
 8009074:	091b      	lsreq	r3, r3, #4
 8009076:	3004      	addeq	r0, #4
 8009078:	0799      	lsls	r1, r3, #30
 800907a:	bf04      	itt	eq
 800907c:	089b      	lsreq	r3, r3, #2
 800907e:	3002      	addeq	r0, #2
 8009080:	07d9      	lsls	r1, r3, #31
 8009082:	d403      	bmi.n	800908c <__lo0bits+0x4e>
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	f100 0001 	add.w	r0, r0, #1
 800908a:	d003      	beq.n	8009094 <__lo0bits+0x56>
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	4770      	bx	lr
 8009090:	2000      	movs	r0, #0
 8009092:	4770      	bx	lr
 8009094:	2020      	movs	r0, #32
 8009096:	4770      	bx	lr

08009098 <__i2b>:
 8009098:	b510      	push	{r4, lr}
 800909a:	460c      	mov	r4, r1
 800909c:	2101      	movs	r1, #1
 800909e:	f7ff ff07 	bl	8008eb0 <_Balloc>
 80090a2:	4602      	mov	r2, r0
 80090a4:	b928      	cbnz	r0, 80090b2 <__i2b+0x1a>
 80090a6:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <__i2b+0x24>)
 80090a8:	4805      	ldr	r0, [pc, #20]	@ (80090c0 <__i2b+0x28>)
 80090aa:	f240 1145 	movw	r1, #325	@ 0x145
 80090ae:	f000 fc95 	bl	80099dc <__assert_func>
 80090b2:	2301      	movs	r3, #1
 80090b4:	6144      	str	r4, [r0, #20]
 80090b6:	6103      	str	r3, [r0, #16]
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	0800b140 	.word	0x0800b140
 80090c0:	0800b151 	.word	0x0800b151

080090c4 <__multiply>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4614      	mov	r4, r2
 80090ca:	690a      	ldr	r2, [r1, #16]
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	bfa8      	it	ge
 80090d2:	4623      	movge	r3, r4
 80090d4:	460f      	mov	r7, r1
 80090d6:	bfa4      	itt	ge
 80090d8:	460c      	movge	r4, r1
 80090da:	461f      	movge	r7, r3
 80090dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090e4:	68a3      	ldr	r3, [r4, #8]
 80090e6:	6861      	ldr	r1, [r4, #4]
 80090e8:	eb0a 0609 	add.w	r6, sl, r9
 80090ec:	42b3      	cmp	r3, r6
 80090ee:	b085      	sub	sp, #20
 80090f0:	bfb8      	it	lt
 80090f2:	3101      	addlt	r1, #1
 80090f4:	f7ff fedc 	bl	8008eb0 <_Balloc>
 80090f8:	b930      	cbnz	r0, 8009108 <__multiply+0x44>
 80090fa:	4602      	mov	r2, r0
 80090fc:	4b44      	ldr	r3, [pc, #272]	@ (8009210 <__multiply+0x14c>)
 80090fe:	4845      	ldr	r0, [pc, #276]	@ (8009214 <__multiply+0x150>)
 8009100:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009104:	f000 fc6a 	bl	80099dc <__assert_func>
 8009108:	f100 0514 	add.w	r5, r0, #20
 800910c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009110:	462b      	mov	r3, r5
 8009112:	2200      	movs	r2, #0
 8009114:	4543      	cmp	r3, r8
 8009116:	d321      	bcc.n	800915c <__multiply+0x98>
 8009118:	f107 0114 	add.w	r1, r7, #20
 800911c:	f104 0214 	add.w	r2, r4, #20
 8009120:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009124:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009128:	9302      	str	r3, [sp, #8]
 800912a:	1b13      	subs	r3, r2, r4
 800912c:	3b15      	subs	r3, #21
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	3304      	adds	r3, #4
 8009134:	f104 0715 	add.w	r7, r4, #21
 8009138:	42ba      	cmp	r2, r7
 800913a:	bf38      	it	cc
 800913c:	2304      	movcc	r3, #4
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	9103      	str	r1, [sp, #12]
 8009144:	428b      	cmp	r3, r1
 8009146:	d80c      	bhi.n	8009162 <__multiply+0x9e>
 8009148:	2e00      	cmp	r6, #0
 800914a:	dd03      	ble.n	8009154 <__multiply+0x90>
 800914c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009150:	2b00      	cmp	r3, #0
 8009152:	d05b      	beq.n	800920c <__multiply+0x148>
 8009154:	6106      	str	r6, [r0, #16]
 8009156:	b005      	add	sp, #20
 8009158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915c:	f843 2b04 	str.w	r2, [r3], #4
 8009160:	e7d8      	b.n	8009114 <__multiply+0x50>
 8009162:	f8b1 a000 	ldrh.w	sl, [r1]
 8009166:	f1ba 0f00 	cmp.w	sl, #0
 800916a:	d024      	beq.n	80091b6 <__multiply+0xf2>
 800916c:	f104 0e14 	add.w	lr, r4, #20
 8009170:	46a9      	mov	r9, r5
 8009172:	f04f 0c00 	mov.w	ip, #0
 8009176:	f85e 7b04 	ldr.w	r7, [lr], #4
 800917a:	f8d9 3000 	ldr.w	r3, [r9]
 800917e:	fa1f fb87 	uxth.w	fp, r7
 8009182:	b29b      	uxth	r3, r3
 8009184:	fb0a 330b 	mla	r3, sl, fp, r3
 8009188:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800918c:	f8d9 7000 	ldr.w	r7, [r9]
 8009190:	4463      	add	r3, ip
 8009192:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009196:	fb0a c70b 	mla	r7, sl, fp, ip
 800919a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800919e:	b29b      	uxth	r3, r3
 80091a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091a4:	4572      	cmp	r2, lr
 80091a6:	f849 3b04 	str.w	r3, [r9], #4
 80091aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091ae:	d8e2      	bhi.n	8009176 <__multiply+0xb2>
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	f845 c003 	str.w	ip, [r5, r3]
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091bc:	3104      	adds	r1, #4
 80091be:	f1b9 0f00 	cmp.w	r9, #0
 80091c2:	d021      	beq.n	8009208 <__multiply+0x144>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	f104 0c14 	add.w	ip, r4, #20
 80091ca:	46ae      	mov	lr, r5
 80091cc:	f04f 0a00 	mov.w	sl, #0
 80091d0:	f8bc b000 	ldrh.w	fp, [ip]
 80091d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80091d8:	fb09 770b 	mla	r7, r9, fp, r7
 80091dc:	4457      	add	r7, sl
 80091de:	b29b      	uxth	r3, r3
 80091e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091e4:	f84e 3b04 	str.w	r3, [lr], #4
 80091e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091f0:	f8be 3000 	ldrh.w	r3, [lr]
 80091f4:	fb09 330a 	mla	r3, r9, sl, r3
 80091f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80091fc:	4562      	cmp	r2, ip
 80091fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009202:	d8e5      	bhi.n	80091d0 <__multiply+0x10c>
 8009204:	9f01      	ldr	r7, [sp, #4]
 8009206:	51eb      	str	r3, [r5, r7]
 8009208:	3504      	adds	r5, #4
 800920a:	e799      	b.n	8009140 <__multiply+0x7c>
 800920c:	3e01      	subs	r6, #1
 800920e:	e79b      	b.n	8009148 <__multiply+0x84>
 8009210:	0800b140 	.word	0x0800b140
 8009214:	0800b151 	.word	0x0800b151

08009218 <__pow5mult>:
 8009218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800921c:	4615      	mov	r5, r2
 800921e:	f012 0203 	ands.w	r2, r2, #3
 8009222:	4607      	mov	r7, r0
 8009224:	460e      	mov	r6, r1
 8009226:	d007      	beq.n	8009238 <__pow5mult+0x20>
 8009228:	4c25      	ldr	r4, [pc, #148]	@ (80092c0 <__pow5mult+0xa8>)
 800922a:	3a01      	subs	r2, #1
 800922c:	2300      	movs	r3, #0
 800922e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009232:	f7ff fe9f 	bl	8008f74 <__multadd>
 8009236:	4606      	mov	r6, r0
 8009238:	10ad      	asrs	r5, r5, #2
 800923a:	d03d      	beq.n	80092b8 <__pow5mult+0xa0>
 800923c:	69fc      	ldr	r4, [r7, #28]
 800923e:	b97c      	cbnz	r4, 8009260 <__pow5mult+0x48>
 8009240:	2010      	movs	r0, #16
 8009242:	f7ff fd7f 	bl	8008d44 <malloc>
 8009246:	4602      	mov	r2, r0
 8009248:	61f8      	str	r0, [r7, #28]
 800924a:	b928      	cbnz	r0, 8009258 <__pow5mult+0x40>
 800924c:	4b1d      	ldr	r3, [pc, #116]	@ (80092c4 <__pow5mult+0xac>)
 800924e:	481e      	ldr	r0, [pc, #120]	@ (80092c8 <__pow5mult+0xb0>)
 8009250:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009254:	f000 fbc2 	bl	80099dc <__assert_func>
 8009258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800925c:	6004      	str	r4, [r0, #0]
 800925e:	60c4      	str	r4, [r0, #12]
 8009260:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009268:	b94c      	cbnz	r4, 800927e <__pow5mult+0x66>
 800926a:	f240 2171 	movw	r1, #625	@ 0x271
 800926e:	4638      	mov	r0, r7
 8009270:	f7ff ff12 	bl	8009098 <__i2b>
 8009274:	2300      	movs	r3, #0
 8009276:	f8c8 0008 	str.w	r0, [r8, #8]
 800927a:	4604      	mov	r4, r0
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	f04f 0900 	mov.w	r9, #0
 8009282:	07eb      	lsls	r3, r5, #31
 8009284:	d50a      	bpl.n	800929c <__pow5mult+0x84>
 8009286:	4631      	mov	r1, r6
 8009288:	4622      	mov	r2, r4
 800928a:	4638      	mov	r0, r7
 800928c:	f7ff ff1a 	bl	80090c4 <__multiply>
 8009290:	4631      	mov	r1, r6
 8009292:	4680      	mov	r8, r0
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff fe4b 	bl	8008f30 <_Bfree>
 800929a:	4646      	mov	r6, r8
 800929c:	106d      	asrs	r5, r5, #1
 800929e:	d00b      	beq.n	80092b8 <__pow5mult+0xa0>
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	b938      	cbnz	r0, 80092b4 <__pow5mult+0x9c>
 80092a4:	4622      	mov	r2, r4
 80092a6:	4621      	mov	r1, r4
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff ff0b 	bl	80090c4 <__multiply>
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	f8c0 9000 	str.w	r9, [r0]
 80092b4:	4604      	mov	r4, r0
 80092b6:	e7e4      	b.n	8009282 <__pow5mult+0x6a>
 80092b8:	4630      	mov	r0, r6
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092be:	bf00      	nop
 80092c0:	0800b1ac 	.word	0x0800b1ac
 80092c4:	0800b0d1 	.word	0x0800b0d1
 80092c8:	0800b151 	.word	0x0800b151

080092cc <__lshift>:
 80092cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	460c      	mov	r4, r1
 80092d2:	6849      	ldr	r1, [r1, #4]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	4607      	mov	r7, r0
 80092de:	4691      	mov	r9, r2
 80092e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092e4:	f108 0601 	add.w	r6, r8, #1
 80092e8:	42b3      	cmp	r3, r6
 80092ea:	db0b      	blt.n	8009304 <__lshift+0x38>
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff fddf 	bl	8008eb0 <_Balloc>
 80092f2:	4605      	mov	r5, r0
 80092f4:	b948      	cbnz	r0, 800930a <__lshift+0x3e>
 80092f6:	4602      	mov	r2, r0
 80092f8:	4b28      	ldr	r3, [pc, #160]	@ (800939c <__lshift+0xd0>)
 80092fa:	4829      	ldr	r0, [pc, #164]	@ (80093a0 <__lshift+0xd4>)
 80092fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009300:	f000 fb6c 	bl	80099dc <__assert_func>
 8009304:	3101      	adds	r1, #1
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	e7ee      	b.n	80092e8 <__lshift+0x1c>
 800930a:	2300      	movs	r3, #0
 800930c:	f100 0114 	add.w	r1, r0, #20
 8009310:	f100 0210 	add.w	r2, r0, #16
 8009314:	4618      	mov	r0, r3
 8009316:	4553      	cmp	r3, sl
 8009318:	db33      	blt.n	8009382 <__lshift+0xb6>
 800931a:	6920      	ldr	r0, [r4, #16]
 800931c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009320:	f104 0314 	add.w	r3, r4, #20
 8009324:	f019 091f 	ands.w	r9, r9, #31
 8009328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800932c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009330:	d02b      	beq.n	800938a <__lshift+0xbe>
 8009332:	f1c9 0e20 	rsb	lr, r9, #32
 8009336:	468a      	mov	sl, r1
 8009338:	2200      	movs	r2, #0
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	fa00 f009 	lsl.w	r0, r0, r9
 8009340:	4310      	orrs	r0, r2
 8009342:	f84a 0b04 	str.w	r0, [sl], #4
 8009346:	f853 2b04 	ldr.w	r2, [r3], #4
 800934a:	459c      	cmp	ip, r3
 800934c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009350:	d8f3      	bhi.n	800933a <__lshift+0x6e>
 8009352:	ebac 0304 	sub.w	r3, ip, r4
 8009356:	3b15      	subs	r3, #21
 8009358:	f023 0303 	bic.w	r3, r3, #3
 800935c:	3304      	adds	r3, #4
 800935e:	f104 0015 	add.w	r0, r4, #21
 8009362:	4584      	cmp	ip, r0
 8009364:	bf38      	it	cc
 8009366:	2304      	movcc	r3, #4
 8009368:	50ca      	str	r2, [r1, r3]
 800936a:	b10a      	cbz	r2, 8009370 <__lshift+0xa4>
 800936c:	f108 0602 	add.w	r6, r8, #2
 8009370:	3e01      	subs	r6, #1
 8009372:	4638      	mov	r0, r7
 8009374:	612e      	str	r6, [r5, #16]
 8009376:	4621      	mov	r1, r4
 8009378:	f7ff fdda 	bl	8008f30 <_Bfree>
 800937c:	4628      	mov	r0, r5
 800937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009382:	f842 0f04 	str.w	r0, [r2, #4]!
 8009386:	3301      	adds	r3, #1
 8009388:	e7c5      	b.n	8009316 <__lshift+0x4a>
 800938a:	3904      	subs	r1, #4
 800938c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009390:	f841 2f04 	str.w	r2, [r1, #4]!
 8009394:	459c      	cmp	ip, r3
 8009396:	d8f9      	bhi.n	800938c <__lshift+0xc0>
 8009398:	e7ea      	b.n	8009370 <__lshift+0xa4>
 800939a:	bf00      	nop
 800939c:	0800b140 	.word	0x0800b140
 80093a0:	0800b151 	.word	0x0800b151

080093a4 <__mcmp>:
 80093a4:	690a      	ldr	r2, [r1, #16]
 80093a6:	4603      	mov	r3, r0
 80093a8:	6900      	ldr	r0, [r0, #16]
 80093aa:	1a80      	subs	r0, r0, r2
 80093ac:	b530      	push	{r4, r5, lr}
 80093ae:	d10e      	bne.n	80093ce <__mcmp+0x2a>
 80093b0:	3314      	adds	r3, #20
 80093b2:	3114      	adds	r1, #20
 80093b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093c4:	4295      	cmp	r5, r2
 80093c6:	d003      	beq.n	80093d0 <__mcmp+0x2c>
 80093c8:	d205      	bcs.n	80093d6 <__mcmp+0x32>
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	bd30      	pop	{r4, r5, pc}
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	d3f3      	bcc.n	80093bc <__mcmp+0x18>
 80093d4:	e7fb      	b.n	80093ce <__mcmp+0x2a>
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7f9      	b.n	80093ce <__mcmp+0x2a>
	...

080093dc <__mdiff>:
 80093dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4689      	mov	r9, r1
 80093e2:	4606      	mov	r6, r0
 80093e4:	4611      	mov	r1, r2
 80093e6:	4648      	mov	r0, r9
 80093e8:	4614      	mov	r4, r2
 80093ea:	f7ff ffdb 	bl	80093a4 <__mcmp>
 80093ee:	1e05      	subs	r5, r0, #0
 80093f0:	d112      	bne.n	8009418 <__mdiff+0x3c>
 80093f2:	4629      	mov	r1, r5
 80093f4:	4630      	mov	r0, r6
 80093f6:	f7ff fd5b 	bl	8008eb0 <_Balloc>
 80093fa:	4602      	mov	r2, r0
 80093fc:	b928      	cbnz	r0, 800940a <__mdiff+0x2e>
 80093fe:	4b3f      	ldr	r3, [pc, #252]	@ (80094fc <__mdiff+0x120>)
 8009400:	f240 2137 	movw	r1, #567	@ 0x237
 8009404:	483e      	ldr	r0, [pc, #248]	@ (8009500 <__mdiff+0x124>)
 8009406:	f000 fae9 	bl	80099dc <__assert_func>
 800940a:	2301      	movs	r3, #1
 800940c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009410:	4610      	mov	r0, r2
 8009412:	b003      	add	sp, #12
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009418:	bfbc      	itt	lt
 800941a:	464b      	movlt	r3, r9
 800941c:	46a1      	movlt	r9, r4
 800941e:	4630      	mov	r0, r6
 8009420:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009424:	bfba      	itte	lt
 8009426:	461c      	movlt	r4, r3
 8009428:	2501      	movlt	r5, #1
 800942a:	2500      	movge	r5, #0
 800942c:	f7ff fd40 	bl	8008eb0 <_Balloc>
 8009430:	4602      	mov	r2, r0
 8009432:	b918      	cbnz	r0, 800943c <__mdiff+0x60>
 8009434:	4b31      	ldr	r3, [pc, #196]	@ (80094fc <__mdiff+0x120>)
 8009436:	f240 2145 	movw	r1, #581	@ 0x245
 800943a:	e7e3      	b.n	8009404 <__mdiff+0x28>
 800943c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009440:	6926      	ldr	r6, [r4, #16]
 8009442:	60c5      	str	r5, [r0, #12]
 8009444:	f109 0310 	add.w	r3, r9, #16
 8009448:	f109 0514 	add.w	r5, r9, #20
 800944c:	f104 0e14 	add.w	lr, r4, #20
 8009450:	f100 0b14 	add.w	fp, r0, #20
 8009454:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009458:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	46d9      	mov	r9, fp
 8009460:	f04f 0c00 	mov.w	ip, #0
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	f85e 0b04 	ldr.w	r0, [lr], #4
 800946a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	fa1f f38a 	uxth.w	r3, sl
 8009474:	4619      	mov	r1, r3
 8009476:	b283      	uxth	r3, r0
 8009478:	1acb      	subs	r3, r1, r3
 800947a:	0c00      	lsrs	r0, r0, #16
 800947c:	4463      	add	r3, ip
 800947e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009482:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009486:	b29b      	uxth	r3, r3
 8009488:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800948c:	4576      	cmp	r6, lr
 800948e:	f849 3b04 	str.w	r3, [r9], #4
 8009492:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009496:	d8e5      	bhi.n	8009464 <__mdiff+0x88>
 8009498:	1b33      	subs	r3, r6, r4
 800949a:	3b15      	subs	r3, #21
 800949c:	f023 0303 	bic.w	r3, r3, #3
 80094a0:	3415      	adds	r4, #21
 80094a2:	3304      	adds	r3, #4
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	bf38      	it	cc
 80094a8:	2304      	movcc	r3, #4
 80094aa:	441d      	add	r5, r3
 80094ac:	445b      	add	r3, fp
 80094ae:	461e      	mov	r6, r3
 80094b0:	462c      	mov	r4, r5
 80094b2:	4544      	cmp	r4, r8
 80094b4:	d30e      	bcc.n	80094d4 <__mdiff+0xf8>
 80094b6:	f108 0103 	add.w	r1, r8, #3
 80094ba:	1b49      	subs	r1, r1, r5
 80094bc:	f021 0103 	bic.w	r1, r1, #3
 80094c0:	3d03      	subs	r5, #3
 80094c2:	45a8      	cmp	r8, r5
 80094c4:	bf38      	it	cc
 80094c6:	2100      	movcc	r1, #0
 80094c8:	440b      	add	r3, r1
 80094ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094ce:	b191      	cbz	r1, 80094f6 <__mdiff+0x11a>
 80094d0:	6117      	str	r7, [r2, #16]
 80094d2:	e79d      	b.n	8009410 <__mdiff+0x34>
 80094d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80094d8:	46e6      	mov	lr, ip
 80094da:	0c08      	lsrs	r0, r1, #16
 80094dc:	fa1c fc81 	uxtah	ip, ip, r1
 80094e0:	4471      	add	r1, lr
 80094e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094e6:	b289      	uxth	r1, r1
 80094e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094ec:	f846 1b04 	str.w	r1, [r6], #4
 80094f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094f4:	e7dd      	b.n	80094b2 <__mdiff+0xd6>
 80094f6:	3f01      	subs	r7, #1
 80094f8:	e7e7      	b.n	80094ca <__mdiff+0xee>
 80094fa:	bf00      	nop
 80094fc:	0800b140 	.word	0x0800b140
 8009500:	0800b151 	.word	0x0800b151

08009504 <__d2b>:
 8009504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009508:	460f      	mov	r7, r1
 800950a:	2101      	movs	r1, #1
 800950c:	ec59 8b10 	vmov	r8, r9, d0
 8009510:	4616      	mov	r6, r2
 8009512:	f7ff fccd 	bl	8008eb0 <_Balloc>
 8009516:	4604      	mov	r4, r0
 8009518:	b930      	cbnz	r0, 8009528 <__d2b+0x24>
 800951a:	4602      	mov	r2, r0
 800951c:	4b23      	ldr	r3, [pc, #140]	@ (80095ac <__d2b+0xa8>)
 800951e:	4824      	ldr	r0, [pc, #144]	@ (80095b0 <__d2b+0xac>)
 8009520:	f240 310f 	movw	r1, #783	@ 0x30f
 8009524:	f000 fa5a 	bl	80099dc <__assert_func>
 8009528:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800952c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009530:	b10d      	cbz	r5, 8009536 <__d2b+0x32>
 8009532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	f1b8 0300 	subs.w	r3, r8, #0
 800953c:	d023      	beq.n	8009586 <__d2b+0x82>
 800953e:	4668      	mov	r0, sp
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	f7ff fd7c 	bl	800903e <__lo0bits>
 8009546:	e9dd 1200 	ldrd	r1, r2, [sp]
 800954a:	b1d0      	cbz	r0, 8009582 <__d2b+0x7e>
 800954c:	f1c0 0320 	rsb	r3, r0, #32
 8009550:	fa02 f303 	lsl.w	r3, r2, r3
 8009554:	430b      	orrs	r3, r1
 8009556:	40c2      	lsrs	r2, r0
 8009558:	6163      	str	r3, [r4, #20]
 800955a:	9201      	str	r2, [sp, #4]
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	61a3      	str	r3, [r4, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bf0c      	ite	eq
 8009564:	2201      	moveq	r2, #1
 8009566:	2202      	movne	r2, #2
 8009568:	6122      	str	r2, [r4, #16]
 800956a:	b1a5      	cbz	r5, 8009596 <__d2b+0x92>
 800956c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009570:	4405      	add	r5, r0
 8009572:	603d      	str	r5, [r7, #0]
 8009574:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009578:	6030      	str	r0, [r6, #0]
 800957a:	4620      	mov	r0, r4
 800957c:	b003      	add	sp, #12
 800957e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009582:	6161      	str	r1, [r4, #20]
 8009584:	e7ea      	b.n	800955c <__d2b+0x58>
 8009586:	a801      	add	r0, sp, #4
 8009588:	f7ff fd59 	bl	800903e <__lo0bits>
 800958c:	9b01      	ldr	r3, [sp, #4]
 800958e:	6163      	str	r3, [r4, #20]
 8009590:	3020      	adds	r0, #32
 8009592:	2201      	movs	r2, #1
 8009594:	e7e8      	b.n	8009568 <__d2b+0x64>
 8009596:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800959a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800959e:	6038      	str	r0, [r7, #0]
 80095a0:	6918      	ldr	r0, [r3, #16]
 80095a2:	f7ff fd2d 	bl	8009000 <__hi0bits>
 80095a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095aa:	e7e5      	b.n	8009578 <__d2b+0x74>
 80095ac:	0800b140 	.word	0x0800b140
 80095b0:	0800b151 	.word	0x0800b151

080095b4 <__ssputs_r>:
 80095b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	688e      	ldr	r6, [r1, #8]
 80095ba:	461f      	mov	r7, r3
 80095bc:	42be      	cmp	r6, r7
 80095be:	680b      	ldr	r3, [r1, #0]
 80095c0:	4682      	mov	sl, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	4690      	mov	r8, r2
 80095c6:	d82d      	bhi.n	8009624 <__ssputs_r+0x70>
 80095c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095d0:	d026      	beq.n	8009620 <__ssputs_r+0x6c>
 80095d2:	6965      	ldr	r5, [r4, #20]
 80095d4:	6909      	ldr	r1, [r1, #16]
 80095d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095da:	eba3 0901 	sub.w	r9, r3, r1
 80095de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095e2:	1c7b      	adds	r3, r7, #1
 80095e4:	444b      	add	r3, r9
 80095e6:	106d      	asrs	r5, r5, #1
 80095e8:	429d      	cmp	r5, r3
 80095ea:	bf38      	it	cc
 80095ec:	461d      	movcc	r5, r3
 80095ee:	0553      	lsls	r3, r2, #21
 80095f0:	d527      	bpl.n	8009642 <__ssputs_r+0x8e>
 80095f2:	4629      	mov	r1, r5
 80095f4:	f7ff fbd0 	bl	8008d98 <_malloc_r>
 80095f8:	4606      	mov	r6, r0
 80095fa:	b360      	cbz	r0, 8009656 <__ssputs_r+0xa2>
 80095fc:	6921      	ldr	r1, [r4, #16]
 80095fe:	464a      	mov	r2, r9
 8009600:	f7fe fcf9 	bl	8007ff6 <memcpy>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800960a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	6126      	str	r6, [r4, #16]
 8009612:	6165      	str	r5, [r4, #20]
 8009614:	444e      	add	r6, r9
 8009616:	eba5 0509 	sub.w	r5, r5, r9
 800961a:	6026      	str	r6, [r4, #0]
 800961c:	60a5      	str	r5, [r4, #8]
 800961e:	463e      	mov	r6, r7
 8009620:	42be      	cmp	r6, r7
 8009622:	d900      	bls.n	8009626 <__ssputs_r+0x72>
 8009624:	463e      	mov	r6, r7
 8009626:	6820      	ldr	r0, [r4, #0]
 8009628:	4632      	mov	r2, r6
 800962a:	4641      	mov	r1, r8
 800962c:	f7fe fc49 	bl	8007ec2 <memmove>
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	1b9b      	subs	r3, r3, r6
 8009634:	60a3      	str	r3, [r4, #8]
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	4433      	add	r3, r6
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	2000      	movs	r0, #0
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	462a      	mov	r2, r5
 8009644:	f000 fa0e 	bl	8009a64 <_realloc_r>
 8009648:	4606      	mov	r6, r0
 800964a:	2800      	cmp	r0, #0
 800964c:	d1e0      	bne.n	8009610 <__ssputs_r+0x5c>
 800964e:	6921      	ldr	r1, [r4, #16]
 8009650:	4650      	mov	r0, sl
 8009652:	f7ff fb2d 	bl	8008cb0 <_free_r>
 8009656:	230c      	movs	r3, #12
 8009658:	f8ca 3000 	str.w	r3, [sl]
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	e7e9      	b.n	800963e <__ssputs_r+0x8a>
	...

0800966c <_svfiprintf_r>:
 800966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	4698      	mov	r8, r3
 8009672:	898b      	ldrh	r3, [r1, #12]
 8009674:	061b      	lsls	r3, r3, #24
 8009676:	b09d      	sub	sp, #116	@ 0x74
 8009678:	4607      	mov	r7, r0
 800967a:	460d      	mov	r5, r1
 800967c:	4614      	mov	r4, r2
 800967e:	d510      	bpl.n	80096a2 <_svfiprintf_r+0x36>
 8009680:	690b      	ldr	r3, [r1, #16]
 8009682:	b973      	cbnz	r3, 80096a2 <_svfiprintf_r+0x36>
 8009684:	2140      	movs	r1, #64	@ 0x40
 8009686:	f7ff fb87 	bl	8008d98 <_malloc_r>
 800968a:	6028      	str	r0, [r5, #0]
 800968c:	6128      	str	r0, [r5, #16]
 800968e:	b930      	cbnz	r0, 800969e <_svfiprintf_r+0x32>
 8009690:	230c      	movs	r3, #12
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	b01d      	add	sp, #116	@ 0x74
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	2340      	movs	r3, #64	@ 0x40
 80096a0:	616b      	str	r3, [r5, #20]
 80096a2:	2300      	movs	r3, #0
 80096a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096a6:	2320      	movs	r3, #32
 80096a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b0:	2330      	movs	r3, #48	@ 0x30
 80096b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009850 <_svfiprintf_r+0x1e4>
 80096b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096ba:	f04f 0901 	mov.w	r9, #1
 80096be:	4623      	mov	r3, r4
 80096c0:	469a      	mov	sl, r3
 80096c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c6:	b10a      	cbz	r2, 80096cc <_svfiprintf_r+0x60>
 80096c8:	2a25      	cmp	r2, #37	@ 0x25
 80096ca:	d1f9      	bne.n	80096c0 <_svfiprintf_r+0x54>
 80096cc:	ebba 0b04 	subs.w	fp, sl, r4
 80096d0:	d00b      	beq.n	80096ea <_svfiprintf_r+0x7e>
 80096d2:	465b      	mov	r3, fp
 80096d4:	4622      	mov	r2, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	4638      	mov	r0, r7
 80096da:	f7ff ff6b 	bl	80095b4 <__ssputs_r>
 80096de:	3001      	adds	r0, #1
 80096e0:	f000 80a7 	beq.w	8009832 <_svfiprintf_r+0x1c6>
 80096e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096e6:	445a      	add	r2, fp
 80096e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80096ea:	f89a 3000 	ldrb.w	r3, [sl]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 809f 	beq.w	8009832 <_svfiprintf_r+0x1c6>
 80096f4:	2300      	movs	r3, #0
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295
 80096fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096fe:	f10a 0a01 	add.w	sl, sl, #1
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	9307      	str	r3, [sp, #28]
 8009706:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800970a:	931a      	str	r3, [sp, #104]	@ 0x68
 800970c:	4654      	mov	r4, sl
 800970e:	2205      	movs	r2, #5
 8009710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009714:	484e      	ldr	r0, [pc, #312]	@ (8009850 <_svfiprintf_r+0x1e4>)
 8009716:	f7f6 fd7b 	bl	8000210 <memchr>
 800971a:	9a04      	ldr	r2, [sp, #16]
 800971c:	b9d8      	cbnz	r0, 8009756 <_svfiprintf_r+0xea>
 800971e:	06d0      	lsls	r0, r2, #27
 8009720:	bf44      	itt	mi
 8009722:	2320      	movmi	r3, #32
 8009724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009728:	0711      	lsls	r1, r2, #28
 800972a:	bf44      	itt	mi
 800972c:	232b      	movmi	r3, #43	@ 0x2b
 800972e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009732:	f89a 3000 	ldrb.w	r3, [sl]
 8009736:	2b2a      	cmp	r3, #42	@ 0x2a
 8009738:	d015      	beq.n	8009766 <_svfiprintf_r+0xfa>
 800973a:	9a07      	ldr	r2, [sp, #28]
 800973c:	4654      	mov	r4, sl
 800973e:	2000      	movs	r0, #0
 8009740:	f04f 0c0a 	mov.w	ip, #10
 8009744:	4621      	mov	r1, r4
 8009746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800974a:	3b30      	subs	r3, #48	@ 0x30
 800974c:	2b09      	cmp	r3, #9
 800974e:	d94b      	bls.n	80097e8 <_svfiprintf_r+0x17c>
 8009750:	b1b0      	cbz	r0, 8009780 <_svfiprintf_r+0x114>
 8009752:	9207      	str	r2, [sp, #28]
 8009754:	e014      	b.n	8009780 <_svfiprintf_r+0x114>
 8009756:	eba0 0308 	sub.w	r3, r0, r8
 800975a:	fa09 f303 	lsl.w	r3, r9, r3
 800975e:	4313      	orrs	r3, r2
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	46a2      	mov	sl, r4
 8009764:	e7d2      	b.n	800970c <_svfiprintf_r+0xa0>
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	1d19      	adds	r1, r3, #4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	9103      	str	r1, [sp, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	bfbb      	ittet	lt
 8009772:	425b      	neglt	r3, r3
 8009774:	f042 0202 	orrlt.w	r2, r2, #2
 8009778:	9307      	strge	r3, [sp, #28]
 800977a:	9307      	strlt	r3, [sp, #28]
 800977c:	bfb8      	it	lt
 800977e:	9204      	strlt	r2, [sp, #16]
 8009780:	7823      	ldrb	r3, [r4, #0]
 8009782:	2b2e      	cmp	r3, #46	@ 0x2e
 8009784:	d10a      	bne.n	800979c <_svfiprintf_r+0x130>
 8009786:	7863      	ldrb	r3, [r4, #1]
 8009788:	2b2a      	cmp	r3, #42	@ 0x2a
 800978a:	d132      	bne.n	80097f2 <_svfiprintf_r+0x186>
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	9203      	str	r2, [sp, #12]
 8009794:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009798:	3402      	adds	r4, #2
 800979a:	9305      	str	r3, [sp, #20]
 800979c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009860 <_svfiprintf_r+0x1f4>
 80097a0:	7821      	ldrb	r1, [r4, #0]
 80097a2:	2203      	movs	r2, #3
 80097a4:	4650      	mov	r0, sl
 80097a6:	f7f6 fd33 	bl	8000210 <memchr>
 80097aa:	b138      	cbz	r0, 80097bc <_svfiprintf_r+0x150>
 80097ac:	9b04      	ldr	r3, [sp, #16]
 80097ae:	eba0 000a 	sub.w	r0, r0, sl
 80097b2:	2240      	movs	r2, #64	@ 0x40
 80097b4:	4082      	lsls	r2, r0
 80097b6:	4313      	orrs	r3, r2
 80097b8:	3401      	adds	r4, #1
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c0:	4824      	ldr	r0, [pc, #144]	@ (8009854 <_svfiprintf_r+0x1e8>)
 80097c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097c6:	2206      	movs	r2, #6
 80097c8:	f7f6 fd22 	bl	8000210 <memchr>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d036      	beq.n	800983e <_svfiprintf_r+0x1d2>
 80097d0:	4b21      	ldr	r3, [pc, #132]	@ (8009858 <_svfiprintf_r+0x1ec>)
 80097d2:	bb1b      	cbnz	r3, 800981c <_svfiprintf_r+0x1b0>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	3307      	adds	r3, #7
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	3308      	adds	r3, #8
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e2:	4433      	add	r3, r6
 80097e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097e6:	e76a      	b.n	80096be <_svfiprintf_r+0x52>
 80097e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ec:	460c      	mov	r4, r1
 80097ee:	2001      	movs	r0, #1
 80097f0:	e7a8      	b.n	8009744 <_svfiprintf_r+0xd8>
 80097f2:	2300      	movs	r3, #0
 80097f4:	3401      	adds	r4, #1
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f04f 0c0a 	mov.w	ip, #10
 80097fe:	4620      	mov	r0, r4
 8009800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009804:	3a30      	subs	r2, #48	@ 0x30
 8009806:	2a09      	cmp	r2, #9
 8009808:	d903      	bls.n	8009812 <_svfiprintf_r+0x1a6>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0c6      	beq.n	800979c <_svfiprintf_r+0x130>
 800980e:	9105      	str	r1, [sp, #20]
 8009810:	e7c4      	b.n	800979c <_svfiprintf_r+0x130>
 8009812:	fb0c 2101 	mla	r1, ip, r1, r2
 8009816:	4604      	mov	r4, r0
 8009818:	2301      	movs	r3, #1
 800981a:	e7f0      	b.n	80097fe <_svfiprintf_r+0x192>
 800981c:	ab03      	add	r3, sp, #12
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	462a      	mov	r2, r5
 8009822:	4b0e      	ldr	r3, [pc, #56]	@ (800985c <_svfiprintf_r+0x1f0>)
 8009824:	a904      	add	r1, sp, #16
 8009826:	4638      	mov	r0, r7
 8009828:	f7fd fe6e 	bl	8007508 <_printf_float>
 800982c:	1c42      	adds	r2, r0, #1
 800982e:	4606      	mov	r6, r0
 8009830:	d1d6      	bne.n	80097e0 <_svfiprintf_r+0x174>
 8009832:	89ab      	ldrh	r3, [r5, #12]
 8009834:	065b      	lsls	r3, r3, #25
 8009836:	f53f af2d 	bmi.w	8009694 <_svfiprintf_r+0x28>
 800983a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800983c:	e72c      	b.n	8009698 <_svfiprintf_r+0x2c>
 800983e:	ab03      	add	r3, sp, #12
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	462a      	mov	r2, r5
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <_svfiprintf_r+0x1f0>)
 8009846:	a904      	add	r1, sp, #16
 8009848:	4638      	mov	r0, r7
 800984a:	f7fe f8f5 	bl	8007a38 <_printf_i>
 800984e:	e7ed      	b.n	800982c <_svfiprintf_r+0x1c0>
 8009850:	0800b2a8 	.word	0x0800b2a8
 8009854:	0800b2b2 	.word	0x0800b2b2
 8009858:	08007509 	.word	0x08007509
 800985c:	080095b5 	.word	0x080095b5
 8009860:	0800b2ae 	.word	0x0800b2ae

08009864 <__sflush_r>:
 8009864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986c:	0716      	lsls	r6, r2, #28
 800986e:	4605      	mov	r5, r0
 8009870:	460c      	mov	r4, r1
 8009872:	d454      	bmi.n	800991e <__sflush_r+0xba>
 8009874:	684b      	ldr	r3, [r1, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dc02      	bgt.n	8009880 <__sflush_r+0x1c>
 800987a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd48      	ble.n	8009912 <__sflush_r+0xae>
 8009880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009882:	2e00      	cmp	r6, #0
 8009884:	d045      	beq.n	8009912 <__sflush_r+0xae>
 8009886:	2300      	movs	r3, #0
 8009888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800988c:	682f      	ldr	r7, [r5, #0]
 800988e:	6a21      	ldr	r1, [r4, #32]
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	d030      	beq.n	80098f6 <__sflush_r+0x92>
 8009894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	0759      	lsls	r1, r3, #29
 800989a:	d505      	bpl.n	80098a8 <__sflush_r+0x44>
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098a2:	b10b      	cbz	r3, 80098a8 <__sflush_r+0x44>
 80098a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	2300      	movs	r3, #0
 80098aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ac:	6a21      	ldr	r1, [r4, #32]
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b0      	blx	r6
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	d106      	bne.n	80098c6 <__sflush_r+0x62>
 80098b8:	6829      	ldr	r1, [r5, #0]
 80098ba:	291d      	cmp	r1, #29
 80098bc:	d82b      	bhi.n	8009916 <__sflush_r+0xb2>
 80098be:	4a2a      	ldr	r2, [pc, #168]	@ (8009968 <__sflush_r+0x104>)
 80098c0:	410a      	asrs	r2, r1
 80098c2:	07d6      	lsls	r6, r2, #31
 80098c4:	d427      	bmi.n	8009916 <__sflush_r+0xb2>
 80098c6:	2200      	movs	r2, #0
 80098c8:	6062      	str	r2, [r4, #4]
 80098ca:	04d9      	lsls	r1, r3, #19
 80098cc:	6922      	ldr	r2, [r4, #16]
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	d504      	bpl.n	80098dc <__sflush_r+0x78>
 80098d2:	1c42      	adds	r2, r0, #1
 80098d4:	d101      	bne.n	80098da <__sflush_r+0x76>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	b903      	cbnz	r3, 80098dc <__sflush_r+0x78>
 80098da:	6560      	str	r0, [r4, #84]	@ 0x54
 80098dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098de:	602f      	str	r7, [r5, #0]
 80098e0:	b1b9      	cbz	r1, 8009912 <__sflush_r+0xae>
 80098e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d002      	beq.n	80098f0 <__sflush_r+0x8c>
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7ff f9e0 	bl	8008cb0 <_free_r>
 80098f0:	2300      	movs	r3, #0
 80098f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80098f4:	e00d      	b.n	8009912 <__sflush_r+0xae>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b0      	blx	r6
 80098fc:	4602      	mov	r2, r0
 80098fe:	1c50      	adds	r0, r2, #1
 8009900:	d1c9      	bne.n	8009896 <__sflush_r+0x32>
 8009902:	682b      	ldr	r3, [r5, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0c6      	beq.n	8009896 <__sflush_r+0x32>
 8009908:	2b1d      	cmp	r3, #29
 800990a:	d001      	beq.n	8009910 <__sflush_r+0xac>
 800990c:	2b16      	cmp	r3, #22
 800990e:	d11e      	bne.n	800994e <__sflush_r+0xea>
 8009910:	602f      	str	r7, [r5, #0]
 8009912:	2000      	movs	r0, #0
 8009914:	e022      	b.n	800995c <__sflush_r+0xf8>
 8009916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800991a:	b21b      	sxth	r3, r3
 800991c:	e01b      	b.n	8009956 <__sflush_r+0xf2>
 800991e:	690f      	ldr	r7, [r1, #16]
 8009920:	2f00      	cmp	r7, #0
 8009922:	d0f6      	beq.n	8009912 <__sflush_r+0xae>
 8009924:	0793      	lsls	r3, r2, #30
 8009926:	680e      	ldr	r6, [r1, #0]
 8009928:	bf08      	it	eq
 800992a:	694b      	ldreq	r3, [r1, #20]
 800992c:	600f      	str	r7, [r1, #0]
 800992e:	bf18      	it	ne
 8009930:	2300      	movne	r3, #0
 8009932:	eba6 0807 	sub.w	r8, r6, r7
 8009936:	608b      	str	r3, [r1, #8]
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	dde9      	ble.n	8009912 <__sflush_r+0xae>
 800993e:	6a21      	ldr	r1, [r4, #32]
 8009940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009942:	4643      	mov	r3, r8
 8009944:	463a      	mov	r2, r7
 8009946:	4628      	mov	r0, r5
 8009948:	47b0      	blx	r6
 800994a:	2800      	cmp	r0, #0
 800994c:	dc08      	bgt.n	8009960 <__sflush_r+0xfc>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	f04f 30ff 	mov.w	r0, #4294967295
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	4407      	add	r7, r0
 8009962:	eba8 0800 	sub.w	r8, r8, r0
 8009966:	e7e7      	b.n	8009938 <__sflush_r+0xd4>
 8009968:	dfbffffe 	.word	0xdfbffffe

0800996c <_fflush_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	4605      	mov	r5, r0
 8009972:	460c      	mov	r4, r1
 8009974:	b913      	cbnz	r3, 800997c <_fflush_r+0x10>
 8009976:	2500      	movs	r5, #0
 8009978:	4628      	mov	r0, r5
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	b118      	cbz	r0, 8009986 <_fflush_r+0x1a>
 800997e:	6a03      	ldr	r3, [r0, #32]
 8009980:	b90b      	cbnz	r3, 8009986 <_fflush_r+0x1a>
 8009982:	f7fe fa05 	bl	8007d90 <__sinit>
 8009986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f3      	beq.n	8009976 <_fflush_r+0xa>
 800998e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009990:	07d0      	lsls	r0, r2, #31
 8009992:	d404      	bmi.n	800999e <_fflush_r+0x32>
 8009994:	0599      	lsls	r1, r3, #22
 8009996:	d402      	bmi.n	800999e <_fflush_r+0x32>
 8009998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800999a:	f7fe fb2a 	bl	8007ff2 <__retarget_lock_acquire_recursive>
 800999e:	4628      	mov	r0, r5
 80099a0:	4621      	mov	r1, r4
 80099a2:	f7ff ff5f 	bl	8009864 <__sflush_r>
 80099a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099a8:	07da      	lsls	r2, r3, #31
 80099aa:	4605      	mov	r5, r0
 80099ac:	d4e4      	bmi.n	8009978 <_fflush_r+0xc>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	059b      	lsls	r3, r3, #22
 80099b2:	d4e1      	bmi.n	8009978 <_fflush_r+0xc>
 80099b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099b6:	f7fe fb1d 	bl	8007ff4 <__retarget_lock_release_recursive>
 80099ba:	e7dd      	b.n	8009978 <_fflush_r+0xc>

080099bc <_sbrk_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d06      	ldr	r5, [pc, #24]	@ (80099d8 <_sbrk_r+0x1c>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7f9 fa22 	bl	8002e10 <_sbrk>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_sbrk_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_sbrk_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000b14 	.word	0x20000b14

080099dc <__assert_func>:
 80099dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099de:	4614      	mov	r4, r2
 80099e0:	461a      	mov	r2, r3
 80099e2:	4b09      	ldr	r3, [pc, #36]	@ (8009a08 <__assert_func+0x2c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	68d8      	ldr	r0, [r3, #12]
 80099ea:	b954      	cbnz	r4, 8009a02 <__assert_func+0x26>
 80099ec:	4b07      	ldr	r3, [pc, #28]	@ (8009a0c <__assert_func+0x30>)
 80099ee:	461c      	mov	r4, r3
 80099f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099f4:	9100      	str	r1, [sp, #0]
 80099f6:	462b      	mov	r3, r5
 80099f8:	4905      	ldr	r1, [pc, #20]	@ (8009a10 <__assert_func+0x34>)
 80099fa:	f000 f86f 	bl	8009adc <fiprintf>
 80099fe:	f000 f87f 	bl	8009b00 <abort>
 8009a02:	4b04      	ldr	r3, [pc, #16]	@ (8009a14 <__assert_func+0x38>)
 8009a04:	e7f4      	b.n	80099f0 <__assert_func+0x14>
 8009a06:	bf00      	nop
 8009a08:	2000001c 	.word	0x2000001c
 8009a0c:	0800b2fe 	.word	0x0800b2fe
 8009a10:	0800b2d0 	.word	0x0800b2d0
 8009a14:	0800b2c3 	.word	0x0800b2c3

08009a18 <_calloc_r>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a1e:	b93c      	cbnz	r4, 8009a30 <_calloc_r+0x18>
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7ff f9b9 	bl	8008d98 <_malloc_r>
 8009a26:	4606      	mov	r6, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <_calloc_r+0x1e>
 8009a2a:	2600      	movs	r6, #0
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	220c      	movs	r2, #12
 8009a32:	6002      	str	r2, [r0, #0]
 8009a34:	e7f9      	b.n	8009a2a <_calloc_r+0x12>
 8009a36:	462a      	mov	r2, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f7fe fa5c 	bl	8007ef6 <memset>
 8009a3e:	e7f5      	b.n	8009a2c <_calloc_r+0x14>

08009a40 <__ascii_mbtowc>:
 8009a40:	b082      	sub	sp, #8
 8009a42:	b901      	cbnz	r1, 8009a46 <__ascii_mbtowc+0x6>
 8009a44:	a901      	add	r1, sp, #4
 8009a46:	b142      	cbz	r2, 8009a5a <__ascii_mbtowc+0x1a>
 8009a48:	b14b      	cbz	r3, 8009a5e <__ascii_mbtowc+0x1e>
 8009a4a:	7813      	ldrb	r3, [r2, #0]
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	1e10      	subs	r0, r2, #0
 8009a52:	bf18      	it	ne
 8009a54:	2001      	movne	r0, #1
 8009a56:	b002      	add	sp, #8
 8009a58:	4770      	bx	lr
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	e7fb      	b.n	8009a56 <__ascii_mbtowc+0x16>
 8009a5e:	f06f 0001 	mvn.w	r0, #1
 8009a62:	e7f8      	b.n	8009a56 <__ascii_mbtowc+0x16>

08009a64 <_realloc_r>:
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a68:	4680      	mov	r8, r0
 8009a6a:	4615      	mov	r5, r2
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	b921      	cbnz	r1, 8009a7a <_realloc_r+0x16>
 8009a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	4611      	mov	r1, r2
 8009a76:	f7ff b98f 	b.w	8008d98 <_malloc_r>
 8009a7a:	b92a      	cbnz	r2, 8009a88 <_realloc_r+0x24>
 8009a7c:	f7ff f918 	bl	8008cb0 <_free_r>
 8009a80:	2400      	movs	r4, #0
 8009a82:	4620      	mov	r0, r4
 8009a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a88:	f000 f841 	bl	8009b0e <_malloc_usable_size_r>
 8009a8c:	4285      	cmp	r5, r0
 8009a8e:	4606      	mov	r6, r0
 8009a90:	d802      	bhi.n	8009a98 <_realloc_r+0x34>
 8009a92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a96:	d8f4      	bhi.n	8009a82 <_realloc_r+0x1e>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	f7ff f97c 	bl	8008d98 <_malloc_r>
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d0ec      	beq.n	8009a80 <_realloc_r+0x1c>
 8009aa6:	42b5      	cmp	r5, r6
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4621      	mov	r1, r4
 8009aac:	bf28      	it	cs
 8009aae:	4632      	movcs	r2, r6
 8009ab0:	f7fe faa1 	bl	8007ff6 <memcpy>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f7ff f8fa 	bl	8008cb0 <_free_r>
 8009abc:	463c      	mov	r4, r7
 8009abe:	e7e0      	b.n	8009a82 <_realloc_r+0x1e>

08009ac0 <__ascii_wctomb>:
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	b141      	cbz	r1, 8009ad8 <__ascii_wctomb+0x18>
 8009ac6:	2aff      	cmp	r2, #255	@ 0xff
 8009ac8:	d904      	bls.n	8009ad4 <__ascii_wctomb+0x14>
 8009aca:	228a      	movs	r2, #138	@ 0x8a
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad2:	4770      	bx	lr
 8009ad4:	700a      	strb	r2, [r1, #0]
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	4770      	bx	lr
	...

08009adc <fiprintf>:
 8009adc:	b40e      	push	{r1, r2, r3}
 8009ade:	b503      	push	{r0, r1, lr}
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	ab03      	add	r3, sp, #12
 8009ae4:	4805      	ldr	r0, [pc, #20]	@ (8009afc <fiprintf+0x20>)
 8009ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aea:	6800      	ldr	r0, [r0, #0]
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	f000 f83f 	bl	8009b70 <_vfiprintf_r>
 8009af2:	b002      	add	sp, #8
 8009af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af8:	b003      	add	sp, #12
 8009afa:	4770      	bx	lr
 8009afc:	2000001c 	.word	0x2000001c

08009b00 <abort>:
 8009b00:	b508      	push	{r3, lr}
 8009b02:	2006      	movs	r0, #6
 8009b04:	f000 fa08 	bl	8009f18 <raise>
 8009b08:	2001      	movs	r0, #1
 8009b0a:	f7f9 f908 	bl	8002d1e <_exit>

08009b0e <_malloc_usable_size_r>:
 8009b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b12:	1f18      	subs	r0, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	bfbc      	itt	lt
 8009b18:	580b      	ldrlt	r3, [r1, r0]
 8009b1a:	18c0      	addlt	r0, r0, r3
 8009b1c:	4770      	bx	lr

08009b1e <__sfputc_r>:
 8009b1e:	6893      	ldr	r3, [r2, #8]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	b410      	push	{r4}
 8009b26:	6093      	str	r3, [r2, #8]
 8009b28:	da08      	bge.n	8009b3c <__sfputc_r+0x1e>
 8009b2a:	6994      	ldr	r4, [r2, #24]
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	db01      	blt.n	8009b34 <__sfputc_r+0x16>
 8009b30:	290a      	cmp	r1, #10
 8009b32:	d103      	bne.n	8009b3c <__sfputc_r+0x1e>
 8009b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b38:	f000 b932 	b.w	8009da0 <__swbuf_r>
 8009b3c:	6813      	ldr	r3, [r2, #0]
 8009b3e:	1c58      	adds	r0, r3, #1
 8009b40:	6010      	str	r0, [r2, #0]
 8009b42:	7019      	strb	r1, [r3, #0]
 8009b44:	4608      	mov	r0, r1
 8009b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <__sfputs_r>:
 8009b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	4614      	mov	r4, r2
 8009b54:	18d5      	adds	r5, r2, r3
 8009b56:	42ac      	cmp	r4, r5
 8009b58:	d101      	bne.n	8009b5e <__sfputs_r+0x12>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e007      	b.n	8009b6e <__sfputs_r+0x22>
 8009b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b62:	463a      	mov	r2, r7
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff ffda 	bl	8009b1e <__sfputc_r>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d1f3      	bne.n	8009b56 <__sfputs_r+0xa>
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b70 <_vfiprintf_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	460d      	mov	r5, r1
 8009b76:	b09d      	sub	sp, #116	@ 0x74
 8009b78:	4614      	mov	r4, r2
 8009b7a:	4698      	mov	r8, r3
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	b118      	cbz	r0, 8009b88 <_vfiprintf_r+0x18>
 8009b80:	6a03      	ldr	r3, [r0, #32]
 8009b82:	b90b      	cbnz	r3, 8009b88 <_vfiprintf_r+0x18>
 8009b84:	f7fe f904 	bl	8007d90 <__sinit>
 8009b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b8a:	07d9      	lsls	r1, r3, #31
 8009b8c:	d405      	bmi.n	8009b9a <_vfiprintf_r+0x2a>
 8009b8e:	89ab      	ldrh	r3, [r5, #12]
 8009b90:	059a      	lsls	r2, r3, #22
 8009b92:	d402      	bmi.n	8009b9a <_vfiprintf_r+0x2a>
 8009b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b96:	f7fe fa2c 	bl	8007ff2 <__retarget_lock_acquire_recursive>
 8009b9a:	89ab      	ldrh	r3, [r5, #12]
 8009b9c:	071b      	lsls	r3, r3, #28
 8009b9e:	d501      	bpl.n	8009ba4 <_vfiprintf_r+0x34>
 8009ba0:	692b      	ldr	r3, [r5, #16]
 8009ba2:	b99b      	cbnz	r3, 8009bcc <_vfiprintf_r+0x5c>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f000 f938 	bl	8009e1c <__swsetup_r>
 8009bac:	b170      	cbz	r0, 8009bcc <_vfiprintf_r+0x5c>
 8009bae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bb0:	07dc      	lsls	r4, r3, #31
 8009bb2:	d504      	bpl.n	8009bbe <_vfiprintf_r+0x4e>
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	b01d      	add	sp, #116	@ 0x74
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbe:	89ab      	ldrh	r3, [r5, #12]
 8009bc0:	0598      	lsls	r0, r3, #22
 8009bc2:	d4f7      	bmi.n	8009bb4 <_vfiprintf_r+0x44>
 8009bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc6:	f7fe fa15 	bl	8007ff4 <__retarget_lock_release_recursive>
 8009bca:	e7f3      	b.n	8009bb4 <_vfiprintf_r+0x44>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd0:	2320      	movs	r3, #32
 8009bd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bda:	2330      	movs	r3, #48	@ 0x30
 8009bdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d8c <_vfiprintf_r+0x21c>
 8009be0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009be4:	f04f 0901 	mov.w	r9, #1
 8009be8:	4623      	mov	r3, r4
 8009bea:	469a      	mov	sl, r3
 8009bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf0:	b10a      	cbz	r2, 8009bf6 <_vfiprintf_r+0x86>
 8009bf2:	2a25      	cmp	r2, #37	@ 0x25
 8009bf4:	d1f9      	bne.n	8009bea <_vfiprintf_r+0x7a>
 8009bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bfa:	d00b      	beq.n	8009c14 <_vfiprintf_r+0xa4>
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	4622      	mov	r2, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7ff ffa2 	bl	8009b4c <__sfputs_r>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	f000 80a7 	beq.w	8009d5c <_vfiprintf_r+0x1ec>
 8009c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c10:	445a      	add	r2, fp
 8009c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c14:	f89a 3000 	ldrb.w	r3, [sl]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 809f 	beq.w	8009d5c <_vfiprintf_r+0x1ec>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f04f 32ff 	mov.w	r2, #4294967295
 8009c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c28:	f10a 0a01 	add.w	sl, sl, #1
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c34:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c36:	4654      	mov	r4, sl
 8009c38:	2205      	movs	r2, #5
 8009c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3e:	4853      	ldr	r0, [pc, #332]	@ (8009d8c <_vfiprintf_r+0x21c>)
 8009c40:	f7f6 fae6 	bl	8000210 <memchr>
 8009c44:	9a04      	ldr	r2, [sp, #16]
 8009c46:	b9d8      	cbnz	r0, 8009c80 <_vfiprintf_r+0x110>
 8009c48:	06d1      	lsls	r1, r2, #27
 8009c4a:	bf44      	itt	mi
 8009c4c:	2320      	movmi	r3, #32
 8009c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c52:	0713      	lsls	r3, r2, #28
 8009c54:	bf44      	itt	mi
 8009c56:	232b      	movmi	r3, #43	@ 0x2b
 8009c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c62:	d015      	beq.n	8009c90 <_vfiprintf_r+0x120>
 8009c64:	9a07      	ldr	r2, [sp, #28]
 8009c66:	4654      	mov	r4, sl
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f04f 0c0a 	mov.w	ip, #10
 8009c6e:	4621      	mov	r1, r4
 8009c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c74:	3b30      	subs	r3, #48	@ 0x30
 8009c76:	2b09      	cmp	r3, #9
 8009c78:	d94b      	bls.n	8009d12 <_vfiprintf_r+0x1a2>
 8009c7a:	b1b0      	cbz	r0, 8009caa <_vfiprintf_r+0x13a>
 8009c7c:	9207      	str	r2, [sp, #28]
 8009c7e:	e014      	b.n	8009caa <_vfiprintf_r+0x13a>
 8009c80:	eba0 0308 	sub.w	r3, r0, r8
 8009c84:	fa09 f303 	lsl.w	r3, r9, r3
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	46a2      	mov	sl, r4
 8009c8e:	e7d2      	b.n	8009c36 <_vfiprintf_r+0xc6>
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	1d19      	adds	r1, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	9103      	str	r1, [sp, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfbb      	ittet	lt
 8009c9c:	425b      	neglt	r3, r3
 8009c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca2:	9307      	strge	r3, [sp, #28]
 8009ca4:	9307      	strlt	r3, [sp, #28]
 8009ca6:	bfb8      	it	lt
 8009ca8:	9204      	strlt	r2, [sp, #16]
 8009caa:	7823      	ldrb	r3, [r4, #0]
 8009cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cae:	d10a      	bne.n	8009cc6 <_vfiprintf_r+0x156>
 8009cb0:	7863      	ldrb	r3, [r4, #1]
 8009cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb4:	d132      	bne.n	8009d1c <_vfiprintf_r+0x1ac>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	1d1a      	adds	r2, r3, #4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	9203      	str	r2, [sp, #12]
 8009cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cc2:	3402      	adds	r4, #2
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d9c <_vfiprintf_r+0x22c>
 8009cca:	7821      	ldrb	r1, [r4, #0]
 8009ccc:	2203      	movs	r2, #3
 8009cce:	4650      	mov	r0, sl
 8009cd0:	f7f6 fa9e 	bl	8000210 <memchr>
 8009cd4:	b138      	cbz	r0, 8009ce6 <_vfiprintf_r+0x176>
 8009cd6:	9b04      	ldr	r3, [sp, #16]
 8009cd8:	eba0 000a 	sub.w	r0, r0, sl
 8009cdc:	2240      	movs	r2, #64	@ 0x40
 8009cde:	4082      	lsls	r2, r0
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	3401      	adds	r4, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cea:	4829      	ldr	r0, [pc, #164]	@ (8009d90 <_vfiprintf_r+0x220>)
 8009cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cf0:	2206      	movs	r2, #6
 8009cf2:	f7f6 fa8d 	bl	8000210 <memchr>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d03f      	beq.n	8009d7a <_vfiprintf_r+0x20a>
 8009cfa:	4b26      	ldr	r3, [pc, #152]	@ (8009d94 <_vfiprintf_r+0x224>)
 8009cfc:	bb1b      	cbnz	r3, 8009d46 <_vfiprintf_r+0x1d6>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	3307      	adds	r3, #7
 8009d02:	f023 0307 	bic.w	r3, r3, #7
 8009d06:	3308      	adds	r3, #8
 8009d08:	9303      	str	r3, [sp, #12]
 8009d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0c:	443b      	add	r3, r7
 8009d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d10:	e76a      	b.n	8009be8 <_vfiprintf_r+0x78>
 8009d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d16:	460c      	mov	r4, r1
 8009d18:	2001      	movs	r0, #1
 8009d1a:	e7a8      	b.n	8009c6e <_vfiprintf_r+0xfe>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	3401      	adds	r4, #1
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	4619      	mov	r1, r3
 8009d24:	f04f 0c0a 	mov.w	ip, #10
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d2e:	3a30      	subs	r2, #48	@ 0x30
 8009d30:	2a09      	cmp	r2, #9
 8009d32:	d903      	bls.n	8009d3c <_vfiprintf_r+0x1cc>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0c6      	beq.n	8009cc6 <_vfiprintf_r+0x156>
 8009d38:	9105      	str	r1, [sp, #20]
 8009d3a:	e7c4      	b.n	8009cc6 <_vfiprintf_r+0x156>
 8009d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d40:	4604      	mov	r4, r0
 8009d42:	2301      	movs	r3, #1
 8009d44:	e7f0      	b.n	8009d28 <_vfiprintf_r+0x1b8>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4b12      	ldr	r3, [pc, #72]	@ (8009d98 <_vfiprintf_r+0x228>)
 8009d4e:	a904      	add	r1, sp, #16
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7fd fbd9 	bl	8007508 <_printf_float>
 8009d56:	4607      	mov	r7, r0
 8009d58:	1c78      	adds	r0, r7, #1
 8009d5a:	d1d6      	bne.n	8009d0a <_vfiprintf_r+0x19a>
 8009d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d5e:	07d9      	lsls	r1, r3, #31
 8009d60:	d405      	bmi.n	8009d6e <_vfiprintf_r+0x1fe>
 8009d62:	89ab      	ldrh	r3, [r5, #12]
 8009d64:	059a      	lsls	r2, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_vfiprintf_r+0x1fe>
 8009d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d6a:	f7fe f943 	bl	8007ff4 <__retarget_lock_release_recursive>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	065b      	lsls	r3, r3, #25
 8009d72:	f53f af1f 	bmi.w	8009bb4 <_vfiprintf_r+0x44>
 8009d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d78:	e71e      	b.n	8009bb8 <_vfiprintf_r+0x48>
 8009d7a:	ab03      	add	r3, sp, #12
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4b05      	ldr	r3, [pc, #20]	@ (8009d98 <_vfiprintf_r+0x228>)
 8009d82:	a904      	add	r1, sp, #16
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7fd fe57 	bl	8007a38 <_printf_i>
 8009d8a:	e7e4      	b.n	8009d56 <_vfiprintf_r+0x1e6>
 8009d8c:	0800b2a8 	.word	0x0800b2a8
 8009d90:	0800b2b2 	.word	0x0800b2b2
 8009d94:	08007509 	.word	0x08007509
 8009d98:	08009b4d 	.word	0x08009b4d
 8009d9c:	0800b2ae 	.word	0x0800b2ae

08009da0 <__swbuf_r>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	460e      	mov	r6, r1
 8009da4:	4614      	mov	r4, r2
 8009da6:	4605      	mov	r5, r0
 8009da8:	b118      	cbz	r0, 8009db2 <__swbuf_r+0x12>
 8009daa:	6a03      	ldr	r3, [r0, #32]
 8009dac:	b90b      	cbnz	r3, 8009db2 <__swbuf_r+0x12>
 8009dae:	f7fd ffef 	bl	8007d90 <__sinit>
 8009db2:	69a3      	ldr	r3, [r4, #24]
 8009db4:	60a3      	str	r3, [r4, #8]
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	071a      	lsls	r2, r3, #28
 8009dba:	d501      	bpl.n	8009dc0 <__swbuf_r+0x20>
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	b943      	cbnz	r3, 8009dd2 <__swbuf_r+0x32>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f82a 	bl	8009e1c <__swsetup_r>
 8009dc8:	b118      	cbz	r0, 8009dd2 <__swbuf_r+0x32>
 8009dca:	f04f 37ff 	mov.w	r7, #4294967295
 8009dce:	4638      	mov	r0, r7
 8009dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	1a98      	subs	r0, r3, r2
 8009dd8:	6963      	ldr	r3, [r4, #20]
 8009dda:	b2f6      	uxtb	r6, r6
 8009ddc:	4283      	cmp	r3, r0
 8009dde:	4637      	mov	r7, r6
 8009de0:	dc05      	bgt.n	8009dee <__swbuf_r+0x4e>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4628      	mov	r0, r5
 8009de6:	f7ff fdc1 	bl	800996c <_fflush_r>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d1ed      	bne.n	8009dca <__swbuf_r+0x2a>
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	60a3      	str	r3, [r4, #8]
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	6022      	str	r2, [r4, #0]
 8009dfa:	701e      	strb	r6, [r3, #0]
 8009dfc:	6962      	ldr	r2, [r4, #20]
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d004      	beq.n	8009e0e <__swbuf_r+0x6e>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	07db      	lsls	r3, r3, #31
 8009e08:	d5e1      	bpl.n	8009dce <__swbuf_r+0x2e>
 8009e0a:	2e0a      	cmp	r6, #10
 8009e0c:	d1df      	bne.n	8009dce <__swbuf_r+0x2e>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4628      	mov	r0, r5
 8009e12:	f7ff fdab 	bl	800996c <_fflush_r>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d0d9      	beq.n	8009dce <__swbuf_r+0x2e>
 8009e1a:	e7d6      	b.n	8009dca <__swbuf_r+0x2a>

08009e1c <__swsetup_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4b29      	ldr	r3, [pc, #164]	@ (8009ec4 <__swsetup_r+0xa8>)
 8009e20:	4605      	mov	r5, r0
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	460c      	mov	r4, r1
 8009e26:	b118      	cbz	r0, 8009e30 <__swsetup_r+0x14>
 8009e28:	6a03      	ldr	r3, [r0, #32]
 8009e2a:	b90b      	cbnz	r3, 8009e30 <__swsetup_r+0x14>
 8009e2c:	f7fd ffb0 	bl	8007d90 <__sinit>
 8009e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e34:	0719      	lsls	r1, r3, #28
 8009e36:	d422      	bmi.n	8009e7e <__swsetup_r+0x62>
 8009e38:	06da      	lsls	r2, r3, #27
 8009e3a:	d407      	bmi.n	8009e4c <__swsetup_r+0x30>
 8009e3c:	2209      	movs	r2, #9
 8009e3e:	602a      	str	r2, [r5, #0]
 8009e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4a:	e033      	b.n	8009eb4 <__swsetup_r+0x98>
 8009e4c:	0758      	lsls	r0, r3, #29
 8009e4e:	d512      	bpl.n	8009e76 <__swsetup_r+0x5a>
 8009e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e52:	b141      	cbz	r1, 8009e66 <__swsetup_r+0x4a>
 8009e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	d002      	beq.n	8009e62 <__swsetup_r+0x46>
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f7fe ff27 	bl	8008cb0 <_free_r>
 8009e62:	2300      	movs	r3, #0
 8009e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6063      	str	r3, [r4, #4]
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f043 0308 	orr.w	r3, r3, #8
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	b94b      	cbnz	r3, 8009e96 <__swsetup_r+0x7a>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8c:	d003      	beq.n	8009e96 <__swsetup_r+0x7a>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 f883 	bl	8009f9c <__smakebuf_r>
 8009e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e9a:	f013 0201 	ands.w	r2, r3, #1
 8009e9e:	d00a      	beq.n	8009eb6 <__swsetup_r+0x9a>
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	60a2      	str	r2, [r4, #8]
 8009ea4:	6962      	ldr	r2, [r4, #20]
 8009ea6:	4252      	negs	r2, r2
 8009ea8:	61a2      	str	r2, [r4, #24]
 8009eaa:	6922      	ldr	r2, [r4, #16]
 8009eac:	b942      	cbnz	r2, 8009ec0 <__swsetup_r+0xa4>
 8009eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009eb2:	d1c5      	bne.n	8009e40 <__swsetup_r+0x24>
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	0799      	lsls	r1, r3, #30
 8009eb8:	bf58      	it	pl
 8009eba:	6962      	ldrpl	r2, [r4, #20]
 8009ebc:	60a2      	str	r2, [r4, #8]
 8009ebe:	e7f4      	b.n	8009eaa <__swsetup_r+0x8e>
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7f7      	b.n	8009eb4 <__swsetup_r+0x98>
 8009ec4:	2000001c 	.word	0x2000001c

08009ec8 <_raise_r>:
 8009ec8:	291f      	cmp	r1, #31
 8009eca:	b538      	push	{r3, r4, r5, lr}
 8009ecc:	4605      	mov	r5, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	d904      	bls.n	8009edc <_raise_r+0x14>
 8009ed2:	2316      	movs	r3, #22
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ede:	b112      	cbz	r2, 8009ee6 <_raise_r+0x1e>
 8009ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ee4:	b94b      	cbnz	r3, 8009efa <_raise_r+0x32>
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 f830 	bl	8009f4c <_getpid_r>
 8009eec:	4622      	mov	r2, r4
 8009eee:	4601      	mov	r1, r0
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef6:	f000 b817 	b.w	8009f28 <_kill_r>
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d00a      	beq.n	8009f14 <_raise_r+0x4c>
 8009efe:	1c59      	adds	r1, r3, #1
 8009f00:	d103      	bne.n	8009f0a <_raise_r+0x42>
 8009f02:	2316      	movs	r3, #22
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	2001      	movs	r0, #1
 8009f08:	e7e7      	b.n	8009eda <_raise_r+0x12>
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f10:	4620      	mov	r0, r4
 8009f12:	4798      	blx	r3
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7e0      	b.n	8009eda <_raise_r+0x12>

08009f18 <raise>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	@ (8009f24 <raise+0xc>)
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f7ff bfd3 	b.w	8009ec8 <_raise_r>
 8009f22:	bf00      	nop
 8009f24:	2000001c 	.word	0x2000001c

08009f28 <_kill_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	@ (8009f48 <_kill_r+0x20>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f8 fee2 	bl	8002cfe <_kill>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_kill_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_kill_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	20000b14 	.word	0x20000b14

08009f4c <_getpid_r>:
 8009f4c:	f7f8 becf 	b.w	8002cee <_getpid>

08009f50 <__swhatbuf_r>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	460c      	mov	r4, r1
 8009f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	b096      	sub	sp, #88	@ 0x58
 8009f5c:	4615      	mov	r5, r2
 8009f5e:	461e      	mov	r6, r3
 8009f60:	da0d      	bge.n	8009f7e <__swhatbuf_r+0x2e>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f68:	f04f 0100 	mov.w	r1, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	2340      	movne	r3, #64	@ 0x40
 8009f70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f74:	2000      	movs	r0, #0
 8009f76:	6031      	str	r1, [r6, #0]
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	b016      	add	sp, #88	@ 0x58
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f000 f848 	bl	800a014 <_fstat_r>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dbec      	blt.n	8009f62 <__swhatbuf_r+0x12>
 8009f88:	9901      	ldr	r1, [sp, #4]
 8009f8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f92:	4259      	negs	r1, r3
 8009f94:	4159      	adcs	r1, r3
 8009f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f9a:	e7eb      	b.n	8009f74 <__swhatbuf_r+0x24>

08009f9c <__smakebuf_r>:
 8009f9c:	898b      	ldrh	r3, [r1, #12]
 8009f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa0:	079d      	lsls	r5, r3, #30
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	d507      	bpl.n	8009fb8 <__smakebuf_r+0x1c>
 8009fa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	6163      	str	r3, [r4, #20]
 8009fb4:	b003      	add	sp, #12
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	ab01      	add	r3, sp, #4
 8009fba:	466a      	mov	r2, sp
 8009fbc:	f7ff ffc8 	bl	8009f50 <__swhatbuf_r>
 8009fc0:	9f00      	ldr	r7, [sp, #0]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7fe fee6 	bl	8008d98 <_malloc_r>
 8009fcc:	b948      	cbnz	r0, 8009fe2 <__smakebuf_r+0x46>
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	059a      	lsls	r2, r3, #22
 8009fd4:	d4ee      	bmi.n	8009fb4 <__smakebuf_r+0x18>
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	f043 0302 	orr.w	r3, r3, #2
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	e7e2      	b.n	8009fa8 <__smakebuf_r+0xc>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	6020      	str	r0, [r4, #0]
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ff2:	b15b      	cbz	r3, 800a00c <__smakebuf_r+0x70>
 8009ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 f81d 	bl	800a038 <_isatty_r>
 8009ffe:	b128      	cbz	r0, 800a00c <__smakebuf_r+0x70>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	f043 0301 	orr.w	r3, r3, #1
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	431d      	orrs	r5, r3
 800a010:	81a5      	strh	r5, [r4, #12]
 800a012:	e7cf      	b.n	8009fb4 <__smakebuf_r+0x18>

0800a014 <_fstat_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d07      	ldr	r5, [pc, #28]	@ (800a034 <_fstat_r+0x20>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	4611      	mov	r1, r2
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	f7f8 fecc 	bl	8002dbe <_fstat>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d102      	bne.n	800a030 <_fstat_r+0x1c>
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	b103      	cbz	r3, 800a030 <_fstat_r+0x1c>
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	bd38      	pop	{r3, r4, r5, pc}
 800a032:	bf00      	nop
 800a034:	20000b14 	.word	0x20000b14

0800a038 <_isatty_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d06      	ldr	r5, [pc, #24]	@ (800a054 <_isatty_r+0x1c>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	f7f8 fecb 	bl	8002dde <_isatty>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_isatty_r+0x1a>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_isatty_r+0x1a>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20000b14 	.word	0x20000b14

0800a058 <powf>:
 800a058:	b508      	push	{r3, lr}
 800a05a:	ed2d 8b04 	vpush	{d8-d9}
 800a05e:	eeb0 8a60 	vmov.f32	s16, s1
 800a062:	eeb0 9a40 	vmov.f32	s18, s0
 800a066:	f000 f859 	bl	800a11c <__ieee754_powf>
 800a06a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a072:	eef0 8a40 	vmov.f32	s17, s0
 800a076:	d63e      	bvs.n	800a0f6 <powf+0x9e>
 800a078:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a080:	d112      	bne.n	800a0a8 <powf+0x50>
 800a082:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08a:	d039      	beq.n	800a100 <powf+0xa8>
 800a08c:	eeb0 0a48 	vmov.f32	s0, s16
 800a090:	f000 f839 	bl	800a106 <finitef>
 800a094:	b378      	cbz	r0, 800a0f6 <powf+0x9e>
 800a096:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09e:	d52a      	bpl.n	800a0f6 <powf+0x9e>
 800a0a0:	f7fd ff7c 	bl	8007f9c <__errno>
 800a0a4:	2322      	movs	r3, #34	@ 0x22
 800a0a6:	e014      	b.n	800a0d2 <powf+0x7a>
 800a0a8:	f000 f82d 	bl	800a106 <finitef>
 800a0ac:	b998      	cbnz	r0, 800a0d6 <powf+0x7e>
 800a0ae:	eeb0 0a49 	vmov.f32	s0, s18
 800a0b2:	f000 f828 	bl	800a106 <finitef>
 800a0b6:	b170      	cbz	r0, 800a0d6 <powf+0x7e>
 800a0b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a0bc:	f000 f823 	bl	800a106 <finitef>
 800a0c0:	b148      	cbz	r0, 800a0d6 <powf+0x7e>
 800a0c2:	eef4 8a68 	vcmp.f32	s17, s17
 800a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ca:	d7e9      	bvc.n	800a0a0 <powf+0x48>
 800a0cc:	f7fd ff66 	bl	8007f9c <__errno>
 800a0d0:	2321      	movs	r3, #33	@ 0x21
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	e00f      	b.n	800a0f6 <powf+0x9e>
 800a0d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0de:	d10a      	bne.n	800a0f6 <powf+0x9e>
 800a0e0:	eeb0 0a49 	vmov.f32	s0, s18
 800a0e4:	f000 f80f 	bl	800a106 <finitef>
 800a0e8:	b128      	cbz	r0, 800a0f6 <powf+0x9e>
 800a0ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a0ee:	f000 f80a 	bl	800a106 <finitef>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d1d4      	bne.n	800a0a0 <powf+0x48>
 800a0f6:	eeb0 0a68 	vmov.f32	s0, s17
 800a0fa:	ecbd 8b04 	vpop	{d8-d9}
 800a0fe:	bd08      	pop	{r3, pc}
 800a100:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a104:	e7f7      	b.n	800a0f6 <powf+0x9e>

0800a106 <finitef>:
 800a106:	ee10 3a10 	vmov	r3, s0
 800a10a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a10e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a112:	bfac      	ite	ge
 800a114:	2000      	movge	r0, #0
 800a116:	2001      	movlt	r0, #1
 800a118:	4770      	bx	lr
	...

0800a11c <__ieee754_powf>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	ee10 4a90 	vmov	r4, s1
 800a124:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800a128:	ed2d 8b02 	vpush	{d8}
 800a12c:	ee10 6a10 	vmov	r6, s0
 800a130:	eeb0 8a40 	vmov.f32	s16, s0
 800a134:	eef0 8a60 	vmov.f32	s17, s1
 800a138:	d10c      	bne.n	800a154 <__ieee754_powf+0x38>
 800a13a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800a13e:	0076      	lsls	r6, r6, #1
 800a140:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800a144:	f240 829c 	bls.w	800a680 <__ieee754_powf+0x564>
 800a148:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a14c:	ecbd 8b02 	vpop	{d8}
 800a150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a154:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800a158:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a15c:	d802      	bhi.n	800a164 <__ieee754_powf+0x48>
 800a15e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a162:	d908      	bls.n	800a176 <__ieee754_powf+0x5a>
 800a164:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800a168:	d1ee      	bne.n	800a148 <__ieee754_powf+0x2c>
 800a16a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a16e:	0064      	lsls	r4, r4, #1
 800a170:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a174:	e7e6      	b.n	800a144 <__ieee754_powf+0x28>
 800a176:	2e00      	cmp	r6, #0
 800a178:	da1e      	bge.n	800a1b8 <__ieee754_powf+0x9c>
 800a17a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800a17e:	d22b      	bcs.n	800a1d8 <__ieee754_powf+0xbc>
 800a180:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a184:	d332      	bcc.n	800a1ec <__ieee754_powf+0xd0>
 800a186:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800a18a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a18e:	fa49 f503 	asr.w	r5, r9, r3
 800a192:	fa05 f303 	lsl.w	r3, r5, r3
 800a196:	454b      	cmp	r3, r9
 800a198:	d126      	bne.n	800a1e8 <__ieee754_powf+0xcc>
 800a19a:	f005 0501 	and.w	r5, r5, #1
 800a19e:	f1c5 0502 	rsb	r5, r5, #2
 800a1a2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a1a6:	d122      	bne.n	800a1ee <__ieee754_powf+0xd2>
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	f280 826f 	bge.w	800a68c <__ieee754_powf+0x570>
 800a1ae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a1b2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a1b6:	e7c9      	b.n	800a14c <__ieee754_powf+0x30>
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a1be:	d1f0      	bne.n	800a1a2 <__ieee754_powf+0x86>
 800a1c0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a1c4:	f000 825c 	beq.w	800a680 <__ieee754_powf+0x564>
 800a1c8:	d908      	bls.n	800a1dc <__ieee754_powf+0xc0>
 800a1ca:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800a52c <__ieee754_powf+0x410>
 800a1ce:	2c00      	cmp	r4, #0
 800a1d0:	bfa8      	it	ge
 800a1d2:	eeb0 0a68 	vmovge.f32	s0, s17
 800a1d6:	e7b9      	b.n	800a14c <__ieee754_powf+0x30>
 800a1d8:	2502      	movs	r5, #2
 800a1da:	e7ee      	b.n	800a1ba <__ieee754_powf+0x9e>
 800a1dc:	2c00      	cmp	r4, #0
 800a1de:	f280 8252 	bge.w	800a686 <__ieee754_powf+0x56a>
 800a1e2:	eeb1 0a68 	vneg.f32	s0, s17
 800a1e6:	e7b1      	b.n	800a14c <__ieee754_powf+0x30>
 800a1e8:	2500      	movs	r5, #0
 800a1ea:	e7da      	b.n	800a1a2 <__ieee754_powf+0x86>
 800a1ec:	2500      	movs	r5, #0
 800a1ee:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a1f2:	d102      	bne.n	800a1fa <__ieee754_powf+0xde>
 800a1f4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a1f8:	e7a8      	b.n	800a14c <__ieee754_powf+0x30>
 800a1fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a1fe:	d109      	bne.n	800a214 <__ieee754_powf+0xf8>
 800a200:	2e00      	cmp	r6, #0
 800a202:	db07      	blt.n	800a214 <__ieee754_powf+0xf8>
 800a204:	eeb0 0a48 	vmov.f32	s0, s16
 800a208:	ecbd 8b02 	vpop	{d8}
 800a20c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a210:	f000 bae8 	b.w	800a7e4 <__ieee754_sqrtf>
 800a214:	eeb0 0a48 	vmov.f32	s0, s16
 800a218:	f000 fa50 	bl	800a6bc <fabsf>
 800a21c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a220:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a224:	4647      	mov	r7, r8
 800a226:	d002      	beq.n	800a22e <__ieee754_powf+0x112>
 800a228:	f1b8 0f00 	cmp.w	r8, #0
 800a22c:	d117      	bne.n	800a25e <__ieee754_powf+0x142>
 800a22e:	2c00      	cmp	r4, #0
 800a230:	bfbc      	itt	lt
 800a232:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a236:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	da86      	bge.n	800a14c <__ieee754_powf+0x30>
 800a23e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a242:	ea58 0805 	orrs.w	r8, r8, r5
 800a246:	d104      	bne.n	800a252 <__ieee754_powf+0x136>
 800a248:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a24c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a250:	e77c      	b.n	800a14c <__ieee754_powf+0x30>
 800a252:	2d01      	cmp	r5, #1
 800a254:	f47f af7a 	bne.w	800a14c <__ieee754_powf+0x30>
 800a258:	eeb1 0a40 	vneg.f32	s0, s0
 800a25c:	e776      	b.n	800a14c <__ieee754_powf+0x30>
 800a25e:	0ff0      	lsrs	r0, r6, #31
 800a260:	3801      	subs	r0, #1
 800a262:	ea55 0300 	orrs.w	r3, r5, r0
 800a266:	d104      	bne.n	800a272 <__ieee754_powf+0x156>
 800a268:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a26c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a270:	e76c      	b.n	800a14c <__ieee754_powf+0x30>
 800a272:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800a276:	d973      	bls.n	800a360 <__ieee754_powf+0x244>
 800a278:	4bad      	ldr	r3, [pc, #692]	@ (800a530 <__ieee754_powf+0x414>)
 800a27a:	4598      	cmp	r8, r3
 800a27c:	d808      	bhi.n	800a290 <__ieee754_powf+0x174>
 800a27e:	2c00      	cmp	r4, #0
 800a280:	da0b      	bge.n	800a29a <__ieee754_powf+0x17e>
 800a282:	2000      	movs	r0, #0
 800a284:	ecbd 8b02 	vpop	{d8}
 800a288:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	f000 baa4 	b.w	800a7d8 <__math_oflowf>
 800a290:	4ba8      	ldr	r3, [pc, #672]	@ (800a534 <__ieee754_powf+0x418>)
 800a292:	4598      	cmp	r8, r3
 800a294:	d908      	bls.n	800a2a8 <__ieee754_powf+0x18c>
 800a296:	2c00      	cmp	r4, #0
 800a298:	dcf3      	bgt.n	800a282 <__ieee754_powf+0x166>
 800a29a:	2000      	movs	r0, #0
 800a29c:	ecbd 8b02 	vpop	{d8}
 800a2a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	f000 ba92 	b.w	800a7cc <__math_uflowf>
 800a2a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a2ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a2b0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800a538 <__ieee754_powf+0x41c>
 800a2b4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a2b8:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a2bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a2c0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a2c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a2c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2cc:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800a53c <__ieee754_powf+0x420>
 800a2d0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a2d4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800a540 <__ieee754_powf+0x424>
 800a2d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a2dc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800a544 <__ieee754_powf+0x428>
 800a2e0:	eef0 6a67 	vmov.f32	s13, s15
 800a2e4:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a2e8:	ee16 3a90 	vmov	r3, s13
 800a2ec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a2f0:	f023 030f 	bic.w	r3, r3, #15
 800a2f4:	ee06 3a90 	vmov	s13, r3
 800a2f8:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a2fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a300:	3d01      	subs	r5, #1
 800a302:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800a306:	4305      	orrs	r5, r0
 800a308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a30c:	f024 040f 	bic.w	r4, r4, #15
 800a310:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800a314:	bf18      	it	ne
 800a316:	eeb0 8a47 	vmovne.f32	s16, s14
 800a31a:	ee07 4a10 	vmov	s14, r4
 800a31e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a322:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a32e:	ee07 4a10 	vmov	s14, r4
 800a332:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a336:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a33a:	ee17 1a10 	vmov	r1, s14
 800a33e:	2900      	cmp	r1, #0
 800a340:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a344:	f340 80dd 	ble.w	800a502 <__ieee754_powf+0x3e6>
 800a348:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a34c:	f240 80ca 	bls.w	800a4e4 <__ieee754_powf+0x3c8>
 800a350:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a358:	bf4c      	ite	mi
 800a35a:	2001      	movmi	r0, #1
 800a35c:	2000      	movpl	r0, #0
 800a35e:	e791      	b.n	800a284 <__ieee754_powf+0x168>
 800a360:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a364:	bf01      	itttt	eq
 800a366:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800a548 <__ieee754_powf+0x42c>
 800a36a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a36e:	f06f 0317 	mvneq.w	r3, #23
 800a372:	ee17 7a90 	vmoveq	r7, s15
 800a376:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800a37a:	bf18      	it	ne
 800a37c:	2300      	movne	r3, #0
 800a37e:	3a7f      	subs	r2, #127	@ 0x7f
 800a380:	441a      	add	r2, r3
 800a382:	4b72      	ldr	r3, [pc, #456]	@ (800a54c <__ieee754_powf+0x430>)
 800a384:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800a388:	429f      	cmp	r7, r3
 800a38a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800a38e:	dd06      	ble.n	800a39e <__ieee754_powf+0x282>
 800a390:	4b6f      	ldr	r3, [pc, #444]	@ (800a550 <__ieee754_powf+0x434>)
 800a392:	429f      	cmp	r7, r3
 800a394:	f340 80a4 	ble.w	800a4e0 <__ieee754_powf+0x3c4>
 800a398:	3201      	adds	r2, #1
 800a39a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800a39e:	2600      	movs	r6, #0
 800a3a0:	4b6c      	ldr	r3, [pc, #432]	@ (800a554 <__ieee754_powf+0x438>)
 800a3a2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a3a6:	ee07 1a10 	vmov	s14, r1
 800a3aa:	edd3 5a00 	vldr	s11, [r3]
 800a3ae:	4b6a      	ldr	r3, [pc, #424]	@ (800a558 <__ieee754_powf+0x43c>)
 800a3b0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a3b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3b8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a3bc:	1049      	asrs	r1, r1, #1
 800a3be:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800a3c2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800a3c6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800a3ca:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a3ce:	ee07 1a90 	vmov	s15, r1
 800a3d2:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a3d6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a3da:	ee15 7a10 	vmov	r7, s10
 800a3de:	401f      	ands	r7, r3
 800a3e0:	ee06 7a90 	vmov	s13, r7
 800a3e4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a3e8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a3ec:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a3f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a3f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a55c <__ieee754_powf+0x440>
 800a3f8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a560 <__ieee754_powf+0x444>
 800a3fc:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a400:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800a564 <__ieee754_powf+0x448>
 800a404:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a408:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800a538 <__ieee754_powf+0x41c>
 800a40c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a410:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a568 <__ieee754_powf+0x44c>
 800a414:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a418:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800a56c <__ieee754_powf+0x450>
 800a41c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a420:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a424:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a428:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a42c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a430:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800a434:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a438:	eef0 5a67 	vmov.f32	s11, s15
 800a43c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a440:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a444:	ee15 1a90 	vmov	r1, s11
 800a448:	4019      	ands	r1, r3
 800a44a:	ee05 1a90 	vmov	s11, r1
 800a44e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a452:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a45a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a45e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a462:	eeb0 6a67 	vmov.f32	s12, s15
 800a466:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a46a:	ee16 1a10 	vmov	r1, s12
 800a46e:	4019      	ands	r1, r3
 800a470:	ee06 1a10 	vmov	s12, r1
 800a474:	eeb0 7a46 	vmov.f32	s14, s12
 800a478:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a47c:	493c      	ldr	r1, [pc, #240]	@ (800a570 <__ieee754_powf+0x454>)
 800a47e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800a482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a486:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a574 <__ieee754_powf+0x458>
 800a48a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800a578 <__ieee754_powf+0x45c>
 800a48e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a492:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a57c <__ieee754_powf+0x460>
 800a496:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a49a:	ed91 7a00 	vldr	s14, [r1]
 800a49e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4a2:	ee07 2a10 	vmov	s14, r2
 800a4a6:	eef0 6a67 	vmov.f32	s13, s15
 800a4aa:	4a35      	ldr	r2, [pc, #212]	@ (800a580 <__ieee754_powf+0x464>)
 800a4ac:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a4b0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800a4b4:	ed92 5a00 	vldr	s10, [r2]
 800a4b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a4bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a4c0:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a4c4:	ee16 2a90 	vmov	r2, s13
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	ee06 3a90 	vmov	s13, r3
 800a4ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a4d2:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a4d6:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a4da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4de:	e70f      	b.n	800a300 <__ieee754_powf+0x1e4>
 800a4e0:	2601      	movs	r6, #1
 800a4e2:	e75d      	b.n	800a3a0 <__ieee754_powf+0x284>
 800a4e4:	d152      	bne.n	800a58c <__ieee754_powf+0x470>
 800a4e6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a584 <__ieee754_powf+0x468>
 800a4ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4ee:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a4f2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fa:	f73f af29 	bgt.w	800a350 <__ieee754_powf+0x234>
 800a4fe:	2386      	movs	r3, #134	@ 0x86
 800a500:	e048      	b.n	800a594 <__ieee754_powf+0x478>
 800a502:	4a21      	ldr	r2, [pc, #132]	@ (800a588 <__ieee754_powf+0x46c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d907      	bls.n	800a518 <__ieee754_powf+0x3fc>
 800a508:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a510:	bf4c      	ite	mi
 800a512:	2001      	movmi	r0, #1
 800a514:	2000      	movpl	r0, #0
 800a516:	e6c1      	b.n	800a29c <__ieee754_powf+0x180>
 800a518:	d138      	bne.n	800a58c <__ieee754_powf+0x470>
 800a51a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a51e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a526:	dbea      	blt.n	800a4fe <__ieee754_powf+0x3e2>
 800a528:	e7ee      	b.n	800a508 <__ieee754_powf+0x3ec>
 800a52a:	bf00      	nop
 800a52c:	00000000 	.word	0x00000000
 800a530:	3f7ffff3 	.word	0x3f7ffff3
 800a534:	3f800007 	.word	0x3f800007
 800a538:	3eaaaaab 	.word	0x3eaaaaab
 800a53c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a540:	36eca570 	.word	0x36eca570
 800a544:	3fb8aa00 	.word	0x3fb8aa00
 800a548:	4b800000 	.word	0x4b800000
 800a54c:	001cc471 	.word	0x001cc471
 800a550:	005db3d6 	.word	0x005db3d6
 800a554:	0800b410 	.word	0x0800b410
 800a558:	fffff000 	.word	0xfffff000
 800a55c:	3e6c3255 	.word	0x3e6c3255
 800a560:	3e53f142 	.word	0x3e53f142
 800a564:	3e8ba305 	.word	0x3e8ba305
 800a568:	3edb6db7 	.word	0x3edb6db7
 800a56c:	3f19999a 	.word	0x3f19999a
 800a570:	0800b400 	.word	0x0800b400
 800a574:	3f76384f 	.word	0x3f76384f
 800a578:	3f763800 	.word	0x3f763800
 800a57c:	369dc3a0 	.word	0x369dc3a0
 800a580:	0800b408 	.word	0x0800b408
 800a584:	3338aa3c 	.word	0x3338aa3c
 800a588:	43160000 	.word	0x43160000
 800a58c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a590:	d971      	bls.n	800a676 <__ieee754_powf+0x55a>
 800a592:	15db      	asrs	r3, r3, #23
 800a594:	3b7e      	subs	r3, #126	@ 0x7e
 800a596:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a59a:	4118      	asrs	r0, r3
 800a59c:	4408      	add	r0, r1
 800a59e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a5a2:	4a3c      	ldr	r2, [pc, #240]	@ (800a694 <__ieee754_powf+0x578>)
 800a5a4:	3b7f      	subs	r3, #127	@ 0x7f
 800a5a6:	411a      	asrs	r2, r3
 800a5a8:	4002      	ands	r2, r0
 800a5aa:	ee07 2a10 	vmov	s14, r2
 800a5ae:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a5b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800a5b6:	f1c3 0317 	rsb	r3, r3, #23
 800a5ba:	4118      	asrs	r0, r3
 800a5bc:	2900      	cmp	r1, #0
 800a5be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5c2:	bfb8      	it	lt
 800a5c4:	4240      	neglt	r0, r0
 800a5c6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a5ca:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a698 <__ieee754_powf+0x57c>
 800a5ce:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800a69c <__ieee754_powf+0x580>
 800a5d2:	ee17 3a10 	vmov	r3, s14
 800a5d6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a5da:	f023 030f 	bic.w	r3, r3, #15
 800a5de:	ee07 3a10 	vmov	s14, r3
 800a5e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5e6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a5ea:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a5ee:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800a6a0 <__ieee754_powf+0x584>
 800a5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a5fa:	eef0 6a67 	vmov.f32	s13, s15
 800a5fe:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a602:	eef0 5a66 	vmov.f32	s11, s13
 800a606:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a60a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a60e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a612:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800a6a4 <__ieee754_powf+0x588>
 800a616:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800a6a8 <__ieee754_powf+0x58c>
 800a61a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a61e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800a6ac <__ieee754_powf+0x590>
 800a622:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a626:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a6b0 <__ieee754_powf+0x594>
 800a62a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a62e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800a6b4 <__ieee754_powf+0x598>
 800a632:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a636:	eeb0 6a66 	vmov.f32	s12, s13
 800a63a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a63e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a642:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a646:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a64a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a64e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a656:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a65a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a65e:	ee10 3a10 	vmov	r3, s0
 800a662:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a666:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a66a:	da06      	bge.n	800a67a <__ieee754_powf+0x55e>
 800a66c:	f000 f82e 	bl	800a6cc <scalbnf>
 800a670:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a674:	e56a      	b.n	800a14c <__ieee754_powf+0x30>
 800a676:	2000      	movs	r0, #0
 800a678:	e7a5      	b.n	800a5c6 <__ieee754_powf+0x4aa>
 800a67a:	ee00 3a10 	vmov	s0, r3
 800a67e:	e7f7      	b.n	800a670 <__ieee754_powf+0x554>
 800a680:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a684:	e562      	b.n	800a14c <__ieee754_powf+0x30>
 800a686:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a6b8 <__ieee754_powf+0x59c>
 800a68a:	e55f      	b.n	800a14c <__ieee754_powf+0x30>
 800a68c:	eeb0 0a48 	vmov.f32	s0, s16
 800a690:	e55c      	b.n	800a14c <__ieee754_powf+0x30>
 800a692:	bf00      	nop
 800a694:	ff800000 	.word	0xff800000
 800a698:	3f317218 	.word	0x3f317218
 800a69c:	3f317200 	.word	0x3f317200
 800a6a0:	35bfbe8c 	.word	0x35bfbe8c
 800a6a4:	b5ddea0e 	.word	0xb5ddea0e
 800a6a8:	3331bb4c 	.word	0x3331bb4c
 800a6ac:	388ab355 	.word	0x388ab355
 800a6b0:	bb360b61 	.word	0xbb360b61
 800a6b4:	3e2aaaab 	.word	0x3e2aaaab
 800a6b8:	00000000 	.word	0x00000000

0800a6bc <fabsf>:
 800a6bc:	ee10 3a10 	vmov	r3, s0
 800a6c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6c4:	ee00 3a10 	vmov	s0, r3
 800a6c8:	4770      	bx	lr
	...

0800a6cc <scalbnf>:
 800a6cc:	ee10 3a10 	vmov	r3, s0
 800a6d0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a6d4:	d02b      	beq.n	800a72e <scalbnf+0x62>
 800a6d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a6da:	d302      	bcc.n	800a6e2 <scalbnf+0x16>
 800a6dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6e0:	4770      	bx	lr
 800a6e2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a6e6:	d123      	bne.n	800a730 <scalbnf+0x64>
 800a6e8:	4b24      	ldr	r3, [pc, #144]	@ (800a77c <scalbnf+0xb0>)
 800a6ea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a780 <scalbnf+0xb4>
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a6f4:	db17      	blt.n	800a726 <scalbnf+0x5a>
 800a6f6:	ee10 3a10 	vmov	r3, s0
 800a6fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a6fe:	3a19      	subs	r2, #25
 800a700:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a704:	4288      	cmp	r0, r1
 800a706:	dd15      	ble.n	800a734 <scalbnf+0x68>
 800a708:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a784 <scalbnf+0xb8>
 800a70c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a788 <scalbnf+0xbc>
 800a710:	ee10 3a10 	vmov	r3, s0
 800a714:	eeb0 7a67 	vmov.f32	s14, s15
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bfb8      	it	lt
 800a71c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a720:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a724:	4770      	bx	lr
 800a726:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a78c <scalbnf+0xc0>
 800a72a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a72e:	4770      	bx	lr
 800a730:	0dd2      	lsrs	r2, r2, #23
 800a732:	e7e5      	b.n	800a700 <scalbnf+0x34>
 800a734:	4410      	add	r0, r2
 800a736:	28fe      	cmp	r0, #254	@ 0xfe
 800a738:	dce6      	bgt.n	800a708 <scalbnf+0x3c>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	dd06      	ble.n	800a74c <scalbnf+0x80>
 800a73e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a742:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a746:	ee00 3a10 	vmov	s0, r3
 800a74a:	4770      	bx	lr
 800a74c:	f110 0f16 	cmn.w	r0, #22
 800a750:	da09      	bge.n	800a766 <scalbnf+0x9a>
 800a752:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a78c <scalbnf+0xc0>
 800a756:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a790 <scalbnf+0xc4>
 800a75a:	ee10 3a10 	vmov	r3, s0
 800a75e:	eeb0 7a67 	vmov.f32	s14, s15
 800a762:	2b00      	cmp	r3, #0
 800a764:	e7d9      	b.n	800a71a <scalbnf+0x4e>
 800a766:	3019      	adds	r0, #25
 800a768:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a76c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a770:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a794 <scalbnf+0xc8>
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	e7d7      	b.n	800a72a <scalbnf+0x5e>
 800a77a:	bf00      	nop
 800a77c:	ffff3cb0 	.word	0xffff3cb0
 800a780:	4c000000 	.word	0x4c000000
 800a784:	7149f2ca 	.word	0x7149f2ca
 800a788:	f149f2ca 	.word	0xf149f2ca
 800a78c:	0da24260 	.word	0x0da24260
 800a790:	8da24260 	.word	0x8da24260
 800a794:	33000000 	.word	0x33000000

0800a798 <with_errnof>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	ed2d 8b02 	vpush	{d8}
 800a79e:	eeb0 8a40 	vmov.f32	s16, s0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	f7fd fbfa 	bl	8007f9c <__errno>
 800a7a8:	eeb0 0a48 	vmov.f32	s0, s16
 800a7ac:	ecbd 8b02 	vpop	{d8}
 800a7b0:	6004      	str	r4, [r0, #0]
 800a7b2:	bd10      	pop	{r4, pc}

0800a7b4 <xflowf>:
 800a7b4:	b130      	cbz	r0, 800a7c4 <xflowf+0x10>
 800a7b6:	eef1 7a40 	vneg.f32	s15, s0
 800a7ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a7be:	2022      	movs	r0, #34	@ 0x22
 800a7c0:	f7ff bfea 	b.w	800a798 <with_errnof>
 800a7c4:	eef0 7a40 	vmov.f32	s15, s0
 800a7c8:	e7f7      	b.n	800a7ba <xflowf+0x6>
	...

0800a7cc <__math_uflowf>:
 800a7cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a7d4 <__math_uflowf+0x8>
 800a7d0:	f7ff bff0 	b.w	800a7b4 <xflowf>
 800a7d4:	10000000 	.word	0x10000000

0800a7d8 <__math_oflowf>:
 800a7d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a7e0 <__math_oflowf+0x8>
 800a7dc:	f7ff bfea 	b.w	800a7b4 <xflowf>
 800a7e0:	70000000 	.word	0x70000000

0800a7e4 <__ieee754_sqrtf>:
 800a7e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a7e8:	4770      	bx	lr
	...

0800a7ec <_init>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	bf00      	nop
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr

0800a7f8 <_fini>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	bf00      	nop
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr
